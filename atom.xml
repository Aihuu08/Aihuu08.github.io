<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Tutu</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-11-28T17:51:06.907Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Tutu</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="http://example.com/2022/11/29/%E5%85%8D%E8%B4%B9%E5%BE%AE%E8%BD%AFOffice%20365%20E5%20%E8%AE%A2%E9%98%85+5T%20OneDrive%E5%B9%B6%E6%B0%B8%E4%B9%85%E7%BB%AD%E6%9C%9F/"/>
    <id>http://example.com/2022/11/29/%E5%85%8D%E8%B4%B9%E5%BE%AE%E8%BD%AFOffice%20365%20E5%20%E8%AE%A2%E9%98%85+5T%20OneDrive%E5%B9%B6%E6%B0%B8%E4%B9%85%E7%BB%AD%E6%9C%9F/</id>
    <published>2022-11-28T17:31:02.095Z</published>
    <updated>2022-11-28T17:51:06.907Z</updated>
    
    <content type="html"><![CDATA[<h1 id="免费微软Office-365-E5-订阅-5T-OneDrive并永久续期"><a href="#免费微软Office-365-E5-订阅-5T-OneDrive并永久续期" class="headerlink" title="免费微软Office 365 E5 订阅+5T OneDrive并永久续期"></a>免费微软Office 365 E5 订阅+5T OneDrive并永久续期</h1><h2 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1.介绍"></a>1.介绍</h2><p><strong>微软其实一直都对开发版免费提供正版office全家桶</strong>，对开发者的培育力度真的确实很大的，申请一次开发者计划可以获得为期90天的免费 Office365 E5 订阅。</p><p>E5计划就包含了25个用于所有 Office 365 应用的许可证。还附带<strong>5T的不限速OneDrive网盘容量。</strong></p><p>简直就是白嫖党的福音，马上白嫖起来！</p><p>这次主要介绍以下操作和教程</p><ul><li>如何申请E5订阅许可</li><li>获取5T容量的OneDrive </li><li>通过Docker搭建配置永久续期教程。</li></ul><h2 id="2-申请微软开发人员账号"><a href="#2-申请微软开发人员账号" class="headerlink" title="2.申请微软开发人员账号"></a>2.申请微软开发人员账号</h2><ol><li><p><a href="https://developer.microsoft.com/zh-cn/microsoft-365/dev-program">访问链接</a></p></li><li><p><img src="https://tianyedetutu.top/images/2022/11/29/image-20221128232228372.png" alt="image-20221128232228372"></p></li><li><p>点击立即加入</p></li><li><p>注册或者使用自己的微软账号登陆。</p></li><li><p>注册开发人员，国家填China，我选的Japan。公司随便填，然后接受条款，点下一步</p></li><li><p>从事行业可以随便选然后保存</p></li><li><p>选择即时沙盒，如果不需要自定义域名就直接选即时沙盒，反之选第二个。<img src="https://tianyedetutu.top/images/2022/11/29/image-20221129012308133.png" alt="image-20221129012308133"></p></li><li><p>设置好自己需要的配置后验证号码即可</p><p><img src="https://tianyedetutu.top/images/2022/11/29/image-20221129012838615.png" alt="image-20221129012838615"></p></li></ol><h3 id="分配账号"><a href="#分配账号" class="headerlink" title="分配账号"></a>分配账号</h3><p>如果需要分配子账户，到这里<a href="https://admin.microsoft.com登录你的开发者账号,选择用户给添加一个账户/">https://admin.microsoft.com登录你的开发者账号，选择用户给添加一个账户</a></p><h2 id="3-设置-OneDrive-5T-容量"><a href="#3-设置-OneDrive-5T-容量" class="headerlink" title="3.设置 OneDrive 5T 容量"></a>3.设置 OneDrive 5T 容量</h2><p>使用创建的账号，登陆E5</p><p><a href="https://admin.onedrive.com/?v=StorageSettings%EF%BC%8C">https://admin.onedrive.com/?v=StorageSettings，</a></p><p><img src="https://tianyedetutu.top/images/2022/11/29/image-20221129013302124.png" alt="image-20221129013302124"></p><h2 id="4-续期E5开发者账户"><a href="#4-续期E5开发者账户" class="headerlink" title="4.续期E5开发者账户"></a>4.续期E5开发者账户</h2><p>MS365 E5 Renew X是由大佬<a href="https://blog.csdn.net/qq_33212020">SundayRX</a>开发的网页版的E5续订服务，其依赖网页浏览器呈现支持用户多端操作，完全将E5账户API调用托管在了服务器端因此用户无需电脑也可使用。</p><p>其实目的就是一个</p><p>简单来说就是假装你是开发者，然后调用API进行E5续订</p><p>要让我们装的真实，就使用这个来进行API的连续调用从而达到自动续期的目的</p><p>具体可以看看<a href="https://www.gladtbam.top/posts/36944/%E8%BF%99%E9%87%8C%E7%9A%84%E5%B8%AE%E5%8A%A9%E6%96%87%E6%A1%A3%EF%BC%8C%E5%86%99%E7%9A%84%E5%BE%88%E8%AF%A6%E7%BB%86%E3%80%82">https://www.gladtbam.top/posts/36944/这里的帮助文档，写的很详细。</a></p><p>具体设置可以直接查看<a href="https://blog.csdn.net/qq_33212020">SundayRX</a>大佬的文章</p><p>由于我太懒，直接使用桌面端直接自动配置号API权限，然后再使用Docker来搭建网页端。</p><p>具体操作</p><h3 id="1-注册Azure应用程序"><a href="#1-注册Azure应用程序" class="headerlink" title="1.注册Azure应用程序"></a>1.注册Azure应用程序</h3><p>1、登录<a href="https://portal.azure.com/#blade/Microsoft_AAD_RegisteredApps/ApplicationsListBlade">Azure应用注册</a></p><p><img src="https://tianyedetutu.top/images/2022/11/29/image-20221129015045104.png" alt="image-20221129015045104"></p><p>如果没有找到可以再上面搜索 应用注册</p><p>2.选择新注册</p><p><img src="https://tianyedetutu.top/images/2022/11/29/image-20221129015151742.png" alt="image-20221129015151742"></p><p>3.名称随便填，选择第三个任何组织</p><p><img src="https://tianyedetutu.top/images/2022/11/29/image-20221129015241442.png" alt="image-20221129015241442"></p><p>4.选择概述里面的添加重定向URI</p><p><img src="https://tianyedetutu.top/images/2022/11/29/image-20221129015411068.png" alt="image-20221129015411068"></p><p>5.选择添加平台—移动和桌面程序—</p><p>勾选第一个URL“<a href="https://login.microsoftonline.com/common/oauth2/nativeclient%E2%80%9D%E5%90%8E%E7%82%B9%E5%87%BB%E9%85%8D%E7%BD%AE%E3%80%82">https://login.microsoftonline.com/common/oauth2/nativeclient”后点击配置。</a></p><p>两个是勾上</p><p><img src="https://tianyedetutu.top/images/2022/11/29/image-20221129015556592.png" alt="image-20221129015556592"></p><p>6.配置桌面 + 设备重定向 URI选择第一个</p><p><img src="https://tianyedetutu.top/images/2022/11/29/2022-11-29-015633.jpg" alt="屏幕截图 2022-11-29 015633"></p><h3 id="2-配置API权限"><a href="#2-配置API权限" class="headerlink" title="2.配置API权限"></a>2.配置API权限</h3><p>下载Windows程序链接<a href="https://sundayrx.lanzouq.com/2R2AByh83333%EF%BC%8C%E4%B8%8B%E8%BD%BD%E5%AE%8C%E8%A7%A3%E5%8E%8B%E5%90%8E%E6%89%93%E5%BC%80%E8%BD%AF%E4%BB%B6%E3%80%82%E7%82%B9%E5%87%BB%E5%BC%80%E5%A7%8B%E8%BF%90%E8%A1%8C%E3%80%82">https://sundayrx.lanzouq.com/2R2AByh83333，下载完解压后打开软件。点击开始运行。</a></p><p>1、点击“添加账号”，填上E5账号，之前保存的应用程序（客户端）ID,以及E5账号密码，选择”登录调用”，点击“启动自动授权”。</p><p>2、在弹出的登陆页面中输入你的管理员账户名和密码登录，登录成功时弹出“请求征得许可界面”，滚动到页面最底部勾选“代表组织同意”，最后点击“接受”。</p><p>3、API配置成功后，你可以选择使用Windows版的一直运行着，其实用Windows端的目的就是使用它自动配置好授权的简单功能方便后续的docker端方便。如果你和我一样想要直接在服务器上跑。看下面的教程。</p><h2 id="5-Docker-部署Microsoft-365-E5-Renew-X"><a href="#5-Docker-部署Microsoft-365-E5-Renew-X" class="headerlink" title="5.Docker 部署Microsoft 365 E5 Renew X"></a>5.Docker 部署Microsoft 365 E5 Renew X</h2><p>环境</p><ul><li>Ubuntu22.04</li><li>docker</li></ul><h3 id="5-1安装docker"><a href="#5-1安装docker" class="headerlink" title="5.1安装docker"></a>5.1安装docker</h3><p>安装其实很简单，只需要运行第一条命令，后面你可以选择安装。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#1.安装Docker</span><span class="token function">wget</span> -qO- get.docker.com <span class="token operator">|</span> <span class="token function">bash</span><span class="token comment">#2.开机自动启动</span>systemctl <span class="token builtin class-name">enable</span> <span class="token function">docker</span><span class="token comment">#3.安装Docker-compose</span><span class="token function">sudo</span> <span class="token function">curl</span> <span class="token parameter variable">-L</span> <span class="token string">"https://github.com/docker/compose/releases/download/1.29.2/docker-compose-<span class="token variable"><span class="token variable">$(</span><span class="token function">uname</span> <span class="token parameter variable">-s</span><span class="token variable">)</span></span>-<span class="token variable"><span class="token variable">$(</span><span class="token function">uname</span> <span class="token parameter variable">-m</span><span class="token variable">)</span></span>"</span> <span class="token parameter variable">-o</span> /usr/local/bin/docker-compose<span class="token comment">#4.赋予执行权限</span><span class="token function">sudo</span> <span class="token function">chmod</span> +x /usr/local/bin/docker-compose<span class="token comment">#5.安装Portainer（可以不安装）</span><span class="token function">sudo</span> <span class="token function">docker</span> volume create portainer_data<span class="token comment">#6.下载并安装 Portainer Server 容器 (可选)</span><span class="token function">sudo</span> <span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">-p</span> <span class="token number">8000</span>:8000 <span class="token parameter variable">-p</span> <span class="token number">9443</span>:9443 <span class="token parameter variable">--name</span> portainer <span class="token punctuation">\</span>  <span class="token parameter variable">--restart</span><span class="token operator">=</span>always <span class="token punctuation">\</span>  <span class="token parameter variable">-v</span> /var/run/docker.sock:/var/run/docker.sock <span class="token punctuation">\</span>  <span class="token parameter variable">-v</span> portainer_data:/data <span class="token punctuation">\</span>  portainer/portainer-ce:latest<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-2正式搭建"><a href="#5-2正式搭建" class="headerlink" title="5.2正式搭建"></a>5.2正式搭建</h3><p>看了一下说明文档，貌似有两种一种是直接使用默认配置，但是我没找到怎么改密码。</p><p>所以我建议使用第二种方法，不过还是两种我都介绍一下。</p><h4 id="方法一-使用默认配置部署"><a href="#方法一-使用默认配置部署" class="headerlink" title="方法一: 使用默认配置部署"></a>方法一: 使用默认配置部署</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token punctuation">\</span>    <span class="token parameter variable">-p</span> <span class="token number">1066</span>:1066 <span class="token punctuation">\</span>    <span class="token parameter variable">--name</span> RenewX <span class="token punctuation">\</span>gladtbam/ms365_e5_renewx:latest<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>IP+1066访问默认配置密码为12345678</p><h4 id="方法二-自定义配置"><a href="#方法二-自定义配置" class="headerlink" title="方法二: 自定义配置"></a>方法二: 自定义配置</h4><p>1.下载<a href="https://sundayrx.lanzoui.com/aW09Lsss75g">E5 Renew X</a>的配置文件Config.xml，按照Config.xml文件说明进行修改。解压缩，找到Deploy里面就有。</p><p>2.输入</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> /root/Deploy   <span class="token comment">#创建一个Deploy文件夹</span><span class="token builtin class-name">cd</span> /root/Deploy<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>3.上传配置好的Config.xml到/root/Deploy  记得在里面改好密码</p><p>4.输入</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token punctuation">\</span>    <span class="token parameter variable">-p</span> <span class="token number">1066</span>:1066 <span class="token punctuation">\</span>    <span class="token parameter variable">-v</span> <span class="token environment constant">$PWD</span>/Deploy:/renewx/Deploy <span class="token punctuation">\</span>    <span class="token parameter variable">-v</span> <span class="token environment constant">$PWD</span>/appdata:/renewx/appdata <span class="token punctuation">\</span>    <span class="token parameter variable">--name</span> RenewX <span class="token punctuation">\</span>gladtbam/ms365_e5_renewx:latest<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>5.最后浏览器输入服务器IP+端口号进入</p><p><img src="https://tianyedetutu.top/images/2022/11/29/image-20221129021958344.png" alt="image-20221129021958344"></p><p>6.添加账号</p><h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>1、一定不要打开双重验证，不然会错误的。</p><p>什么？不会关？</p><p>好吧，进入<a href="https://aad.portal.azure.com/#blade/Microsoft_AAD_IAM/ActiveDirectoryMenuBlade/Overview">https://aad.portal.azure.com/#blade/Microsoft_AAD_IAM/ActiveDirectoryMenuBlade/Overview</a></p><p>仪表盘</p><p><img src="https://tianyedetutu.top/images/2022/11/29/image-20221129022357467.png" alt="image-20221129022357467"></p><p><img src="https://tianyedetutu.top/images/2022/11/29/image-20221129022425898.png" alt="image-20221129022425898"></p><p>最后点击否就可以关闭了。</p><p>2.其实这个方法只能增加续订几率，能不能成就看微软，不过一般没问题。续订很玄学</p><p>最后真的感慨网友们的这些操作，真的牛</p><p>感谢开发软件的作者，还有出各种教程的大佬们</p><p>然后再附上帮助文档</p><p><a href="https://www.gladtbam.top/posts/36944/">https://www.gladtbam.top/posts/36944/</a></p><p>好了开启白嫖生活吧 www╰(<em>°▽°</em>)╯</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.dzdxtd.com/archives/122">2022 申请 Office 365 E5 订阅并永久续期+ 5T 不限速网盘教程</a></p><p><a href="https://www.gladtbam.top/posts/22256/">Microsoft 365 E5 Renew X Docker 部署</a></p><p><a href="https://moeci.com/posts/%E5%88%86%E7%B1%BB-docker/docker-ms-e5/">Microsoft 365 E5 自动续订 | Docker 自建</a></p><p><a href="https://blog.csdn.net/qq_33212020/article/details/119747634">E5 调用API续订服务：Microsoft 365 E5 Renew X</a></p><p><a href="https://www.kejiwanjia.com/jiaocheng/82073.html">Docker部署Microsoft 365 E5 Renew X以续订Office365E5订阅</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;免费微软Office-365-E5-订阅-5T-OneDrive并永久续期&quot;&gt;&lt;a href=&quot;#免费微软Office-365-E5-订阅-5T-OneDrive并永久续期&quot; class=&quot;headerlink&quot; title=&quot;免费微软Office 365 E5 </summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://example.com/2022/11/28/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E7%A7%81%E4%BA%BA%E8%81%8A%E5%A4%A9%E9%A1%B9%E7%9B%AERocket.chat/"/>
    <id>http://example.com/2022/11/28/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E7%A7%81%E4%BA%BA%E8%81%8A%E5%A4%A9%E9%A1%B9%E7%9B%AERocket.chat/</id>
    <published>2022-11-27T18:15:24.153Z</published>
    <updated>2022-11-27T18:15:24.246Z</updated>
    
    <content type="html"><![CDATA[<h1 id="快速搭建一个私人聊天项目Rocket-chat"><a href="#快速搭建一个私人聊天项目Rocket-chat" class="headerlink" title="快速搭建一个私人聊天项目Rocket.chat"></a>快速搭建一个私人聊天项目Rocket.chat</h1><h2 id="1-下载docker-compose-yml"><a href="#1-下载docker-compose-yml" class="headerlink" title="1.下载docker-compose.yml"></a>1.下载docker-compose.yml</h2><pre class="line-numbers language-none"><code class="language-none">curl -L https://raw.githubusercontent.com/RocketChat/Docker.Official.Image/master/compose.yml -O <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="2-部署"><a href="#2-部署" class="headerlink" title="2.部署"></a>2.部署</h2><pre class="line-numbers language-none"><code class="language-none">docker compose up -d<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;快速搭建一个私人聊天项目Rocket-chat&quot;&gt;&lt;a href=&quot;#快速搭建一个私人聊天项目Rocket-chat&quot; class=&quot;headerlink&quot; title=&quot;快速搭建一个私人聊天项目Rocket.chat&quot;&gt;&lt;/a&gt;快速搭建一个私人聊天项目Rocke</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://example.com/2022/11/27/%E4%B8%BALinux%E7%9A%84cp%E5%92%8Cmv%E5%91%BD%E4%BB%A4%E6%B7%BB%E5%8A%A0%E8%BF%9B%E5%BA%A6%E6%9D%A1/"/>
    <id>http://example.com/2022/11/27/%E4%B8%BALinux%E7%9A%84cp%E5%92%8Cmv%E5%91%BD%E4%BB%A4%E6%B7%BB%E5%8A%A0%E8%BF%9B%E5%BA%A6%E6%9D%A1/</id>
    <published>2022-11-26T20:42:43.331Z</published>
    <updated>2022-11-26T20:42:44.051Z</updated>
    
    <content type="html"><![CDATA[<h1 id="为Linux的cp和mv命令添加进度条"><a href="#为Linux的cp和mv命令添加进度条" class="headerlink" title="为Linux的cp和mv命令添加进度条"></a>为Linux的cp和mv命令添加进度条</h1><p>我想拷贝一个大的文件，cp和mv可能是大家日常中使用最多的Linux命令之一。但是有一个突出的问题是这两个命令都不会有任何提示信息。看不到进度就很难受，介绍一个Gnu Coreutils(cp和mv的源代码包)的补丁Advanced Copy，用于给其增加进度条的功能。</p><p>Advanced Copy 是<code>GNU cp</code> 和 <code>GNU mv</code> 程序的 mod  。它添加了一个进度条，并提供有关复制或移动文件和文件夹时发生的情况的一些信息。不仅是进度条，它还显示数据传输速率、估计剩余时间和当前正在复制的文件名。</p><h2 id="下载和编译"><a href="#下载和编译" class="headerlink" title="下载和编译"></a>下载和编译</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">wget</span> http://ftp.gnu.org/gnu/coreutils/coreutils-9.0.tar.xz<span class="token function">tar</span> xvJf coreutils-9.0.tar.xz<span class="token builtin class-name">cd</span> coreutils-9.0/<span class="token function">wget</span> https://raw.githubusercontent.com/jarun/advcpmv/master/advcpmv-0.9-9.0.patch<span class="token comment">#安装gcc和g++</span><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> g++<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> gccpatch <span class="token parameter variable">-p1</span> <span class="token parameter variable">-i</span> advcpmv-0.9-9.0.patch<span class="token builtin class-name">export</span> <span class="token assign-left variable">FORCE_UNSAFE_CONFIGURE</span><span class="token operator">=</span><span class="token number">1</span>./configure<span class="token function">make</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>现在两个新的补丁的二进制文件即<code>cp</code>与<code>mv</code>将在中创建<code>coreutils-9.0/src</code>的文件夹。只需将它们复制到你的 $PATH 中，如下所示：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cp</span> ./src/cp /usr/local/bin/cpg<span class="token function">cp</span> ./src/mv /usr/local/bin/mvg<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p><code>cpg</code>和<code>mvg</code>命令有现在进度条的功能。</p><p>每当你在复制或移动文件和目录时需要进度条时，只需添加<code>-g</code>如下标志：</p><pre class="line-numbers language-none"><code class="language-none">$ cpg -g nifi-1.14.0-bin.tar.gz test/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>或使用<code>--progress-bar</code>标志：</p><pre class="line-numbers language-none"><code class="language-none">$ cpg --progress-bar nifi-1.14.0-bin.tar.gz test/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>或使用<code>--progress-bar</code>标志：</p><pre class="line-numbers language-none"><code class="language-none">$ cpg --progress-bar nifi-1.14.0-bin.tar.gz test/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>示例输出:</p><pre class="line-numbers language-none"><code class="language-none">[root@rumenz.com ~]# cpg -g nifi-1.14.0-bin.tar.gz test/Copying at 119.3 MiB/s (about 0h 0m 7s remaining)nifi-1.14.0-bin.tar.gz                                                               959.5 MiB /   1.3 GiB[============================================&gt;                            ] 71.0 %<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>在复制过程结束时，你将看到复制了多少文件、复制文件所用的时间以及每秒的数据传输速率。</p><pre class="line-numbers language-none"><code class="language-none">1 files (  1.3 GiB) copied in 25.5 seconds ( 53.0 MiB/s).<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>要递归复制目录及其子目录，只需添加<code>-R</code>标志：</p><pre class="line-numbers language-none"><code class="language-none">$ cpg -gR directory1/ directory2/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>同样，要使用<code>mv</code>命令移动文件，请运行：</p><pre class="line-numbers language-none"><code class="language-none">$ mvg -g nifi-1.14.0-bin.tar.gz test/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>或者，使用<code>--progress-bar</code>标志：</p><pre class="line-numbers language-none"><code class="language-none">$ mvg --progress-bar nifi-1.14.0-bin.tar.gz test/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>要使用<code>mv</code>命令移动目录，请使用：</p><pre class="line-numbers language-none"><code class="language-none">$ mvg -g directory1/ directory2/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>你还可以创建别名。编辑<code>~/.bashrc</code>文件：</p><pre class="line-numbers language-none"><code class="language-none">$ nano ~/.bashrc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在后添加以下几行：</p><pre class="line-numbers language-none"><code class="language-none">alias cp='/usr/local/bin/cpg -gR'alias mv='/usr/local/bin/mvg -g'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>按<code>Ctrl+o</code>和<code>Ctl+x</code>保存并关闭文件。</p><p>现在运行以下命令使更改生效：</p><pre class="line-numbers language-none"><code class="language-none">$ source ~/.bashrc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>从现在开始，你可以只使用没有（或）标志的<code>cp</code>或<code>mv</code>命令。<code>-g</code> <code>--progress-bar</code></p><p>请注意，原始程序不会被覆盖。你仍然可以随时通过<code>/usr/bin/cp</code> 或 呼叫他们 <code>/usr/bin/mv</code>。</p><p>如果你经常复制或移动大量大文件和目录，推荐向<code>cp</code>和<code>mv</code>命令添加进度条功能。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://zhuanlan.zhihu.com/p/273571991">https://zhuanlan.zhihu.com/p/273571991</a></p><p><a href="https://z.itpub.net/article/detail/CF3376ECFEA0A659D48576FEEB954192">https://z.itpub.net/article/detail/CF3376ECFEA0A659D48576FEEB954192</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;为Linux的cp和mv命令添加进度条&quot;&gt;&lt;a href=&quot;#为Linux的cp和mv命令添加进度条&quot; class=&quot;headerlink&quot; title=&quot;为Linux的cp和mv命令添加进度条&quot;&gt;&lt;/a&gt;为Linux的cp和mv命令添加进度条&lt;/h1&gt;&lt;p&gt;我想</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://example.com/2022/11/27/%E9%80%9A%E8%BF%87Docker%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E9%9D%9E%E5%B8%B8%E5%A5%BD%E7%94%A8%E7%9A%84%E7%BD%91%E7%9B%98Cloudreve/"/>
    <id>http://example.com/2022/11/27/%E9%80%9A%E8%BF%87Docker%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E9%9D%9E%E5%B8%B8%E5%A5%BD%E7%94%A8%E7%9A%84%E7%BD%91%E7%9B%98Cloudreve/</id>
    <published>2022-11-26T19:09:11.210Z</published>
    <updated>2022-11-26T19:29:52.072Z</updated>
    
    <content type="html"><![CDATA[<h1 id="通过Docker搭建一个非常好用的网盘Cloudreve"><a href="#通过Docker搭建一个非常好用的网盘Cloudreve" class="headerlink" title="通过Docker搭建一个非常好用的网盘Cloudreve"></a>通过Docker搭建一个非常好用的网盘Cloudreve</h1><h2 id="1-Cloudreve-是什么？（官方介绍）"><a href="#1-Cloudreve-是什么？（官方介绍）" class="headerlink" title="1.Cloudreve 是什么？（官方介绍）"></a>1.Cloudreve 是什么？<a href="https://docs.cloudreve.org/">（官方介绍）</a></h2><p>Cloudreve 可以让您快速搭建起公私兼备的网盘系统。Cloudreve 在底层支持不同的云存储平台，用户在实际使用时无须关心物理存储方式。你可以使用 Cloudreve 搭建个人用网盘、文件分享系统，亦或是针对大小团体的公有云系统。</p><h2 id="✨-特性"><a href="#✨-特性" class="headerlink" title="✨ 特性"></a>✨ 特性</h2><ul><li>☁️ 支持本机、从机、七牛、阿里云 OSS、腾讯云 COS、又拍云、OneDrive (包括世纪互联版) 作为存储端</li><li>📤 上传/下载 支持客户端直传，支持下载限速</li><li>💾 可对接 Aria2 离线下载，可使用多个从机节点分担下载任务</li><li>📚 在线 压缩/解压缩、多文件打包下载</li><li>💻 覆盖全部存储策略的 WebDAV 协议支持</li><li>⚡ 拖拽上传、目录上传、流式上传处理</li><li>🗃️ 文件拖拽管理</li><li>👩‍👧‍👦 多用户、用户组</li><li>🔗 创建文件、目录的分享链接，可设定自动过期</li><li>👁️‍🗨️ 视频、图像、音频、文本、Office 文档在线预览</li><li>🎨 自定义配色、黑暗模式、PWA 应用、全站单页应用</li><li>🚀 All-In-One 打包，开箱即用</li><li>🌈 … …</li></ul><p><strong>Github地址:</strong> <a href="https://github.com/cloudreve/Cloudreve">https://github.com/cloudreve/Cloudreve</a></p><h2 id="2-前提条件"><a href="#2-前提条件" class="headerlink" title="2.前提条件"></a>2.前提条件</h2><ol><li><p>一台Linux服务器  我痛的</p></li><li><p>安装好docker和docker-compose</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#1.安装Docker</span><span class="token function">wget</span> -qO- get.docker.com <span class="token operator">|</span> <span class="token function">bash</span><span class="token comment">#2.开机自动启动</span>systemctl <span class="token builtin class-name">enable</span> <span class="token function">docker</span><span class="token comment">#3.安装Docker-compose</span><span class="token function">sudo</span> <span class="token function">curl</span> <span class="token parameter variable">-L</span> <span class="token string">"https://github.com/docker/compose/releases/download/1.29.2/docker-compose-<span class="token variable"><span class="token variable">$(</span><span class="token function">uname</span> <span class="token parameter variable">-s</span><span class="token variable">)</span></span>-<span class="token variable"><span class="token variable">$(</span><span class="token function">uname</span> <span class="token parameter variable">-m</span><span class="token variable">)</span></span>"</span> <span class="token parameter variable">-o</span> /usr/local/bin/docker-compose<span class="token comment">#4.赋予执行权限</span><span class="token function">sudo</span> <span class="token function">chmod</span> +x /usr/local/bin/docker-compose<span class="token comment">#5.安装Portainer（可以不安装）</span><span class="token function">sudo</span> <span class="token function">docker</span> volume create portainer_data<span class="token comment">#6.下载并安装 Portainer Server 容器 (可选)</span><span class="token function">sudo</span> <span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">-p</span> <span class="token number">8000</span>:8000 <span class="token parameter variable">-p</span> <span class="token number">9443</span>:9443 <span class="token parameter variable">--name</span> portainer <span class="token punctuation">\</span>   <span class="token parameter variable">--restart</span><span class="token operator">=</span>always <span class="token punctuation">\</span>   <span class="token parameter variable">-v</span> /var/run/docker.sock:/var/run/docker.sock <span class="token punctuation">\</span>   <span class="token parameter variable">-v</span> portainer_data:/data <span class="token punctuation">\</span>   portainer/portainer-ce:latest <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="3-正式搭建"><a href="#3-正式搭建" class="headerlink" title="3.正式搭建"></a>3.正式搭建</h2><h3 id="3-1-创建安装目录"><a href="#3-1-创建安装目录" class="headerlink" title="3.1.创建安装目录"></a>3.1.创建安装目录</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /root/cloudreve<span class="token builtin class-name">cd</span> /root/cloudreve<span class="token function">mkdir</span> <span class="token punctuation">{</span>cloudreve,data<span class="token punctuation">}</span><span class="token builtin class-name">cd</span> cloudreve<span class="token function">mkdir</span> <span class="token punctuation">{</span>avatar,uploads<span class="token punctuation">}</span><span class="token function">touch</span> <span class="token punctuation">{</span>conf.ini,cloudreve.db<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-2-编辑docker-compose-yml文件"><a href="#3-2-编辑docker-compose-yml文件" class="headerlink" title="3.2.编辑docker-compose.yml文件"></a>3.2.编辑docker-compose.yml文件</h3><p>如果你有安装Portainer其实可以直接在上面创建一个堆栈来直接输入下面的内容，当然你也可以直接编辑。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /root/cloudreve<span class="token function">vim</span> docker-compose.yml<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>填入内容</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">"3.8"</span><span class="token key atrule">services</span><span class="token punctuation">:</span>  <span class="token key atrule">cloudreve</span><span class="token punctuation">:</span>    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> cloudreve    <span class="token key atrule">image</span><span class="token punctuation">:</span> cloudreve/cloudreve<span class="token punctuation">:</span>latest    <span class="token key atrule">restart</span><span class="token punctuation">:</span> unless<span class="token punctuation">-</span>stopped    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">"5212:5212"</span>            <span class="token comment"># 左边可以更换自己喜欢的端口</span>    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> temp_data<span class="token punctuation">:</span>/data      <span class="token punctuation">-</span> ./cloudreve/uploads<span class="token punctuation">:</span>/cloudreve/uploads        <span class="token comment"># 冒号左边为自己需要映射出来的本地路径</span>      <span class="token punctuation">-</span> ./cloudreve/conf.ini<span class="token punctuation">:</span>/cloudreve/conf.ini           <span class="token punctuation">-</span> ./cloudreve/cloudreve.db<span class="token punctuation">:</span>/cloudreve/cloudreve.db        <span class="token punctuation">-</span> ./cloudreve/avatar<span class="token punctuation">:</span>/cloudreve/avatar    <span class="token key atrule">depends_on</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> aria2  <span class="token key atrule">aria2</span><span class="token punctuation">:</span>    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> aria2    <span class="token key atrule">image</span><span class="token punctuation">:</span> ddsderek/aria2<span class="token punctuation">-</span>pro    <span class="token key atrule">restart</span><span class="token punctuation">:</span> unless<span class="token punctuation">-</span>stopped    <span class="token key atrule">environment</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> RPC_SECRET=qwe123456789  <span class="token comment"># 修改一个自己的密钥</span>      <span class="token punctuation">-</span> RPC_PORT=6800      <span class="token punctuation">-</span> DOWNLOAD_DIR=/data      <span class="token punctuation">-</span> PUID=0      <span class="token punctuation">-</span> PGID=0      <span class="token punctuation">-</span> UMASK_SET=022      <span class="token punctuation">-</span> TZ=Asia/Tokyo    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> ./aria2/config<span class="token punctuation">:</span>/config    <span class="token comment"># 冒号左边为自己需要映射出来的本地路径</span>      <span class="token punctuation">-</span> temp_data<span class="token punctuation">:</span>/data<span class="token key atrule">volumes</span><span class="token punctuation">:</span>  <span class="token key atrule">temp_data</span><span class="token punctuation">:</span>    <span class="token key atrule">driver</span><span class="token punctuation">:</span> local    <span class="token key atrule">driver_opts</span><span class="token punctuation">:</span>      <span class="token key atrule">type</span><span class="token punctuation">:</span> none      <span class="token key atrule">device</span><span class="token punctuation">:</span> $PWD/data      <span class="token key atrule">o</span><span class="token punctuation">:</span> bind<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>保存退出！</p><h3 id="3-3-部署"><a href="#3-3-部署" class="headerlink" title="3.3.部署"></a>3.3.部署</h3><p>输入</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker-compose</span> up <span class="token parameter variable">-d</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>部署完成后输入</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker-compose</span> logs<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后你可以看到账号和密码</p><h3 id="3-4-配置"><a href="#3-4-配置" class="headerlink" title="3.4.配置"></a>3.4.配置</h3><p>如果你开了防火墙，需要开放防火墙</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> ufw allow <span class="token number">5212</span> comment <span class="token string">'cloudreve'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="4-后期设置"><a href="#4-后期设置" class="headerlink" title="4.后期设置"></a>4.后期设置</h2><p>搭建完之后可以通过IP+端口号进行访问</p><h3 id="4-1-配置aria2"><a href="#4-1-配置aria2" class="headerlink" title="4.1. 配置aria2"></a>4.1. 配置aria2</h3><p><img src="https://tianyedetutu.top/images/2022/11/27/image-20221127041730333.png" alt="image-20221127041730333"></p><p><strong>③的地址就是aria2容器内部的IP地址</strong></p><p>可以通过protainer来查看，也可以直接输入</p><pre class="line-numbers language-none"><code class="language-none">http://aria2:6800/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>测试一下，配置完成。</p><h3 id="4-2-后期更新"><a href="#4-2-后期更新" class="headerlink" title="4.2. 后期更新"></a>4.2. 后期更新</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /root/cloudreve<span class="token function">docker-compose</span> down <span class="token function">docker-compose</span> pull<span class="token function">docker-compose</span> up <span class="token parameter variable">-d</span> <span class="token function">docker</span> image prune  <span class="token comment"># prune 命令用来删除不再使用的 docker 对象。删除所有未被 tag 标记和未被容器使用的镜像</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://docs.cloudreve.org/">https://docs.cloudreve.org/</a></p><p><a href="https://github.com/cloudreve/Cloudreve">https://github.com/cloudreve/Cloudreve</a></p><p><a href="https://blog.laoda.de/archives/docker-compose-install-lighthouse-cloudreve">https://blog.laoda.de/archives/docker-compose-install-lighthouse-cloudreve</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;通过Docker搭建一个非常好用的网盘Cloudreve&quot;&gt;&lt;a href=&quot;#通过Docker搭建一个非常好用的网盘Cloudreve&quot; class=&quot;headerlink&quot; title=&quot;通过Docker搭建一个非常好用的网盘Cloudreve&quot;&gt;&lt;/a&gt;通过</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://example.com/2022/11/19/%E5%9C%A8Linux%E4%B8%8A%E9%80%9A%E8%BF%87%E5%91%BD%E4%BB%A4%E8%A1%8Cscp%E8%BF%9C%E7%A8%8B%E6%8B%B7%E8%B4%9D%E6%96%87%E4%BB%B6%E5%8F%8A%E6%96%87%E4%BB%B6%E5%A4%B9/"/>
    <id>http://example.com/2022/11/19/%E5%9C%A8Linux%E4%B8%8A%E9%80%9A%E8%BF%87%E5%91%BD%E4%BB%A4%E8%A1%8Cscp%E8%BF%9C%E7%A8%8B%E6%8B%B7%E8%B4%9D%E6%96%87%E4%BB%B6%E5%8F%8A%E6%96%87%E4%BB%B6%E5%A4%B9/</id>
    <published>2022-11-19T10:13:31.880Z</published>
    <updated>2022-11-19T10:13:31.963Z</updated>
    
    <content type="html"><![CDATA[<h1 id="在Linux上通过命令行scp远程拷贝文件及文件夹"><a href="#在Linux上通过命令行scp远程拷贝文件及文件夹" class="headerlink" title="在Linux上通过命令行scp远程拷贝文件及文件夹"></a>在Linux上通过命令行scp远程拷贝文件及文件夹</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>Linux scp 命令用于 Linux 之间复制文件和目录。</p><p>scp 是 secure copy 的缩写, scp 是 linux 系统下基于 ssh 登陆进行安全的远程文件拷贝命令。</p><p>scp 是加密的，<a href="https://www.runoob.com/linux/linux-comm-rcp.html">rcp</a> 是不加密的，scp 是 rcp 的加强版。</p><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><p><strong>参数说明：</strong></p><ul><li>-1： 强制scp命令使用协议ssh1</li><li>-2： 强制scp命令使用协议ssh2</li><li>-4： 强制scp命令只使用IPv4寻址</li><li>-6： 强制scp命令只使用IPv6寻址</li><li>-B： 使用批处理模式（传输过程中不询问传输口令或短语）</li><li>-C： 允许压缩。（将-C标志传递给ssh，从而打开压缩功能）</li><li>-p：保留原文件的修改时间，访问时间和访问权限。</li><li>-q： 不显示传输进度条。</li><li>-r： 递归复制整个目录。</li><li>-v：详细方式显示输出。scp和ssh(1)会显示出整个过程的调试信息。这些信息用于调试连接，验证和配置问题。</li><li>-c cipher： 以cipher将数据传输进行加密，这个选项将直接传递给ssh。</li><li>-F ssh_config： 指定一个替代的ssh配置文件，此参数直接传递给ssh。</li><li>-i identity_file： 从指定文件中读取传输时使用的密钥文件，此参数直接传递给ssh。</li><li>-l limit： 限定用户所能使用的带宽，以Kbit/s为单位。</li><li>-o ssh_option： 如果习惯于使用ssh_config(5)中的参数传递方式，</li><li>-P port：注意是大写的P, port是指定数据传输用到的端口号</li><li>-S program： 指定加密传输时所使用的程序。此程序必须能够理解ssh(1)的选项。</li></ul><h2 id="具体实际的使用方法"><a href="#具体实际的使用方法" class="headerlink" title="具体实际的使用方法"></a>具体实际的使用方法</h2><h3 id="1、拷贝本机-x2F-home-x2F-test整个目录至远程主机192-168-1-11的-x2F-root目录下"><a href="#1、拷贝本机-x2F-home-x2F-test整个目录至远程主机192-168-1-11的-x2F-root目录下" class="headerlink" title="1、拷贝本机/home/test整个目录至远程主机192.168.1.11的/root目录下"></a>1、拷贝本机/home/test整个目录至远程主机192.168.1.11的/root目录下</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">scp</span> <span class="token parameter variable">-r</span> /home/tes/ root@192.168.1.11:/root/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2、拷贝单个文件至远程主机"><a href="#2、拷贝单个文件至远程主机" class="headerlink" title="2、拷贝单个文件至远程主机"></a>2、拷贝单个文件至远程主机</h3><pre class="line-numbers language-none"><code class="language-none">scp /home/nihao.mp4 root@192.168.1.11:/root/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3、远程文件-x2F-文件夹下载"><a href="#3、远程文件-x2F-文件夹下载" class="headerlink" title="3、远程文件/文件夹下载"></a>3、远程文件/文件夹下载</h3><p>把192.168.1.11上面的/home/data/qihun文件夹下面的所有电视剧，下载到本地的/home/wenjian/电视剧　下，使用远程端的root登陆,因为我SSH的登陆端口指定过1234所以加了一个 -P 1234命令，-r是递归，就是把文件夹下面所有文件拷贝的意思。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">scp</span> <span class="token parameter variable">-P</span> <span class="token number">1234</span> <span class="token parameter variable">-r</span> root@192.168.1.11:/home/data/qihun /home/wenjian/电视剧<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;在Linux上通过命令行scp远程拷贝文件及文件夹&quot;&gt;&lt;a href=&quot;#在Linux上通过命令行scp远程拷贝文件及文件夹&quot; class=&quot;headerlink&quot; title=&quot;在Linux上通过命令行scp远程拷贝文件及文件夹&quot;&gt;&lt;/a&gt;在Linux上通过命令</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://example.com/2022/11/12/Windows%2011%20%E7%BB%95%E8%BF%87%20TPM%20%E7%AD%89%E9%99%90%E5%88%B6%EF%BC%8C%E4%BB%A5%E5%8F%8A%E5%9C%A8Mac%20M1%E4%B8%8A%E5%AE%89%E8%A3%85%E7%9A%84%E6%96%B9%E6%B3%95%E3%80%82/"/>
    <id>http://example.com/2022/11/12/Windows%2011%20%E7%BB%95%E8%BF%87%20TPM%20%E7%AD%89%E9%99%90%E5%88%B6%EF%BC%8C%E4%BB%A5%E5%8F%8A%E5%9C%A8Mac%20M1%E4%B8%8A%E5%AE%89%E8%A3%85%E7%9A%84%E6%96%B9%E6%B3%95%E3%80%82/</id>
    <published>2022-11-12T11:05:42.474Z</published>
    <updated>2022-11-12T15:14:57.062Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Windows-11-绕过-TPM-等限制，以及在Mac-M1上安装的方法。"><a href="#Windows-11-绕过-TPM-等限制，以及在Mac-M1上安装的方法。" class="headerlink" title="Windows 11 绕过 TPM 等限制，以及在Mac M1上安装的方法。"></a>Windows 11 绕过 TPM 等限制，以及在Mac M1上安装的方法。</h1><h2 id="1-Windows-11-系统要求"><a href="#1-Windows-11-系统要求" class="headerlink" title="1. Windows 11 系统要求"></a>1. Windows 11 <a href="https://www.microsoft.com/zh-cn/windows/windows-11-specifications">系统要求</a></h2><p>系统要求系统要求这些是在电脑上安装 Windows 11 的最低系统要求。如果您的设备不满足这些要求，您可能无法在设备上安装 Windows 11，建议您考虑购买 <a href="https://www.microsoft.com/zh-cn/windows/computers">一台新电脑</a>。如果您不确定您的电脑是否满足这些要求，可以咨询您的原始设备制造商 (OEM)；如果您的设备已经在运行 Windows 10，您可以使用 <a href="https://www.microsoft.com/zh-cn/windows/windows-11#pchealthcheck">电脑健康状况检查应用</a> 来评估兼容性。请注意，此应用不会检查显卡或显示器，因为大多数的兼容设备都能满足以下列出的要求 (sysin)。您的设备必须 <a href="https://support.microsoft.com/zh-cn/windows/which-version-of-windows-operating-system-am-i-running-628bec99-476a-2c13-5296-9dd081cdd808">已安装 Windows 10</a> 的 2004 或更高版本，才能升级。可在‘设置 &gt; 更新和安全’中的 Windows 更新功能中获取免费更新。</p><table><thead><tr><th align="left"><strong>处理器</strong></th><th align="left"><strong>1 GHz</strong> 或更快的 <a href="https://aka.ms/CPUlist">支持 64 位的处理器</a>（双核或多核）或系统单芯片 **(SoC)**。</th></tr></thead><tbody><tr><td align="left"><strong>内存</strong></td><td align="left">4 GB。</td></tr><tr><td align="left"><strong>存储</strong></td><td align="left">64 GB 或更大的存储设备，注：有关详细信息，请参见以下 “关于保持 Windows 11 最新所需存储空间的更多信息”。</td></tr><tr><td align="left"><strong>系统固件</strong></td><td align="left">支持 UEFI 安全启动。请在 <a href="https://support.microsoft.com/topic/a8ff1202-c0d9-42f5-940f-843abef64fad">此处</a> 查看关于如何启用电脑以满足这一要求的说明。</td></tr><tr><td align="left"><strong>TPM</strong></td><td align="left"><a href="https://docs.microsoft.com/zh-cn/windows/security/information-protection/tpm/trusted-platform-module-overview">受信任的平台模块 (TPM)</a> 2.0 版本。请在 <a href="https://support.microsoft.com/windows/1fd5a332-360d-4f46-a1e7-ae6b0c90645c">此处</a> 查看关于如何启用电脑以满足这一要求的说明。</td></tr><tr><td align="left"><strong>显卡</strong></td><td align="left">支持 DirectX 12 或更高版本，支持 WDDM 2.0 驱动程序。</td></tr><tr><td align="left"><strong>显示器</strong></td><td align="left">对角线长大于 9 英寸的高清 (720p) 显示屏，每个颜色通道为 8 位。</td></tr><tr><td align="left"><strong>电脑健康检查互联网连接和 Microsoft 帐户</strong></td><td align="left">Windows 11 家庭版要求具有互联网连接和 <a href="https://account.microsoft.com/account">Microsoft 帐户</a>。 将设备切换出 Windows 11 家庭版 S 模式也需要有互联网连接。<a href="https://support.microsoft.com/help/4020089/windows-10-in-s-mode-faq">在此处进一步了解 S 模式</a>。 所有的 Windows 11 版本都需要联网才能执行更新，以及下载和利用某些功能。有些功能需要使用 Microsoft 帐户。</td></tr></tbody></table><p>某些 <a href="https://www.microsoft.com/zh-cn/windows/windows-11-specifications#table2">功能需要特定硬件支持</a>。运行某些应用程序所需满足的系统要求可能高于 Windows 11 的最低设备规格要求。检查设备与您想要安装应用程序的兼容情况。所需的设备存储空间将根据实际的应用程序和更新而有所不同。更高端、更强大的电脑性能也较高。以后或更新时可能会有其它的要求。</p><blockquote><p>以上为 Windows 11 的官方系统要求。</p></blockquote><p>关键是这个 TPM 芯片，通常在虚拟机、MacBook，没有 TPM 或者没有 TPM 2.0 的旧 PC 无法正常安装 Windows 11（报错如下图）。</p><h2 id="2-一般网上绕过限制的方法"><a href="#2-一般网上绕过限制的方法" class="headerlink" title="2. 一般网上绕过限制的方法"></a>2. 一般网上绕过限制的方法</h2><h3 id="修改注册表"><a href="#修改注册表" class="headerlink" title="修改注册表"></a>修改注册表</h3><p>在 Windows 11 安装界面按 Shift + F10 打开命令行界面（Mac按shift+fn+F10），执行如下命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">REG ADD HKLM<span class="token punctuation">\</span>SYSTEM<span class="token punctuation">\</span>Setup<span class="token punctuation">\</span>LabConfig /v BypassTPMCheck /t REG_DWORD /d <span class="token number">1</span>REG ADD HKLM<span class="token punctuation">\</span>SYSTEM<span class="token punctuation">\</span>Setup<span class="token punctuation">\</span>LabConfig /v BypassSecureBootCheck /t REG_DWORD /d <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>或者使用图形界面的注册表编辑器添加：</p><p>输入 regedit 进入注册表编辑器，然后定位到如下位置 HKEY_LOCAL_MACHINE\SYSTEM\Setup，创建一个名为 “LabConfig” 的项，接着在 “LabConfig” 下创建两个 DWORD 值：</p><p>键名 “BypassTPMCheck”，赋值 “00000001”</p><p>键名 “BypassSecureBootCheck”，赋值 “00000001”</p><p>保存退出后，无法安装的提示就消失了。</p><h2 id="3-Mac安装windows11"><a href="#3-Mac安装windows11" class="headerlink" title="3.Mac安装windows11"></a>3.Mac安装windows11</h2><h3 id="3-1-准备工作"><a href="#3-1-准备工作" class="headerlink" title="3.1 准备工作"></a>3.1 准备工作</h3><ol><li><p>安装Parallels Desktop</p></li><li><p>准备好Windows11 ARM镜像</p><p>镜像下载<a href="https://uupdump.net/">https://uupdump.net/</a></p><p>自己构建一个Windows11专业版</p></li></ol><h3 id="3-2-安装"><a href="#3-2-安装" class="headerlink" title="3.2 安装"></a>3.2 安装</h3><ol><li>打开Parallels Desktop选择手动安装</li><li>设置–硬件–点击减号删除 TPM</li><li>启动虚拟机</li><li>进入安装页面打开命令提示符执行上面第二步</li></ol><p>完成！</p><p>参考</p><p><a href="https://sysin.org/blog/windows-11-no-tpm/">https://sysin.org/blog/windows-11-no-tpm/</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Windows-11-绕过-TPM-等限制，以及在Mac-M1上安装的方法。&quot;&gt;&lt;a href=&quot;#Windows-11-绕过-TPM-等限制，以及在Mac-M1上安装的方法。&quot; class=&quot;headerlink&quot; title=&quot;Windows 11 绕过 TP</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://example.com/2022/11/08/Mysql%E5%88%9B%E5%BB%BA%E7%94%A8%E6%88%B7%E5%92%8C%E7%BB%99%E4%BA%88%E6%9D%83%E9%99%90/"/>
    <id>http://example.com/2022/11/08/Mysql%E5%88%9B%E5%BB%BA%E7%94%A8%E6%88%B7%E5%92%8C%E7%BB%99%E4%BA%88%E6%9D%83%E9%99%90/</id>
    <published>2022-11-07T16:41:31.393Z</published>
    <updated>2022-11-12T10:57:47.663Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Mysql创建用户和给予权限"><a href="#Mysql创建用户和给予权限" class="headerlink" title="Mysql创建用户和给予权限"></a>Mysql创建用户和给予权限</h1><h2 id="1-创建用户"><a href="#1-创建用户" class="headerlink" title="1.创建用户"></a>1.创建用户</h2><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; create user 'work'@'localhost' identified by 'GenshinImpactOffline2022';<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="2-赋予权限"><a href="#2-赋予权限" class="headerlink" title="2.赋予权限"></a>2.赋予权限</h2><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; GRANT ALL PRIVILEGES ON  *.* TO ‘work’@‘localhost’ IDENTIFIED BY ''GenshinImpactOffline2022’；<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="3-刷新权限"><a href="#3-刷新权限" class="headerlink" title="3.刷新权限"></a>3.刷新权限</h2><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">flush privileges;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Mysql创建用户和给予权限&quot;&gt;&lt;a href=&quot;#Mysql创建用户和给予权限&quot; class=&quot;headerlink&quot; title=&quot;Mysql创建用户和给予权限&quot;&gt;&lt;/a&gt;Mysql创建用户和给予权限&lt;/h1&gt;&lt;h2 id=&quot;1-创建用户&quot;&gt;&lt;a href=&quot;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://example.com/2022/11/05/%E4%BD%BF%E7%94%A8Docker-compose%E9%83%A8%E7%BD%B2Flarum%E8%AE%BA%E5%9D%9B/"/>
    <id>http://example.com/2022/11/05/%E4%BD%BF%E7%94%A8Docker-compose%E9%83%A8%E7%BD%B2Flarum%E8%AE%BA%E5%9D%9B/</id>
    <published>2022-11-05T08:10:02.969Z</published>
    <updated>2022-11-05T08:13:46.187Z</updated>
    
    <content type="html"><![CDATA[<h1 id="使用Docker-compose部署Flarum论坛"><a href="#使用Docker-compose部署Flarum论坛" class="headerlink" title="使用Docker-compose部署Flarum论坛"></a>使用Docker-compose部署Flarum论坛</h1><p>前阵子在Youtube上，看到一个老外部署的一个Flarum论坛，功能上和美观上都不错，打算自己搭建一个试一下。</p><p>部署是很简单的，但是中途出现很多问题，比如进去只显示标题界面，或者没法配置SSL，或者就是重启docker容器就不能进论坛了。</p><h3 id="Flarum具有以下特性："><a href="#Flarum具有以下特性：" class="headerlink" title="Flarum具有以下特性："></a><strong>Flarum具有以下特性：</strong></h3><p><strong>多平台：linux/386、linux/amd64、linux/arm/v6、linux/arm/v7、linux/arm64（树莓派也可以搭建！）</strong><br><strong>轻量级和安全的镜像</strong><br><strong>基于Alpine Linux 3.15</strong><br><strong>nginx和PHP 8.0</strong><br><strong>采用最新的Flarum Core（v1.2.0）</strong><br><strong>MySQL/Mariadb驱动</strong><br><strong>配置了OPCache扩展</strong></p><p>Github:<a href="https://github.com/mondediefr/docker-flarum">https://github.com/mondediefr/docker-flarum</a></p><p>记录一下如何搭建</p><h2 id="1-准备工作"><a href="#1-准备工作" class="headerlink" title="1.准备工作"></a>1.准备工作</h2><ol><li><p>安装Docker</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">wget</span> -qO- get.docker.com <span class="token operator">|</span> <span class="token function">bash</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>安装Docker-compose</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">curl</span> <span class="token parameter variable">-L</span> <span class="token string">"https://github.com/docker/compose/releases/download/1.29.2/docker-compose-<span class="token variable"><span class="token variable">$(</span><span class="token function">uname</span> <span class="token parameter variable">-s</span><span class="token variable">)</span></span>-<span class="token variable"><span class="token variable">$(</span><span class="token function">uname</span> <span class="token parameter variable">-m</span><span class="token variable">)</span></span>"</span> <span class="token parameter variable">-o</span> /usr/local/bin/docker-compose<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>赋予执行权限</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">chmod</span> +x /usr/local/bin/docker-compose<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>安装Portainer（可以不安装）</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">docker</span> volume create portainer_data<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>下载并安装 Portainer Server 容器</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">-p</span> <span class="token number">8000</span>:8000 <span class="token parameter variable">-p</span> <span class="token number">9443</span>:9443 <span class="token parameter variable">--name</span> portainer <span class="token punctuation">\</span>    <span class="token parameter variable">--restart</span><span class="token operator">=</span>always <span class="token punctuation">\</span>    <span class="token parameter variable">-v</span> /var/run/docker.sock:/var/run/docker.sock <span class="token punctuation">\</span>    <span class="token parameter variable">-v</span> portainer_data:/data <span class="token punctuation">\</span>    portainer/portainer-ce:latest<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="2-正式部署"><a href="#2-正式部署" class="headerlink" title="2.正式部署"></a>2.正式部署</h2><ol><li><p>在 /mnt/docker/创建一个flarum的文件夹</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> /mnt/docker/flarum<span class="token builtin class-name">cd</span> /mnt/docker/flarum<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>配置docker-compose.yml文件</p><p>输入</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> docker-compose.yml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>内容：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">"3"</span><span class="token key atrule">services</span><span class="token punctuation">:</span>  <span class="token key atrule">flarum</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> mondedie/flarum<span class="token punctuation">:</span>stable    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> flarum    <span class="token key atrule">env_file</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> /mnt/docker/flarum/flarum.env    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> /mnt/docker/flarum/assets<span class="token punctuation">:</span>/flarum/app/public/assets      <span class="token punctuation">-</span> /mnt/docker/flarum/extensions<span class="token punctuation">:</span>/flarum/app/extensions      <span class="token punctuation">-</span> /mnt/docker/flarum/storage/logs<span class="token punctuation">:</span>/flarum/app/storage/logs      <span class="token punctuation">-</span> /mnt/docker/flarum/nginx<span class="token punctuation">:</span>/etc/nginx/flarum    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> 8082<span class="token punctuation">:</span><span class="token number">8888</span>         <span class="token comment">#设置端口为8082，根据自己情况设置</span>    <span class="token key atrule">depends_on</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> mariadb  <span class="token key atrule">mariadb</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> mariadb<span class="token punctuation">:</span><span class="token number">10.5</span>    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> mariadb    <span class="token key atrule">environment</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> MYSQL_ROOT_PASSWORD=xxxxxxxxxx    <span class="token comment">#设置数据库root密码 do</span>      <span class="token punctuation">-</span> MYSQL_DATABASE=flarum      <span class="token punctuation">-</span> MYSQL_USER=flarum      <span class="token punctuation">-</span> MYSQL_PASSWORD=xxxxxxxxxx         <span class="token comment">#设置数据库密码</span>    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> /mnt/docker/mysql/db<span class="token punctuation">:</span>/var/lib/mysql<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>再在/mnt/docker/flarum创建一个flarum.env文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> flarum.env<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">DEBUG=falseFORUM_URL=http://domain.tld    #设置自己网站地址，刚开始也可以设置成公网IP+端口号# Database configurationDB_HOST=mariadbDB_NAME=flarumDB_USER=flarumDB_PASS=xxxxxxxxxx         #和上方设置的密码保持一致DB_PREF=flarum_DB_PORT=3306# User admin flarum (environment variable for first installation)# /!\ admin password must contain at least 8 characters /!\FLARUM_ADMIN_USER=admin        #网站管理员账户FLARUM_ADMIN_PASS=xxxxxxxxxx    #密码和上面的密码保持一致FLARUM_ADMIN_MAIL=admin@domain.tld       #管理员邮箱FLARUM_TITLE=Test flarum      #网站标题<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>运行你的 docker-compose</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker-compose</span> up <span class="token parameter variable">-d</span> mariadb<span class="token function">docker-compose</span> up <span class="token parameter variable">-d</span> flarum<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol><p>这个时候在浏览器输入你的IP+端口号就能进入网站</p><h2 id="3-出现问题的及解决方法"><a href="#3-出现问题的及解决方法" class="headerlink" title="3.出现问题的及解决方法"></a>3.出现问题的及解决方法</h2><h3 id="1-如果进入网站，只显示标题让你强制刷新，怎么办。"><a href="#1-如果进入网站，只显示标题让你强制刷新，怎么办。" class="headerlink" title="1.如果进入网站，只显示标题让你强制刷新，怎么办。"></a>1.如果进入网站，只显示标题让你强制刷新，怎么办。</h3><p>显示<em>Something went wrong while trying to load the full version of this site. Try hard-refreshing this page to fix the error.</em></p><p>如果是配置了域名</p><pre class="line-numbers language-none"><code class="language-none"># 进入容器内部docker exec -it flarum-app sh# 修改 /flarum/app/config.phpvi /flarum/app/config.php<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">URL='外网ip:端口'  #域名的话输入 'url' =&gt; 'https://huddleberry.com'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>最后输入;wq 保存退出，这个时候会发现没用。</p><p>然后运行</p><pre class="line-numbers language-undefined" data-language="undefined"><code class="language-undefined">php flarum cache:clear<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>清理缓存，刷新网站，发现好了。</p><h3 id="2-重启容器后显示错误，直接进不去"><a href="#2-重启容器后显示错误，直接进不去" class="headerlink" title="2.重启容器后显示错误，直接进不去"></a>2.重启容器后显示错误，直接进不去</h3><p>显示</p><p>Next Doctrine\DBAL\Driver\PDO\Exception: SQLSTATE[HY000] [1045] Access denied for user ‘flarum‘@’172.19.0.3’ (using password: YES) in /flarum/app/vendor/doctrine/dbal/lib/Doctrine/DBAL/Driver/PDO/Exception.php:18</p><p>这个情况可能是数据库的密码和账户不对</p><p>检查上面配置的账号密码是不是对的上，有时候，密码设置的问题也可能会这样，试着换个密码，官网说</p><p>您的管理员密码必须至少包含<strong>8 个字符</strong>(FLARUM_ADMIN_PASS)。</p><h3 id="3-每次重启容器后发现都只显示标题让你强制刷新"><a href="#3-每次重启容器后发现都只显示标题让你强制刷新" class="headerlink" title="3.每次重启容器后发现都只显示标题让你强制刷新"></a>3.每次重启容器后发现都只显示标题让你强制刷新</h3><p>执行解决方法1.每次都要这么操作一下，就非常的麻瓜。</p><p>如果大家配置了Protainer那就方便了。</p><p>选择flarum容器</p><p><img src="D:/%E5%8D%9A%E5%AE%A2%E6%96%87%E7%AB%A0%E5%9B%BE%E7%89%87/%E4%BD%BF%E7%94%A8Docker-compose%E9%83%A8%E7%BD%B2Flarum%E8%AE%BA%E5%9D%9B/1.JPG" alt="1"></p><p><img src="D:/%E5%8D%9A%E5%AE%A2%E6%96%87%E7%AB%A0%E5%9B%BE%E7%89%87/%E4%BD%BF%E7%94%A8Docker-compose%E9%83%A8%E7%BD%B2Flarum%E8%AE%BA%E5%9D%9B/2.JPG" alt="2"></p><p><img src="D:/%E5%8D%9A%E5%AE%A2%E6%96%87%E7%AB%A0%E5%9B%BE%E7%89%87/%E4%BD%BF%E7%94%A8Docker-compose%E9%83%A8%E7%BD%B2Flarum%E8%AE%BA%E5%9D%9B/3.JPG" alt="3"></p><p>在FORUM_URL里输入正确的域名就行了。最后重新部署一下。</p><p>完成</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;使用Docker-compose部署Flarum论坛&quot;&gt;&lt;a href=&quot;#使用Docker-compose部署Flarum论坛&quot; class=&quot;headerlink&quot; title=&quot;使用Docker-compose部署Flarum论坛&quot;&gt;&lt;/a&gt;使用Docker</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://example.com/2022/11/05/Ubuntu%E5%AE%89%E8%A3%85%E5%92%8C%E5%8D%B8%E8%BD%BDJava/"/>
    <id>http://example.com/2022/11/05/Ubuntu%E5%AE%89%E8%A3%85%E5%92%8C%E5%8D%B8%E8%BD%BDJava/</id>
    <published>2022-11-04T16:48:12.188Z</published>
    <updated>2022-11-04T16:48:12.188Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Ubuntu安装和卸载Java"><a href="#Ubuntu安装和卸载Java" class="headerlink" title="Ubuntu安装和卸载Java"></a>Ubuntu安装和卸载Java</h1><h2 id="1-安装java"><a href="#1-安装java" class="headerlink" title="1.安装java"></a>1.安装java</h2><p>查看java是否安装：<code>java -version</code></p><p>java版本：</p><p>较新的版本是java18，若要安装执行命令：<code>sudo apt install default-jre</code></p><p>我选择的是java17</p><p>安装命令：<code>sudo apt install openjdk-17-jdk</code></p><p>安装好后，执行<code>java -version</code>，如果输出java版本，则说明安装成功</p><h2 id="2-配置环境变量："><a href="#2-配置环境变量：" class="headerlink" title="2.配置环境变量："></a>2.配置环境变量：</h2><ul><li><p>通过上述方式安装的java，目录是在：<code>/usr/lib/jvm/java-*-openjdk-amd64</code></p></li><li><p>所以环境变量配置时候添加下面内容即可：</p></li><li><p>```<br>~/.bashrc</p><pre class="line-numbers language-none"><code class="language-none">```shellexport JAVA_HOME=/usr/lib/jvm/java-11-openjdk-amd64export JRE_HOME=${JAVA_HOME}/jreexport CLASSPATH=.:${JAVA_HOME}/lib:${JRE_HOME}/libexport PATH=${JAVA_HOME}/bin:$PATH<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="3-卸载"><a href="#3-卸载" class="headerlink" title="3.卸载"></a>3.卸载</h2><h3 id="卸载java"><a href="#卸载java" class="headerlink" title="卸载java"></a>卸载java</h3><ul><li>先检查是否安装，命令：<code>dpkg --list | grep -i jdk</code></li><li>移除openjdk包，命令：<code>apt-get purge openjdk*</code></li><li>卸载 OpenJDK 相关包，命令：<code>apt-get purge icedtea-* openjdk-*</code></li><li>再次检查是否卸载成功，命令：<code>dpkg --list | grep -i jdk</code></li><li>卸载完成</li></ul><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://www.cnblogs.com/jaysonteng/p/13453244.html">ubuntu安装与卸载java</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Ubuntu安装和卸载Java&quot;&gt;&lt;a href=&quot;#Ubuntu安装和卸载Java&quot; class=&quot;headerlink&quot; title=&quot;Ubuntu安装和卸载Java&quot;&gt;&lt;/a&gt;Ubuntu安装和卸载Java&lt;/h1&gt;&lt;h2 id=&quot;1-安装java&quot;&gt;&lt;a </summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://example.com/2022/11/02/%E4%BD%BF%E7%94%A8Docker%E6%90%AD%E5%BB%BAFilebrowser%E7%BD%91%E7%9B%98%E6%9C%8D%E5%8A%A1/"/>
    <id>http://example.com/2022/11/02/%E4%BD%BF%E7%94%A8Docker%E6%90%AD%E5%BB%BAFilebrowser%E7%BD%91%E7%9B%98%E6%9C%8D%E5%8A%A1/</id>
    <published>2022-11-02T06:45:10.928Z</published>
    <updated>2022-11-02T06:45:10.929Z</updated>
    
    <content type="html"><![CDATA[<h1 id="使用Docker搭建Filebrowser网盘服务"><a href="#使用Docker搭建Filebrowser网盘服务" class="headerlink" title="使用Docker搭建Filebrowser网盘服务"></a>使用Docker搭建Filebrowser网盘服务</h1><p>今天来搭建一个网盘服务，然后配合之前搭建的qBittorrent使用更佳，可以通过网页来管理文件。</p><p>FileBrowser是一款基于现代浏览器技术的WEB版多用户文件管理器，它可以与我们的<code>Aria2</code>、<code>qBittorrent</code>等软件相结合，构建一个完整的离线下载与文件管理私有云。</p><p>简单网盘，可以管理文件、分享文件、用户权限分配，它还支持在线播放.mp4视频</p><h2 id="1-准备工作"><a href="#1-准备工作" class="headerlink" title="1.准备工作"></a>1.准备工作</h2><ol><li>准备一台服务器</li><li>安装Docker</li><li>安装Docker compose</li></ol><h2 id="2-开始部署"><a href="#2-开始部署" class="headerlink" title="2.开始部署"></a>2.开始部署</h2><p>每次做啥不多说，先进行一波系统软件的更</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> update <span class="token operator">&amp;&amp;</span> <span class="token function">sudo</span> <span class="token function">apt</span> upgrade<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="安装脚本"><a href="#安装脚本" class="headerlink" title="安装脚本"></a>安装脚本</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">wget</span> -qO- get.docker.com <span class="token operator">|</span> <span class="token function">bash</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="查看-Docker-安装版本等信息"><a href="#查看-Docker-安装版本等信息" class="headerlink" title="查看 Docker 安装版本等信息"></a>查看 Docker 安装版本等信息</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> version<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="启动-Docker-服务"><a href="#启动-Docker-服务" class="headerlink" title="启动 Docker 服务"></a>启动 Docker 服务</h3><pre class="line-numbers language-none"><code class="language-none">systemctl start docker<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="查看-Docker-运行状态"><a href="#查看-Docker-运行状态" class="headerlink" title="查看 Docker 运行状态"></a>查看 Docker 运行状态</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">systemctl status <span class="token function">docker</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="将-Docker-服务加入开机自启动"><a href="#将-Docker-服务加入开机自启动" class="headerlink" title="将 Docker 服务加入开机自启动"></a>将 Docker 服务加入开机自启动</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">systemctl <span class="token builtin class-name">enable</span> <span class="token function">docker</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="3-安装Docker-compose（可选）"><a href="#3-安装Docker-compose（可选）" class="headerlink" title="3.安装Docker compose（可选）"></a>3.安装Docker compose（可选）</h2><p>为了以后方便使用，顺便装上，这次用不上。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">curl</span> <span class="token parameter variable">-L</span> <span class="token string">"https://github.com/docker/compose/releases/download/1.29.2/docker-compose-<span class="token variable"><span class="token variable">$(</span><span class="token function">uname</span> <span class="token parameter variable">-s</span><span class="token variable">)</span></span>-<span class="token variable"><span class="token variable">$(</span><span class="token function">uname</span> <span class="token parameter variable">-m</span><span class="token variable">)</span></span>"</span> <span class="token parameter variable">-o</span> /usr/local/bin/docker-compose<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="赋予执行权限"><a href="#赋予执行权限" class="headerlink" title="赋予执行权限"></a>赋予执行权限</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">chmod</span> +x /usr/local/bin/docker-compose<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="查看docker-compose-版本"><a href="#查看docker-compose-版本" class="headerlink" title="查看docker-compose 版本"></a>查看docker-compose 版本</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker-compose</span> <span class="token parameter variable">--version</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="4-正式部署FileBrowser"><a href="#4-正式部署FileBrowser" class="headerlink" title="4.正式部署FileBrowser"></a>4.正式部署FileBrowser</h2><h3 id="下载filebrowser镜像"><a href="#下载filebrowser镜像" class="headerlink" title="下载filebrowser镜像"></a>下载filebrowser镜像</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> pull filebrowser/filebro<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="创建filebrowser挂载所需要的目录"><a href="#创建filebrowser挂载所需要的目录" class="headerlink" title="创建filebrowser挂载所需要的目录"></a>创建filebrowser挂载所需要的目录</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> /root/filebrowser<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="启动filebrowser"><a href="#启动filebrowser" class="headerlink" title="启动filebrowser"></a>启动filebrowser</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">-v</span> /root/downloads:/srv <span class="token parameter variable">-v</span> /root/filebrowser/filebrowserconfig.json:/etc/config.json <span class="token parameter variable">-v</span> /root/filebrowser/database.db:/etc/database.db <span class="token parameter variable">--name</span> myfile <span class="token parameter variable">-p</span> <span class="token number">8002</span>:80 filebrowser/filebrowser<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>通过浏览器访问ip+8002端口，默认账号密码：admin</strong></p><p>至此就搭建完成了</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;使用Docker搭建Filebrowser网盘服务&quot;&gt;&lt;a href=&quot;#使用Docker搭建Filebrowser网盘服务&quot; class=&quot;headerlink&quot; title=&quot;使用Docker搭建Filebrowser网盘服务&quot;&gt;&lt;/a&gt;使用Docker搭建F</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://example.com/2022/11/02/%E7%BB%99%20Ubuntu%20%E6%8C%82%E8%BD%BD%E6%96%B0%E7%A1%AC%E7%9B%98/"/>
    <id>http://example.com/2022/11/02/%E7%BB%99%20Ubuntu%20%E6%8C%82%E8%BD%BD%E6%96%B0%E7%A1%AC%E7%9B%98/</id>
    <published>2022-11-02T06:25:48.122Z</published>
    <updated>2022-11-02T06:25:48.123Z</updated>
    
    <content type="html"><![CDATA[<h1 id="给-Ubuntu-挂载新硬盘"><a href="#给-Ubuntu-挂载新硬盘" class="headerlink" title="给 Ubuntu 挂载新硬盘"></a>给 Ubuntu 挂载新硬盘</h1><p>在服务器上买了个附加存储，这就来给他挂载到服务器上。</p><h2 id="1-查看当前硬盘"><a href="#1-查看当前硬盘" class="headerlink" title="1.查看当前硬盘"></a>1.查看当前硬盘</h2><p>添加虚拟硬盘后，我们启动虚拟机，进入系统后，我们可以通过 <code>fdisk</code> 命令检查当前的硬盘状态。</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">sudo fdisk -l<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>执行以上命令后，我们可以看到以下输出：</p><p>![1](D:\博客文章图片\给 Ubuntu 挂载新硬盘\1.JPG)</p><p>这里我们可以看到，我们原来的硬盘标为 /dev/vda1 。下面还能看到一个名为 /dev/sda ，容量为 256G 的硬盘，这个就是我的附加存储。</p><h2 id="2-为新硬盘分区"><a href="#2-为新硬盘分区" class="headerlink" title="2.为新硬盘分区"></a>2.为新硬盘分区</h2><p>使用 <code>fdisk</code> 对 /dev/sda 进行分区操作，为了简化操作，我们会将这个新硬盘全部分为一个分区，具体操作如下：</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">sudo fdisk /dev/sda<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>进入分区工具后，可以看到如下界面</p><p>![2](D:\博客文章图片\给 Ubuntu 挂载新硬盘\2.JPG)</p><p>我们接下来要创建新分区，所以我们将会输入 <code>n</code></p><pre class="line-numbers language-none"><code class="language-none">Command (m for help): nPartition type   p   primary (0 primary, 0 extended, 4 free)   e   extended (container for logical partitions)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">Select (default p): pPartition number (1-4, default 1): 1First sector (2048-536870911, default 2048): 2048Last sector, +/-sectors or +/-size{K,M,G,T,P} (2048-536870911, default 536870911): 536870911Created a new partition 1 of type 'Linux' and of size 256 GiB.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里，我们可以给一块硬盘创建最多4个主分区，和若干逻辑分区，由于我们这里只为该硬盘创建一个分区，那么我们即创建一个主分区即可。</p><p>我们创建分区的操作为：<br>- p 命令创建一个主分区<br>- 选择默认创建第一个分区<br>- 设置分区的开始位置<br>- 设置分区的结束位置，因为只设置一个分区，因此都选择默认选项<br>- w 命令保存分区设置</p><h2 id="3-格式化分区"><a href="#3-格式化分区" class="headerlink" title="3.格式化分区"></a>3.格式化分区</h2><p>我们可以使用 <code>mkfs</code> 命令格式化分区，具体命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">mkfs</span> <span class="token parameter variable">-t</span> ext4 /dev/sdb1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>输入命令后，可以看到分区格式化成功：</p><p>![3](D:\博客文章图片\给 Ubuntu 挂载新硬盘\3.JPG)</p><h2 id="4-挂载分区"><a href="#4-挂载分区" class="headerlink" title="4.挂载分区"></a>4.挂载分区</h2><p>分区我们需要先创建一个目录，然后再把这个新分区挂载到目录上。具体操作如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 我们在 ~ 目录下创建一个 wenjian 的目录，并将新分区挂载到这里</span><span class="token function">mkdir</span> ~/wenjian<span class="token function">sudo</span> <span class="token function">mount</span> /dev/sda ~/wenjian<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>挂载后，我们再通过 <code>df -h</code> 命令查看是否挂载成功：</p><p>![4](D:\博客文章图片\给 Ubuntu 挂载新硬盘\4.JPG)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;给-Ubuntu-挂载新硬盘&quot;&gt;&lt;a href=&quot;#给-Ubuntu-挂载新硬盘&quot; class=&quot;headerlink&quot; title=&quot;给 Ubuntu 挂载新硬盘&quot;&gt;&lt;/a&gt;给 Ubuntu 挂载新硬盘&lt;/h1&gt;&lt;p&gt;在服务器上买了个附加存储，这就来给他挂载到服</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://example.com/2022/11/01/Ubuntu%E8%AE%BE%E7%BD%AE%E5%BC%80%E6%9C%BA%E5%90%AF%E5%8A%A8%E8%84%9A%E6%9C%AC/"/>
    <id>http://example.com/2022/11/01/Ubuntu%E8%AE%BE%E7%BD%AE%E5%BC%80%E6%9C%BA%E5%90%AF%E5%8A%A8%E8%84%9A%E6%9C%AC/</id>
    <published>2022-11-01T09:04:04.236Z</published>
    <updated>2022-11-01T09:04:04.237Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Ubuntu设置开机启动脚本"><a href="#Ubuntu设置开机启动脚本" class="headerlink" title="Ubuntu设置开机启动脚本"></a>Ubuntu设置开机启动脚本</h1><p>想在开机的时候自动启动Minecraft的服务器，这样就可以不用每次开机都去手动启动了。</p><p>研究了一下如何在Ubuntu上设置开机启动自己写的Shell，来实现开机自动启动Minecraft server。</p><p>以我想启动Minecraft为例</p><h2 id="1-编写启动脚本"><a href="#1-编写启动脚本" class="headerlink" title="1. 编写启动脚本"></a>1. 编写启动脚本</h2><p>为了方便以后开服，我们先在/root/mc下面创建一个startServer.sh文件。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> startServer.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>根据自己情况填写<br>我这里想开机启动screen然后用screen启动游戏</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">screen_name</span><span class="token operator">=</span><span class="token string">"MC"</span>  　<span class="token comment"># 要建立的screen名字</span><span class="token function">screen</span> <span class="token parameter variable">-dmS</span> <span class="token variable">$screen_name</span><span class="token assign-left variable">cmd</span><span class="token operator">=</span><span class="token string">"cd /root/mc &amp;&amp; java -jar fabric-server-launch.jar"</span><span class="token punctuation">;</span>  <span class="token comment"># 要执行的命令，要指明路径，不指明时默认是在 / 目录下</span><span class="token function">screen</span> <span class="token parameter variable">-x</span> <span class="token parameter variable">-S</span> <span class="token variable">$screen_name</span> <span class="token parameter variable">-p</span> <span class="token number">0</span> <span class="token parameter variable">-X</span> stuff <span class="token string">"<span class="token variable">$cmd</span>"</span>  <span class="token comment"># 输入命令</span><span class="token function">screen</span> <span class="token parameter variable">-x</span> <span class="token parameter variable">-S</span> <span class="token variable">$screen_name</span> <span class="token parameter variable">-p</span> <span class="token number">0</span> <span class="token parameter variable">-X</span> stuff <span class="token string">'\n'</span>   <span class="token comment"># 回车执行</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>保存退出。</p><p>不过这种方式发送的命令不能太长，否则会导致脚本卡住。</p><p>如果需要发送一条很长的命令，或者连续发送许多条命令，最好单独写一个脚本，发送一个脚本命令给screen，让screen执行新的脚本。</p><h2 id="2-编辑-rc-local-service-文件"><a href="#2-编辑-rc-local-service-文件" class="headerlink" title="2. 编辑 rc-local.service 文件"></a>2. 编辑 rc-local.service 文件</h2><p>首先执行</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">chmod</span> <span class="token number">777</span> /lib/systemd/system/rc-local.service  <span class="token comment">#赋予rc-local.service修改权限</span><span class="token function">sudo</span> <span class="token function">vim</span> /lib/systemd/system/rc-local.service<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>在rc-local.service文件尾部添加以下内容：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>Install<span class="token punctuation">]</span><span class="token assign-left variable">WantedBy</span><span class="token operator">=</span>multi-user.target<span class="token assign-left variable">Alias</span><span class="token operator">=</span>rc-local.service<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="3-编辑-rc-local-文件"><a href="#3-编辑-rc-local-文件" class="headerlink" title="3. 编辑 rc.local 文件"></a>3. 编辑 rc.local 文件</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">vim</span> /etc/rc.local<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在里面填写</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/sh</span><span class="token builtin class-name">echo</span> <span class="token string">"看到这行字，说明添加自启动脚本成功。"</span> <span class="token operator">&gt;</span> /usr/local/test.log<span class="token builtin class-name">cd</span> /root/mc/<span class="token function">chmod</span> <span class="token number">777</span> startServer.sh./startServer.sh <span class="token operator">&amp;</span><span class="token builtin class-name">exit</span> <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>给rc.local文件加上权限。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">chmod</span> +x /etc/rc.local<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="3-创建软链接"><a href="#3-创建软链接" class="headerlink" title="3. 创建软链接"></a>3. 创建软链接</h1><p>在 /etc/systemd/system/目录下创建软链接。Ubuntu创建软链接类似于Windows下创建快捷方式。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 创建方式：ln -s 原目录 映射目录</span><span class="token function">sudo</span> <span class="token function">ln</span> <span class="token parameter variable">-s</span> /lib/systemd/system/rc-local.service /etc/systemd/system/<span class="token comment"># 查看软链接 </span><span class="token function">ls</span> <span class="token parameter variable">-il</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://blog.csdn.net/m0_52650517/article/details/119767308?spm=1001.2101.3001.6650.2&amp;utm_medium=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~Rate-2-119767308-blog-126146956.pc_relevant_aa&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~Rate-2-119767308-blog-126146956.pc_relevant_aa&amp;utm_relevant_index=5">ubuntu 20.04 | 设置开机启动脚本</a></p><p>[Ubuntu 实现shell文件的开机运行（从原理到实现）](</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Ubuntu设置开机启动脚本&quot;&gt;&lt;a href=&quot;#Ubuntu设置开机启动脚本&quot; class=&quot;headerlink&quot; title=&quot;Ubuntu设置开机启动脚本&quot;&gt;&lt;/a&gt;Ubuntu设置开机启动脚本&lt;/h1&gt;&lt;p&gt;想在开机的时候自动启动Minecraft的服</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://example.com/2022/10/31/Ubuntu%E4%B8%8B%E5%A6%82%E4%BD%95%E8%A7%A3%E5%8E%8Bzip%E6%96%87%E4%BB%B6/"/>
    <id>http://example.com/2022/10/31/Ubuntu%E4%B8%8B%E5%A6%82%E4%BD%95%E8%A7%A3%E5%8E%8Bzip%E6%96%87%E4%BB%B6/</id>
    <published>2022-10-30T15:49:57.030Z</published>
    <updated>2022-10-30T15:51:59.692Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Ubuntu下如何解压zip文件"><a href="#Ubuntu下如何解压zip文件" class="headerlink" title="Ubuntu下如何解压zip文件"></a>Ubuntu下如何解压zip文件</h1><h2 id="1-安装解压软件"><a href="#1-安装解压软件" class="headerlink" title="1. 安装解压软件"></a>1. 安装解压软件</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> <span class="token function">unzip</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>step # 2</strong> 解压文件（注意：要切换到压缩包的目录中去）</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">unzip</span> xxxxx.zip<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="2-扩展："><a href="#2-扩展：" class="headerlink" title="2. 扩展："></a>2. 扩展：</h2><p>1、把文件解压到当前目录下</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">unzip</span> xxxxx.zip<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2、如果要把文件解压到指定的目录下，需要用到-d参数(-d指定目标路径,file.zip是需要解压的，<code>destination_folder是指定的目录下</code>)。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">unzip</span> file.zip <span class="token parameter variable">-d</span> destination_folder<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>比如：我在/home/1/下载 有个123.zip</p><p>而我要把这个压缩包解压到/home/2/test</p><p>目录下,首先就要到压缩包这个目录下</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /home/1/下载<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后输入：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">unzip</span> <span class="token number">123</span>.zip <span class="token parameter variable">-d</span> /home/2/test<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> 然后找到/home/2/test目录，可以看到test文件夹。是第二次解压，还会出现选项根据需求选择就行。</p><p>我们根据自己选择对应的就好了.当然也可以使用如下命令：（其中/temp是指定的目录，test.zip是需要解压的压缩包）</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">unzip</span> <span class="token parameter variable">-d</span> /temp test.zip<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>3、解压的时候，有时候不想覆盖已经存在的文件，那么可以加上-n参数</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">unzip</span> file.zip <span class="token parameter variable">-n</span> destination_folder<span class="token function">unzip</span> file.zip <span class="token parameter variable">-n</span> <span class="token parameter variable">-d</span> /temp test.zip<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>4、只看一下zip压缩包中包含哪些文件，不进行解压缩</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">unzip</span> <span class="token parameter variable">-l</span> test.zip<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>5、查看显示的文件列表还包含压缩比率</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">unzip</span> <span class="token parameter variable">-v</span> test.zip<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>6、检查zip文件是否损坏</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">unzip</span> <span class="token parameter variable">-t</span> test.zip<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>7、将压缩文件test.zip在指定目录tmp下解压缩，如果已有相同的文件存在，要求unzip命令覆盖原先的文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">unzip</span> <span class="token parameter variable">-o</span> test.zip <span class="token parameter variable">-d</span> /tmp/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>总结：格式用法：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">unzip</span> <span class="token punctuation">[</span>-Z<span class="token punctuation">]</span> <span class="token punctuation">[</span>-opts<span class="token punctuation">[</span>modifiers<span class="token punctuation">]</span><span class="token punctuation">]</span> file<span class="token punctuation">[</span>.zip<span class="token punctuation">]</span> <span class="token punctuation">[</span>list<span class="token punctuation">]</span> <span class="token punctuation">[</span>-x xlist<span class="token punctuation">]</span> <span class="token punctuation">[</span>-d exdir<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="3-主要参数"><a href="#3-主要参数" class="headerlink" title="3.主要参数"></a>3.主要参数</h2><p>-c 将解压缩的结果显示到屏幕上，并对字符做适当的转换<br> -p 与-c参数类似，会将解压缩的结果显示到屏幕上，但不会执行任何的转换。<br> -l 显示压缩文件内所包含的文件<br> -f 更新现有的文件<br> -t 检查压缩文件是否正确，但不解压<br> -u 与-f参数类似，但是除了更新现有的文件外，也会将压缩文件中的其他文件解压缩到目录中<br> -z 仅显示压缩文件的备注文字<br> -v 执行是时显示详细的信息。或查看压缩文件目录，但不解压<br> -T 将压缩文件内的所有文件的最新变动时间设为解压缩时候的时间<br> -x 指定不要处理.zip压缩文件中的哪些文件<br> -d 指定文件解压缩后所要存储的目录<br> -n 解压缩时不要覆盖原有的文件<br> -q 安静模式，执行时不显示任何信息<br> -o 不必先询问用户，unzip执行后覆盖原有文件<br> -a 对文本文件进行必要的字符转换<br> -j 不处理压缩文件中原有的目录路径<br> -aa 把所有的文件目录当作文本处理<br> -U use escapes for all non-ASCII Unicode<br> -UU 忽略Unicode编码字符<br> -C 压缩文件中的文件名称区分大小写<br> -L 将压缩文件中的全部文件名改为小写<br> -X 解压缩时同时回存文件原来的UID/GID<br> -V 保留VMS的文件版本信息<br> -K 保留文件的setuid/setgid/tacky属性<br> -M 将输出结果送到more程序处理<br> -O 指定字符编码为DOS，Windows和OS/2<br> -I 指定字符编码为UNIX</p><p>参考</p><p><a href="https://www.jianshu.com/p/1d2d3c6e2bf0">https://www.jianshu.com/p/1d2d3c6e2bf0</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Ubuntu下如何解压zip文件&quot;&gt;&lt;a href=&quot;#Ubuntu下如何解压zip文件&quot; class=&quot;headerlink&quot; title=&quot;Ubuntu下如何解压zip文件&quot;&gt;&lt;/a&gt;Ubuntu下如何解压zip文件&lt;/h1&gt;&lt;h2 id=&quot;1-安装解压软件&quot;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://example.com/2022/10/30/Ubuntu%E7%B3%BB%E7%BB%9F%E6%9F%A5%E7%9C%8B%E5%86%85%E5%AD%98%E5%8D%A0%E7%94%A8%E5%92%8CCPU%E4%BD%BF%E7%94%A8%E7%8E%87%E7%9A%84%E6%96%B9%E6%B3%95/"/>
    <id>http://example.com/2022/10/30/Ubuntu%E7%B3%BB%E7%BB%9F%E6%9F%A5%E7%9C%8B%E5%86%85%E5%AD%98%E5%8D%A0%E7%94%A8%E5%92%8CCPU%E4%BD%BF%E7%94%A8%E7%8E%87%E7%9A%84%E6%96%B9%E6%B3%95/</id>
    <published>2022-10-30T09:22:06.592Z</published>
    <updated>2022-10-30T09:35:49.222Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Ubuntu系统查看内存占用和CPU使用率的方法"><a href="#Ubuntu系统查看内存占用和CPU使用率的方法" class="headerlink" title="Ubuntu系统查看内存占用和CPU使用率的方法"></a>Ubuntu系统查看内存占用和CPU使用率的方法</h1><p>单独查看内存使用情况的命令：free -m</p><p>查看内存及cpu使用情况的命令：top</p><p>也可以安装htop工具，这样更直观，</p><p>安装命令如下：sudo apt-get install htop<br>安装完后，直接输入命令：htop<br>就可以看到内存或cpu的使用情况了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Ubuntu系统查看内存占用和CPU使用率的方法&quot;&gt;&lt;a href=&quot;#Ubuntu系统查看内存占用和CPU使用率的方法&quot; class=&quot;headerlink&quot; title=&quot;Ubuntu系统查看内存占用和CPU使用率的方法&quot;&gt;&lt;/a&gt;Ubuntu系统查看内存占用</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://example.com/2022/10/30/Ubuntu%E8%AE%BE%E7%BD%AE%E4%BD%BF%E7%94%A8SSH%E5%AF%86%E9%92%A5%E8%BF%9C%E7%A8%8B%E7%99%BB%E9%99%86%E7%AE%A1%E7%90%86/"/>
    <id>http://example.com/2022/10/30/Ubuntu%E8%AE%BE%E7%BD%AE%E4%BD%BF%E7%94%A8SSH%E5%AF%86%E9%92%A5%E8%BF%9C%E7%A8%8B%E7%99%BB%E9%99%86%E7%AE%A1%E7%90%86/</id>
    <published>2022-10-30T09:18:05.284Z</published>
    <updated>2022-10-30T09:21:13.999Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Ubuntu设置使用SSH密钥远程登陆管理"><a href="#Ubuntu设置使用SSH密钥远程登陆管理" class="headerlink" title="Ubuntu设置使用SSH密钥远程登陆管理"></a>Ubuntu设置使用SSH密钥远程登陆管理</h1><p>SSH 或安全外壳是一种加密协议，用于管理服务器并与服务器进行通信。在使用 Ubuntu 服务器时，您很可能将大部分时间花在通过 SSH 连接到服务器的终端会话中。</p><p>本教程重点介绍为 Ubuntu 等Linux 安装设置 SSH 密钥。SSH 密钥提供了一种登录服务器的安全方式，建议所有用户使用。</p><h2 id="1-制作密钥对"><a href="#1-制作密钥对" class="headerlink" title="1. 制作密钥对"></a>1. 制作密钥对</h2><p>首先在服务器上制作密钥对。首先用密码登录到你打算使用密钥登录的账户，然后执行以下命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@host ~<span class="token punctuation">]</span>$ ssh-keygen  <span class="token operator">&lt;=</span><span class="token operator">=</span> 建立密钥对Generating public/private rsa key pair.Enter <span class="token function">file</span> <span class="token keyword">in</span> <span class="token function">which</span> to save the key <span class="token punctuation">(</span>/root/.ssh/id_rsa<span class="token punctuation">)</span>: <span class="token operator">&lt;=</span><span class="token operator">=</span> 按 EnterCreated directory <span class="token string">'/root/.ssh'</span><span class="token builtin class-name">.</span>Enter passphrase <span class="token punctuation">(</span>empty <span class="token keyword">for</span> no passphrase<span class="token punctuation">)</span>: <span class="token operator">&lt;=</span><span class="token operator">=</span> 输入密钥锁码，或直接按 Enter 留空Enter same passphrase again: <span class="token operator">&lt;=</span><span class="token operator">=</span> 再输入一遍密钥锁码Your identification has been saved <span class="token keyword">in</span> /root/.ssh/id_rsa. <span class="token operator">&lt;=</span><span class="token operator">=</span> 私钥Your public key has been saved <span class="token keyword">in</span> /root/.ssh/id_rsa.pub. <span class="token operator">&lt;=</span><span class="token operator">=</span> 公钥The key fingerprint is:0f:d3:e7:1a:1c:bd:5c:03:f1:19:f1:22:df:9b:cc:08 root@host<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>密钥锁码在使用私钥时必须输入，这样就可以保护私钥不被盗用。当然，也可以留空，实现无密码登录。</p><p>现在，在 root 用户的家目录中生成了一个 .ssh 的隐藏目录，内含两个密钥文件。id_rsa 为私钥，id_rsa.pub 为公钥。</p><h2 id="2-在服务器上安装公钥"><a href="#2-在服务器上安装公钥" class="headerlink" title="2. 在服务器上安装公钥"></a>2. 在服务器上安装公钥</h2><pre class="line-numbers language-perl" data-language="perl"><code class="language-perl">键入以下命令，在服务器上安装公钥：<span class="token punctuation">[</span>root<span class="token variable">@host</span> <span class="token operator">~</span><span class="token punctuation">]</span>$ cd <span class="token operator">.</span>ssh<span class="token punctuation">[</span>root<span class="token variable">@host</span> <span class="token operator">.</span>ssh<span class="token punctuation">]</span>$ cat id_rsa<span class="token operator">.</span>pub <span class="token operator">&gt;&gt;</span> authorized_keys如此便完成了公钥的安装。为了确保连接成功，请保证以下文件权限正确：<span class="token punctuation">[</span>root<span class="token variable">@host</span> <span class="token operator">.</span>ssh<span class="token punctuation">]</span>$ chmod <span class="token number">600</span> authorized_keys<span class="token punctuation">[</span>root<span class="token variable">@host</span> <span class="token operator">.</span>ssh<span class="token punctuation">]</span>$ chmod <span class="token number">700</span> <span class="token operator">~</span><span class="token operator">/</span><span class="token operator">.</span>ssh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-设置-SSH，打开密钥登录功能"><a href="#3-设置-SSH，打开密钥登录功能" class="headerlink" title="3. 设置 SSH，打开密钥登录功能"></a>3. 设置 SSH，打开密钥登录功能</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">编辑 /etc/ssh/sshd_config 文件，进行如下设置：RSAAuthentication <span class="token function">yes</span>PubkeyAuthentication <span class="token function">yes</span>另外，请留意 root 用户能否通过 SSH 登录：PermitRootLogin <span class="token function">yes</span>当你完成全部设置，并以密钥方式登录成功后，再禁用密码登录：PasswordAuthentication no最后，重启 SSH 服务：<span class="token punctuation">[</span>root@host .ssh<span class="token punctuation">]</span>$ <span class="token function">service</span> sshd restart<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://blog.csdn.net/permike/article/details/52386868">https://blog.csdn.net/permike/article/details/52386868</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Ubuntu设置使用SSH密钥远程登陆管理&quot;&gt;&lt;a href=&quot;#Ubuntu设置使用SSH密钥远程登陆管理&quot; class=&quot;headerlink&quot; title=&quot;Ubuntu设置使用SSH密钥远程登陆管理&quot;&gt;&lt;/a&gt;Ubuntu设置使用SSH密钥远程登陆管理&lt;/</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://example.com/2022/10/28/%E5%A6%82%E4%BD%95%E7%BB%99Minecraft%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%BB%91%E5%AE%9A%E5%9F%9F%E5%90%8D/"/>
    <id>http://example.com/2022/10/28/%E5%A6%82%E4%BD%95%E7%BB%99Minecraft%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%BB%91%E5%AE%9A%E5%9F%9F%E5%90%8D/</id>
    <published>2022-10-27T15:36:27.884Z</published>
    <updated>2022-10-27T15:41:23.222Z</updated>
    
    <content type="html"><![CDATA[<h1 id="如何给Minecraft服务器绑定域名"><a href="#如何给Minecraft服务器绑定域名" class="headerlink" title="如何给Minecraft服务器绑定域名"></a>如何给Minecraft服务器绑定域名</h1><p>每次让朋友连接自己的Minecraft服务器，都得发他们IP，第一不方便记忆，第二不想暴露IP地址和端口号，如果我们绑定了域名，每次只需要输入域名，就不需要输入IP+端口号了。</p><h2 id="前提条件"><a href="#前提条件" class="headerlink" title="前提条件"></a>前提条件</h2><ul><li>一台已经架设且可访问的Minecraft服务器</li></ul><h2 id="1-注册一个域名"><a href="#1-注册一个域名" class="headerlink" title="1.注册一个域名"></a>1.注册一个域名</h2><p>要域名访问，首先你得要注册一个域名。</p><p>注册域名的厂商可以选择腾讯、阿里、华为等各大服务商。购买并注册域名得流程大家同样可以在各大搜索引擎中找到，这里本人就不赘述了，并假设大家已经注册好了域名。</p><h2 id="2-设置-A-记录"><a href="#2-设置-A-记录" class="headerlink" title="2.设置 A 记录"></a>2.设置 A 记录</h2><ol><li>注册号域名之后首先添加一个A记录</li><li>名称我这里填入 mc</li><li>IPv4 地址 （必需）填入自己的VPS的IP地址</li></ol><p>![屏幕截图 2022-10-28 003549](D:\博客文章图片\如何给Minecraft服务器绑定域名\屏幕截图 2022-10-28 003549.JPG)</p><h2 id="3-设置-SRV-记录"><a href="#3-设置-SRV-记录" class="headerlink" title="3.设置 SRV 记录"></a>3.设置 SRV 记录</h2><p>如果只进行上面的 A 记录解析，进入服务器还是要输入端口号。</p><p>如果你更改了端口号，但是又不想让别人知道，亦或是自己也不想每次都输入，这时候就可以用 SRV 记录来实现这个功能。</p><p> SRV 中的主机记录和 A 的功能是一样的，即如果大家想用哪个域名登录服务器就设为哪个的值。</p><p>但是有一点区别，就是必须加上 _minecraft._tcp. 前缀，不然无法进入 MC 服务器。 SRV 的「值」的填法和 A 记录的不同，SRV 中需要顺序填优先级 - 权重 - 端口号 - 目标地址。这里一般优先级填 5；权重写 0；端口号就是你的 MC 服务器的端口号，如果没改就是 25565，改了就填你自己改的那个数值；目标地址就填上一步那个 A 记录的域名即可。填好后的结果如下图所示：</p><p>![屏幕截图 2022-10-28 003946](D:\博客文章图片\如何给Minecraft服务器绑定域名\屏幕截图 2022-10-28 003946.JPG)</p><p>填好后，稍微等待一会，就可以进入 MC 客户端的多人模式，并在游戏中「服务器地址」那里填写上 mc.minecraft.com（大家需要按照自己的实际情况进行修改），就可以进入服务器愉快的玩耍了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;如何给Minecraft服务器绑定域名&quot;&gt;&lt;a href=&quot;#如何给Minecraft服务器绑定域名&quot; class=&quot;headerlink&quot; title=&quot;如何给Minecraft服务器绑定域名&quot;&gt;&lt;/a&gt;如何给Minecraft服务器绑定域名&lt;/h1&gt;&lt;p&gt;每次</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://example.com/2022/10/26/Plex%20%E6%8F%92%E4%BB%B6%20%E5%8A%A0%E8%BD%BD%E6%9C%AC%E5%9C%B0%20nfo%20%E6%96%87%E4%BB%B6%E5%92%8C%E6%9C%AC%E5%9C%B0%E5%A4%96%E6%8C%82%E5%AD%97%E5%B9%95/"/>
    <id>http://example.com/2022/10/26/Plex%20%E6%8F%92%E4%BB%B6%20%E5%8A%A0%E8%BD%BD%E6%9C%AC%E5%9C%B0%20nfo%20%E6%96%87%E4%BB%B6%E5%92%8C%E6%9C%AC%E5%9C%B0%E5%A4%96%E6%8C%82%E5%AD%97%E5%B9%95/</id>
    <published>2022-10-26T11:22:47.561Z</published>
    <updated>2022-10-26T11:22:47.561Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Plex-插件-加载本地-nfo-文件和本地外挂字幕"><a href="#Plex-插件-加载本地-nfo-文件和本地外挂字幕" class="headerlink" title="Plex 插件 加载本地 nfo 文件和本地外挂字幕"></a>Plex 插件 加载本地 nfo 文件和本地外挂字幕</h1><p>之前在搭建本地媒体服务器上介绍过如果安装Plex和使用<a href="https://www.tinymediamanager.org/">tinyMediaManager</a>进行刮削tMM 的好处在于你可以清楚地看到每部电影、电视剧的各种信息，是没找到还是漏了一些或者全找到了，一目了然，但是当 Plex 导入资料库时，往往不会用你搜集好的信息和图片，可能会自己再去搜一次，搜的不一定对，浪费时间，如果出现要手工调整的情况操作起来也比 tMM 麻烦一些，如何让 Plex 自动识别本地的信息呢，需要利用到 Plex 的插件：XBMCnfoMoviesImporter 和 XBMCnfoTVImporter。</p><h2 id="1-加载插件"><a href="#1-加载插件" class="headerlink" title="1 加载插件"></a>1 加载插件</h2><h3 id="1-1-下载插件"><a href="#1-1-下载插件" class="headerlink" title="1.1 下载插件"></a>1.1 下载插件</h3><p>这里提供三个下载方式，其中包含的文件都是一样的，GitHub 链接、百度网盘和我的私有网盘。如果网盘都失效了而且 GitHub链接出现问题，可以自行去 GitHub上搜索这两个插件。</p><p>GitHub：</p><p> XBMCnfoMoviesImporter：<a href="https://github.com/gboudreau/XBMCnfoMoviesImporter.bundle">仓库地址</a> <a href="https://github.com/gboudreau/XBMCnfoMoviesImporter.bundle/archive/master.zip">下载地址</a></p><p> XBMCnfoTVImporter：<a href="https://github.com/gboudreau/XBMCnfoTVImporter.bundle">仓库地址</a> <a href="https://github.com/gboudreau/XBMCnfoTVImporter.bundle/archive/master.zip">下载地址</a></p><h3 id="1-2-安装插件"><a href="#1-2-安装插件" class="headerlink" title="1.2 安装插件"></a>1.2 安装插件</h3><p>下载完成后解压，你会得到两个文件夹，如果你是从 GitHub 上下载，注意更改一下文件夹的名字，确保这两个文件夹的名字是 <strong>XBMCnfoMoviesImporter.bundle</strong> 和 <strong>XBMCnfoTVImporter.bundle</strong>。然后将这两个文件夹放到 Plex 的插件目录下，在官网的 <a href="https://support.plex.tv/articles/202915258-where-is-the-plex-media-server-data-directory-located/">说明文档</a> 中可以找到你的平台对应的目录。</p><p>我是在 Ubuntu Server 中安装的，所以我的目录为 <code>/var/lib/plexmediaserver/Library/Application Support/Plex Media Server/Plug-ins/</code> ，注意后面多了一个 <code>/Plug-ins/</code>，官网给的目录是 Plex 的安装目录，我们要把插件复制到 <strong>插件文件夹</strong> 里去。</p><p>将两个文件夹都丢进去之后，我们重启 Plex 服务，Linux 用户可以使用命令 <code>sudo service plexmediaserver restart</code>，接下来进行一下插件的配置。</p><h2 id="2-配置插件"><a href="#2-配置插件" class="headerlink" title="2 配置插件"></a>2 配置插件</h2><h3 id="2-1-使-Plex-加载本地信息"><a href="#2-1-使-Plex-加载本地信息" class="headerlink" title="2.1 使 Plex 加载本地信息"></a>2.1 使 Plex 加载本地信息</h3><p>说是配置插件，实际上是配置资料库的代理。进入 Plex 的控制面板，点击设置，左边的导航条拉到最下面，选择 <strong>管理</strong> 下的 <strong>资料库</strong>，找到你需要操作的资料库点击 <strong>编辑资料库</strong>。</p><p>在编辑面板中选择 <strong>高级</strong>，并更改代理，如果是电影资料库就将代理改为 XBMCnfoMoviesImporter，如果是电视节目资料库就将代理改为 XBMCnfoTVImporter。</p><p>根据网上的经验，最好关闭 Enable generating Collections from tags 这一选项（只有电影资料库有）并将 Collections 选项调整为 Disabled。</p><p>![屏幕截图 2022-10-26 201915](D:\博客文章图片\Plex 插件 加载本地 nfo 文件和本地外挂字幕\屏幕截图 2022-10-26 201915.JPG)</p><h3 id="使-Plex-加载本地字幕"><a href="#使-Plex-加载本地字幕" class="headerlink" title="使 Plex 加载本地字幕"></a>使 Plex 加载本地字幕</h3><p>到这一步，插件已经可以帮我们加载本地的影片信息了，但是还不能自动加载本地外挂字幕，即使字幕的命名没有问题，Plex 也不能识别，还需要对插件本身进行配置。</p><p>从左边导航栏找到 <strong>设置</strong> 下的 <strong>代理</strong>，在右边的电影和电视节目中可以看到我们刚刚加载的插件，将插件下的 Local Media Assets <strong>勾选上</strong>。</p><p>![屏幕截图 2022-10-26 202217](D:\博客文章图片\Plex 插件 加载本地 nfo 文件和本地外挂字幕\屏幕截图 2022-10-26 202217.JPG)</p><p>这时候，刷新资料库的元数据，你会发现所有的信息包括海报、缩略图、字幕等全都已经按照本地的文件加载好了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Plex-插件-加载本地-nfo-文件和本地外挂字幕&quot;&gt;&lt;a href=&quot;#Plex-插件-加载本地-nfo-文件和本地外挂字幕&quot; class=&quot;headerlink&quot; title=&quot;Plex 插件 加载本地 nfo 文件和本地外挂字幕&quot;&gt;&lt;/a&gt;Plex 插件 </summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://example.com/2022/10/26/%E8%A7%A3%E5%86%B3%20Ubuntu%20%E6%8C%82%E8%BD%BDNTFS%E7%A1%AC%E7%9B%98%E6%97%B6%E7%9A%84%E6%9D%83%E9%99%90%E9%97%AE%E9%A2%98/"/>
    <id>http://example.com/2022/10/26/%E8%A7%A3%E5%86%B3%20Ubuntu%20%E6%8C%82%E8%BD%BDNTFS%E7%A1%AC%E7%9B%98%E6%97%B6%E7%9A%84%E6%9D%83%E9%99%90%E9%97%AE%E9%A2%98/</id>
    <published>2022-10-26T05:56:08.740Z</published>
    <updated>2022-10-26T05:56:08.740Z</updated>
    
    <content type="html"><![CDATA[<h1 id="解决-Ubuntu-挂载NTFS硬盘时的权限问题"><a href="#解决-Ubuntu-挂载NTFS硬盘时的权限问题" class="headerlink" title="解决 Ubuntu 挂载NTFS硬盘时的权限问题"></a>解决 Ubuntu 挂载NTFS硬盘时的权限问题</h1><p>我在装的是Ubuntu 22.04和Windows11的双系统，当插入硬盘后对硬盘文件属性修改时均无效（chmod相关操作我都试个遍），查询后得知原因如下：因为 NTFS 分区格式不支持类 Unix 的权限，Ubuntu挂载NTFS分区的默认目录是/media ，如果把该分区手动挂载到别的目录，那么这个目录权限就会变化，改都改不了，在 mount 时可以设置。</p><p>​    不过呢还是有办法解决该问题的，如果要挂载的这块硬盘想要系统启动过程中被自动挂载那就用方法1，如果这块ntfs硬盘只是临时使用被插入时才使用可以使用方法2手动挂载的方式。</p><h1 id="方法一："><a href="#方法一：" class="headerlink" title="方法一："></a>方法一：</h1><p>ubuntu开机自动挂载ntfs硬盘（转自<a href="https://blog.csdn.net/wangliang888888/article/details/104690170%EF%BC%89">https://blog.csdn.net/wangliang888888/article/details/104690170）</a></p><h2 id="1-：查看自己的磁盘分析信息"><a href="#1-：查看自己的磁盘分析信息" class="headerlink" title="1 ：查看自己的磁盘分析信息"></a>1 ：查看自己的磁盘分析信息</h2><p>UUID   UGD  GID  信息</p><p>获取磁盘UUID 如下</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ls</span> <span class="token parameter variable">-l</span> /dev/disk/by-uuidlrwxrwxrwx <span class="token number">1</span> root root <span class="token number">10</span> <span class="token number">1</span>月 <span class="token number">12</span> <span class="token number">21</span>:45 0001AC6D000973C1 -<span class="token operator">&gt;</span> <span class="token punctuation">..</span>/<span class="token punctuation">..</span>/sda5lrwxrwxrwx <span class="token number">1</span> root root <span class="token number">10</span> <span class="token number">1</span>月 <span class="token number">12</span> <span class="token number">21</span>:45 0003A300000D437F -<span class="token operator">&gt;</span> <span class="token punctuation">..</span>/<span class="token punctuation">..</span>/sda6lrwxrwxrwx <span class="token number">1</span> root root <span class="token number">10</span> <span class="token number">1</span>月 <span class="token number">12</span> <span class="token number">21</span>:45 000ACA5D000CE1C1 -<span class="token operator">&gt;</span> <span class="token punctuation">..</span>/<span class="token punctuation">..</span>/sda8lrwxrwxrwx <span class="token number">1</span> root root <span class="token number">10</span> <span class="token number">1</span>月 <span class="token number">12</span> <span class="token number">21</span>:45 000E08DD00019CAA -<span class="token operator">&gt;</span> <span class="token punctuation">..</span>/<span class="token punctuation">..</span>/sda7lrwxrwxrwx <span class="token number">1</span> root root <span class="token number">11</span> <span class="token number">1</span>月 <span class="token number">12</span> <span class="token number">21</span>:45 158c8fbb-a3d4-4cb9-a7a5-1ecf13586280 -<span class="token operator">&gt;</span> <span class="token punctuation">..</span>/<span class="token punctuation">..</span>/sda10lrwxrwxrwx <span class="token number">1</span> root root <span class="token number">10</span> <span class="token number">1</span>月 <span class="token number">12</span> <span class="token number">21</span>:45 18354ee2-3c44-405a-af87-7c2316c45983 -<span class="token operator">&gt;</span> <span class="token punctuation">..</span>/<span class="token punctuation">..</span>/sda1lrwxrwxrwx <span class="token number">1</span> root root <span class="token number">10</span> <span class="token number">1</span>月 <span class="token number">12</span> <span class="token number">21</span>:45 f233ebb4-8c6e-48ca-832c-08ceb567f928 -<span class="token operator">&gt;</span> <span class="token punctuation">..</span>/<span class="token punctuation">..</span>/sda9lrwxrwxrwx <span class="token number">1</span> root root <span class="token number">10</span> <span class="token number">1</span>月 <span class="token number">12</span> <span class="token number">21</span>:45 FE14E80014E7BA33 -<span class="token operator">&gt;</span> <span class="token punctuation">..</span>/<span class="token punctuation">..</span>/sda3lrwxrwxrwx <span class="token number">1</span> root root <span class="token number">10</span> <span class="token number">1</span>月 <span class="token number">12</span> <span class="token number">21</span>:45 FE3438FC3438BA0B -<span class="token operator">&gt;</span> <span class="token punctuation">..</span>/<span class="token punctuation">..</span>/sda2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查看自己的 磁盘是在sda? 可以通过 sudo fdisk -l 查询 我推荐一个图形化的工具 </p><p>GParted 工具</p><h2 id="2：查看GID-（组ID-）-和UID-（用户ID-）"><a href="#2：查看GID-（组ID-）-和UID-（用户ID-）" class="headerlink" title="2：查看GID （组ID ） 和UID （用户ID ）"></a>2：查看GID （组ID ） 和UID （用户ID ）</h2><p>可以查看</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> /etc/passwd<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="3：修改-x2F-etc-x2F-fstab-文件-让系统启动的时候-自动挂载"><a href="#3：修改-x2F-etc-x2F-fstab-文件-让系统启动的时候-自动挂载" class="headerlink" title="3：修改 /etc/fstab 文件 (让系统启动的时候 自动挂载 )"></a>3：修改 /etc/fstab 文件 (让系统启动的时候 自动挂载 )</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">vim</span> /etc/fstab<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>其中 umask 是权限的 屏蔽 用 777-000 就是你的权限</p><p>其中 uid 和 gia 就是 你上面查询的用户 ID 组ID</p><pre class="line-numbers language-none"><code class="language-none">\# windows ntfs software DUUID=0001AC6D000973C1 /media/MyPassport     ntfs  defaults,nls=utf8,umask=000,uid=1000,gid=1000    0   0\# windows ntfs student EUUID=0003A300000D437F /media/Student     ntfs  defaults,nls=utf8,umask=000,uid=1000,gid=1000    0   0\# windows ntfs Media FUUID=000E08DD00019CAA /media/Medai      ntfs  defaults,nls=utf8,umask=000,uid=1000,gid=1000    0   0\# windows ntfs Else GUUID=000ACA5D000CE1C1 /media/Else      ntfs  defaults,nls=utf8,umask=000,uid=1000,gid=1000    0   0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>比如我修改成了</p><pre class="line-numbers language-none"><code class="language-none">UUID=5ace08dd-1a42-4113-ad6c-068a1ca4b645 none            swap    sw              0       0/dev/disk/by-uuid/6C52EB1452EAE236 /home/wenjian ntfs defaults,nls=utf8,umask=000,uid=1000,gid=1000 0 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="4：保存重启即可"><a href="#4：保存重启即可" class="headerlink" title="4：保存重启即可"></a>4：保存重启即可</h2><p>方法二：手动挂载方式</p><p>由方法一可已经得到ntfs的设备号、uuid、uid、gid。如果硬盘插上时被系统自动挂载，那么先解除绑定关系：</p><p>sudo umount /dev/sdc1</p><p>然后再手动绑定：</p><p>sudo mount -t ntfs -o uid=1000,gid=1000,umask=0000 /dev/sdc1 /media/MyPassport</p><p> umask 用户权限的掩码值，实际用户权限：是777减去umask的值，因此权限最后编程了都是777。</p><p>dmask 目录权限的掩码值，实际目录权限：是777减去dmask的值<br>fmask 文件权限的掩码值，实际文件权限：是777减去fmask的值</p><p>如果对ntfs中目录和文件属性作区分的话，可以用下面命令绑定：</p><p>sudo mount -t ntfs -o uid=1000,gid=1000,dmask=0111,fmask=0000 /dev/sdc1 /media/MyPassport</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;解决-Ubuntu-挂载NTFS硬盘时的权限问题&quot;&gt;&lt;a href=&quot;#解决-Ubuntu-挂载NTFS硬盘时的权限问题&quot; class=&quot;headerlink&quot; title=&quot;解决 Ubuntu 挂载NTFS硬盘时的权限问题&quot;&gt;&lt;/a&gt;解决 Ubuntu 挂载NT</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://example.com/2022/10/24/%E9%80%9A%E8%BF%87Protainer(docker-compose)%E6%9D%A5%E6%90%AD%E5%BB%BAnginx%20proxy%20manager%E6%9D%A5%E7%AE%A1%E7%90%86%20Nginx%20%E4%BB%A3%E7%90%86/"/>
    <id>http://example.com/2022/10/24/%E9%80%9A%E8%BF%87Protainer(docker-compose)%E6%9D%A5%E6%90%AD%E5%BB%BAnginx%20proxy%20manager%E6%9D%A5%E7%AE%A1%E7%90%86%20Nginx%20%E4%BB%A3%E7%90%86/</id>
    <published>2022-10-24T04:55:29.674Z</published>
    <updated>2022-10-24T04:55:29.674Z</updated>
    
    <content type="html"><![CDATA[<h1 id="通过Protainer-docker-compose-来搭建nginx-proxy-manager来管理-Nginx-代理"><a href="#通过Protainer-docker-compose-来搭建nginx-proxy-manager来管理-Nginx-代理" class="headerlink" title="通过Protainer(docker-compose)来搭建nginx proxy manager来管理 Nginx 代理"></a>通过Protainer(docker-compose)来搭建nginx proxy manager来管理 Nginx 代理</h1><h2 id="1-Nginx-Proxy-Manager是什么？"><a href="#1-Nginx-Proxy-Manager是什么？" class="headerlink" title="1.Nginx Proxy Manager是什么？"></a>1.Nginx Proxy Manager是什么？</h2><p>nginx proxy manager能让我们轻松地转发到在家里或其他地方运行的网站，包括免费的SSL，而不需要对Nginx或Letsencrypt了解太多。便捷直观的web页面管理和操作无疑大大简化了一般nginx反代服务的步骤。</p><h2 id="2-搭建之前的前提条件"><a href="#2-搭建之前的前提条件" class="headerlink" title="2.搭建之前的前提条件"></a>2.搭建之前的前提条件</h2><ul><li><input checked="" disabled="" type="checkbox"> 一台服务器</li><li><input checked="" disabled="" type="checkbox"> 安装Docker</li><li><input checked="" disabled="" type="checkbox"> 配置好Protainer</li></ul><p>这里有之前写过的配置教程</p><p><a href="https://tutujanjan.com/?p=2053">https://tutujanjan.com/?p=2053</a></p><h2 id="3-配置yml"><a href="#3-配置yml" class="headerlink" title="3.配置yml"></a>3.配置yml</h2><p>进入Protainer</p><p>依次点击Stacks —Add stack</p><p>Name填一个qbittorrent</p><p>填入如下代码。</p><pre class="line-numbers language-none"><code class="language-none">version: "3"services:  app:    image: 'jc21/nginx-proxy-manager:latest'    restart: unless-stopped    ports:      # These ports are in format &lt;host-port&gt;:&lt;container-port&gt;      - '82:82' # Public HTTP Port      - '443:443' # Public HTTPS Port      - '81:81' # Admin Web Port      # Add any other Stream port you want to expose      # - '21:21' # FTP    environment:      DB_MYSQL_HOST: "db"      DB_MYSQL_PORT: 3306      DB_MYSQL_USER: "npm"      DB_MYSQL_PASSWORD: "npm"      DB_MYSQL_NAME: "npm"      # Uncomment this if IPv6 is not enabled on your host      # DISABLE_IPV6: 'true'    volumes:      - ./data:/data      - ./letsencrypt:/etc/letsencrypt    depends_on:      - db  db:    image: 'jc21/mariadb-aria:latest'    restart: unless-stopped    environment:      MYSQL_ROOT_PASSWORD: 'npm'      MYSQL_DATABASE: 'npm'      MYSQL_USER: 'npm'      MYSQL_PASSWORD: 'npm'    volumes:      - ./data/mysql:/var/lib/mysql<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后点击Deploy the stack 部署</p><h2 id="4-登陆测试更改密码"><a href="#4-登陆测试更改密码" class="headerlink" title="4.登陆测试更改密码"></a>4.登陆测试更改密码</h2><p>部署好之后。我们通过`浏览器服务器</p><p>IP:81 访问</p><p><img src="D:\博客文章图片\通过Protainer(docker-compose" alt="屏幕截图 2022-10-24 135229">来搭建nginx proxy manager来管理 Nginx 代理\屏幕截图 2022-10-24 135229.JPG)</p><p>成功进入web页面，初次登录使用邮箱：<a href="mailto:admin@example.com">admin@example.com</a>，密码：changeme。</p><p>登录进去后会让你设置管理员的用户名（Full Name），昵称（Nickname）和邮箱。</p><p>接下来设置密码，旧密码即预设密码changeme。</p><p>至此，nginx proxy manager初始化完成。</p><p>具体的使用教程可以参考这个文章</p><p><a href="https://zhuanlan.zhihu.com/p/452419621?utm_id=0">https://zhuanlan.zhihu.com/p/452419621?utm_id=0</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;通过Protainer-docker-compose-来搭建nginx-proxy-manager来管理-Nginx-代理&quot;&gt;&lt;a href=&quot;#通过Protainer-docker-compose-来搭建nginx-proxy-manager来管理-Nginx-</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://example.com/2022/10/23/%E5%85%B3%E4%BA%8E%E6%88%91%E6%8A%98%E8%85%BE%E4%B8%80%E5%A4%A9%E6%88%90%E5%8A%9F%E5%9C%A8%E7%AC%94%E8%AE%B0%E6%9C%AC%E7%9A%84%E5%85%89%E9%A9%B1%E4%BD%8D%E7%A1%AC%E7%9B%98%E5%AE%89%E8%A3%85Ubuntu%E7%9A%84%E4%BA%8B/"/>
    <id>http://example.com/2022/10/23/%E5%85%B3%E4%BA%8E%E6%88%91%E6%8A%98%E8%85%BE%E4%B8%80%E5%A4%A9%E6%88%90%E5%8A%9F%E5%9C%A8%E7%AC%94%E8%AE%B0%E6%9C%AC%E7%9A%84%E5%85%89%E9%A9%B1%E4%BD%8D%E7%A1%AC%E7%9B%98%E5%AE%89%E8%A3%85Ubuntu%E7%9A%84%E4%BA%8B/</id>
    <published>2022-10-23T10:53:36.528Z</published>
    <updated>2022-10-23T10:53:36.528Z</updated>
    
    <content type="html"><![CDATA[<h1 id="关于我折腾一天成功在笔记本的光驱位硬盘安装Ubuntu的事"><a href="#关于我折腾一天成功在笔记本的光驱位硬盘安装Ubuntu的事" class="headerlink" title="关于我折腾一天成功在笔记本的光驱位硬盘安装Ubuntu的事"></a>关于我折腾一天成功在笔记本的光驱位硬盘安装Ubuntu的事</h1><p>有一台老旧的笔记本没什么用，今天收到了网上之前定的光驱硬盘托架，打算把SSD装进去然后装上Ubuntu。中途遇到很多问题装不上，直接搞的我差点昏过去，各种查资料，看视频。总结了一下安装的经验。</p><p>主要失败原因可能就是在固态硬盘里安装好系统后，机械硬盘在主硬盘位里没有系统的情况下，部分笔记本会发现无法开机了，原因是笔记本的光驱位不可以作为引导系统开机的，因为在按下电源键后主板不会及时给光驱位供电，导致电脑检测不到系统的启动文件，所以就报错了，这个问题最简便的方式就是使用主硬盘进行引导 。</p><p>介绍一下全部的流程。</p><h2 id="1-制作一个写盘工具"><a href="#1-制作一个写盘工具" class="headerlink" title="1.制作一个写盘工具"></a>1.制作一个写盘工具</h2><p>下载</p><p><a href="https://rufus.ie/">RUFUS软件</a></p><p>下载好Ubuntu的镜像文件，启动rufus软件</p><p><img src="D:\博客文章图片\关于我折腾一天成功在笔记本的光驱位硬盘安装Ubuntu的事\200abbeab7fb9cf1e684346a88e8cb7b.png" alt="200abbeab7fb9cf1e684346a88e8cb7b"></p><p>看到准备就绪，就写入完成，记住第四步最好选择NTFS，不然容易安装出错。</p><h2 id="2-给光驱位硬盘安装Ubuntu"><a href="#2-给光驱位硬盘安装Ubuntu" class="headerlink" title="2.给光驱位硬盘安装Ubuntu"></a>2.给光驱位硬盘安装Ubuntu</h2><p>这一步我出现很多问题，慢慢来没问题的。</p><p>笔记本插入U盘，把U盘设置成第一启动项启动电脑。</p><p>然后选择 Install Ubuntu</p><ol><li><p>选择安装语言，在语言选择栏拉到底可以看到简体中文（倒数第三个），选择中文（简体），然后点击安装Ubuntu进入安装。</p></li><li><p>选择键盘布局</p></li><li><p>根据需求我选择正常安装</p></li><li><p>选择双系统并存还是只安装Ubuntu，由于我之前安装过Ubuntu18.04LTS，这里第一项提示卸载Ubuntu 18.04LTS并重新安装，如果之前没有安装过，会显示与Windows10系统并存，选择双系统并存的选择第一项，选择只安装Ubuntu的可以选择第二项，清除整个磁盘并安装Ubuntu，这里我先选择第一项，然后点击现在安装 。</p><p>选择安装磁盘，这里我们先在我们的<em><strong>光驱位硬盘</strong></em>上安装</p></li><li><p>提示将改动写入磁盘，现在继续</p></li><li><p>提示选择时区，在哪就在地图上点哪，然后继续</p></li><li><p>等待安装完成。</p></li></ol><h2 id="3-安装中出现的问题"><a href="#3-安装中出现的问题" class="headerlink" title="3.安装中出现的问题"></a>3.安装中出现的问题</h2><p>一般正常安装不会有问题的，但是我就遇到了。</p><p>分享一下解决方法</p><h3 id="3-1-提示U盘安装Ubuntu遇到错误"><a href="#3-1-提示U盘安装Ubuntu遇到错误" class="headerlink" title="3-1.提示U盘安装Ubuntu遇到错误"></a>3-1.提示U盘安装Ubuntu遇到错误</h3><p>U盘安装Ubuntu18.04.1遇到错误：</p><p>安装程序向硬盘复制文件是遇到错误：[Errno 5] Input/out error ；</p><p>这通常是由于CD/DVD盘片或者驱动器有问题，或者硬盘错误造成的。以下措施可能有助于解决问题：清洁盘片、低速刻录或者清洁CD/DVD驱动器激光头（清洁工具通常在电子设备供应商处获得）、检查硬盘是否太旧而需要更换或者把硬盘放置到散热良好的环境中。</p><p>查了一下网上资料</p><p>遇到这个问题解决方案分为几种</p><p>解决方案:</p><ol><li>制作启动U盘的过程中，iso镜像写入时，U盘的格式为fat32，而电脑的磁盘格式是NTFS；想解决问题，使用RUFUS制作U盘启动，其中文件格式选为NTFS。（开始我试了，但是并不能解决问题然后试了方法二）</li><li>换U盘（结果还是不行）</li><li>笔记本过热*(我真的不会想到，过热会安装失败，找一个散热环境好的地方顺利解决问题)晕(&gt;_&lt;)</li></ol><h2 id="4-给内置机械硬盘安装Ubuntu"><a href="#4-给内置机械硬盘安装Ubuntu" class="headerlink" title="4.给内置机械硬盘安装Ubuntu"></a>4.给内置机械硬盘安装Ubuntu</h2><p>每次安装Ubuntu，系统会创建一个Grub引导，我试着单独安装，但是怎么折腾都不行，然后就用了很傻逼的方法，我再给机械硬盘一下Ubuntu是不是就可以让他帮我安装Grub然后就可以开机后自行选择了？试了一下真的可以。</p><p>同样的步骤安装Ubuntu选择安装到机械硬盘然后启动系统。</p><p><img src="D:\博客文章图片\关于我折腾一天成功在笔记本的光驱位硬盘安装Ubuntu的事\IMG_7756.jpg" alt="IMG_7756"></p><h2 id="5-配置默认启动项"><a href="#5-配置默认启动项" class="headerlink" title="5.配置默认启动项"></a>5.配置默认启动项</h2><p>这里就大功告成了，每次默认是启动我们机械硬盘的Ubuntu系统，我们可以修改默认启动项然后让他每次从SSD启动。</p><p>方法如下</p><ol><li><p>进入Ubuntu系统中，打开终端，输入以下命令：</p><pre class="line-numbers language-none"><code class="language-none">sudo gedit /etc/default/grub<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>我的Ubuntu启动项是第5项，则在弹出的页面第六行设置：<br>GRUB_DEFAULT = 4；把原来默认的0改为4就好。<br>这里需要说明一下，0表示机械硬盘的Ubuntu系统，第5个SSD的Ubuntu系统用4表示，大家视自己启动选项而定<img src="D:\博客文章图片\关于我折腾一天成功在笔记本的光驱位硬盘安装Ubuntu的事\921f32ff391f4ae2ab1e3ed166c2d4d3.png" alt="921f32ff391f4ae2ab1e3ed166c2d4d3"></p></li><li><p>修改完毕后，终端输入：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">update-grub</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><p>完成。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;关于我折腾一天成功在笔记本的光驱位硬盘安装Ubuntu的事&quot;&gt;&lt;a href=&quot;#关于我折腾一天成功在笔记本的光驱位硬盘安装Ubuntu的事&quot; class=&quot;headerlink&quot; title=&quot;关于我折腾一天成功在笔记本的光驱位硬盘安装Ubuntu的事&quot;&gt;&lt;/a</summary>
      
    
    
    
    
  </entry>
  
</feed>
