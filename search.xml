<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Docker Portainer如何通过命令来安装项目</title>
    <url>/2022/08/26/Docker-Portainer%E5%A6%82%E4%BD%95%E9%80%9A%E8%BF%87%E5%91%BD%E4%BB%A4%E6%9D%A5%E5%AE%89%E8%A3%85%E9%A1%B9%E7%9B%AE/</url>
    <content><![CDATA[<h1 id="Docker-Portainer如何通过命令来安装navidrome项目"><a href="#Docker-Portainer如何通过命令来安装navidrome项目" class="headerlink" title="Docker Portainer如何通过命令来安装navidrome项目"></a>Docker Portainer如何通过命令来安装navidrome项目</h1><p>1.安装配置好Docker Portainer</p>
<p>这次以安装<strong>navidrome</strong>为例</p>
<p>2.然后输入</p>
<p><a href="https://127.0.0.1:9443/">https://127.0.0.1:9443</a></p>
<p>访问</p>
<p>Portainer界面</p>
<p>3.依次点击</p>
<p>Stacks➡Add stack</p>
<p>Name填一个navidrome</p>
<p>Web editor填写安装命令</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">version: <span class="token string">"3"</span>
services:
  navidrome:
    image: deluan/navidrome:latest
    user: <span class="token number">0</span>:0 <span class="token comment"># 以root用户运行should be owner of root</span>
    ports:
      - <span class="token string">"4533:4533"</span>  <span class="token comment">#自定义设置端口映射</span>
    restart: unless-stopped
    environment:
      <span class="token comment"># Optional: put your config options customization here. Examples:</span>
      ND_SCANSCHEDULE: 1h
      ND_LOGLEVEL: info  
      ND_SESSIONTIMEOUT: 24h
      ND_BASEURL: <span class="token string">""</span>
    volumes:
      - <span class="token string">"/home/tutu/data:/data"</span>   <span class="token comment">#目录影射/path/to/data为主机目录/data为容器目录，主要存放服务产生的数据</span>
      - <span class="token string">"/home/tutu/music:/music:ro"</span>   <span class="token comment">#目录影射/path/to/music此目录主要存放音乐文件 /music:ro为容器内的相应目录</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>在/home/tutu/创建data文件来存放数据</p>
<p>在/home/tutu/music创建music文件来存放自己的音乐</p>
<p>最后只需要点击</p>
<p>Deploy the stack</p>
<p>理论上就能跑起来！</p>
<p><img src="/images/20220826/ubuntu/6.png"></p>
]]></content>
      <categories>
        <category>服务器</category>
        <category>Linux</category>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>教程</tag>
        <tag>Ubuntu</tag>
        <tag>Portainer</tag>
        <tag>navidrome</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo + GitHub 博客从 Windows 迁移到 macOS</title>
    <url>/2022/08/12/Hexo-GitHub-%E5%8D%9A%E5%AE%A2%E4%BB%8E-Windows-%E8%BF%81%E7%A7%BB%E5%88%B0-macOS/</url>
    <content><![CDATA[<h2 id="一、Mac-环境配置"><a href="#一、Mac-环境配置" class="headerlink" title="一、Mac 环境配置"></a>一、Mac 环境配置</h2><ol>
<li><p>在 Mac 安装 git 和 node.js<br>使用 brew 进行安装</p>
<pre class="line-numbers language-none"><code class="language-none">brew install git
brew install node<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
</li>
<li><p>安装 hexo</p>
<pre class="line-numbers language-none"><code class="language-none">npm install hexo g<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
</ol>
<p>这条命令不行（用的时候会出现 hexo: COMMAND NOT FOUND 问题）就执行下面这条：</p>
<pre class="line-numbers language-none"><code class="language-none">npm install hexo-cli -g<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ol start="3">
<li><p>初始化 hexo 目录</p>
<pre class="line-numbers language-none"><code class="language-none">mkdir blog
cd blog<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
</li>
<li><p>新建 hexo 服务</p>
<pre class="line-numbers language-none"><code class="language-none">hexo init
hexo s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li>
</ol>
<p>打开 localhost:4000 查看是否成功。<br>5. 生成 SSH 密钥<br>先查看本地的 SSH Key：</p>
<pre class="line-numbers language-cd" data-language="cd"><div class="caption"><span>~/.ssh</span></div><code class="language-cd">
如果没有，生成一个SSH Key：<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>ssh-keygen -t rsa -C “<a href="mailto:example@example.com">example@example.com</a>“</p>
<p>最后那个是注册邮箱。<br>6. 关联 GitHub<br>进入 .ssh 文件夹：</p>
<pre class="line-numbers language-none"><code class="language-none">cd ~/.ssh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>然后打开里面的 id_rsa.pub 文件，里面的内容就是 SSH key，复制全部内容。<br>网页打开 GitHub 的设置：Settings -&gt; SSH and GPG keys，点击绿色的按钮New SSH key，然后在输入框中输入刚才复制的内容。保存后，GitHub 可能会向你的邮箱发送一个验证链接（如果有记得去邮箱验证，不然之后的 hexo 部署会一直不成功的）。<br>测试一下是否成功：</p>
<pre class="line-numbers language-none"><code class="language-none">ssh git@github.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>看到下面的即成功：</p>
<p><img src="/images/111.png"></p>
<h2 id="二、配置文件转移"><a href="#二、配置文件转移" class="headerlink" title="二、配置文件转移"></a>二、配置文件转移</h2><p>先找到 Windows 下的博客根目录 hexo，复制该目录下的：_config.yml、scaffolds、source、themes、public。<br>再找到 Mac 下的博客根目录 hexo，把刚才复制的内容，直接覆盖替换相同的文件以及文件夹。</p>
<h2 id="三、设置个人信息"><a href="#三、设置个人信息" class="headerlink" title="三、设置个人信息"></a>三、设置个人信息</h2><pre class="line-numbers language-none"><code class="language-none">git config --global user.name "yourname”git config --global user.email youremail@example.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h2 id="四、发布文章"><a href="#四、发布文章" class="headerlink" title="四、发布文章"></a>四、发布文章</h2><p>运行以下命令，查看是否可以成功发布博客：</p>
<pre class="line-numbers language-none"><code class="language-none">hexo d -g<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>发现报错：</p>
<pre class="line-numbers language-none"><code class="language-none">ERROR Deployer not found: git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>只需要安装：</p>
<pre class="line-numbers language-none"><code class="language-none">npm install hexo-deployer-git --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h2 id="五、参考"><a href="#五、参考" class="headerlink" title="五、参考"></a>五、参考</h2><p>作者：Wonz<br>链接：<a href="https://juejin.cn/post/7016661862448103460">https://juejin.cn/post/7016661862448103460</a></p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Blog</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo + GitHub Pagesでブログを作成する方法</title>
    <url>/2022/05/26/Hexo%20+%20GitHub%20Pages%E3%81%A7%E3%83%96%E3%83%AD%E3%82%B0%E3%82%92%E4%BD%9C%E6%88%90%E3%81%99%E3%82%8B%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p>本記事では、Hexo + GitHub Pagesの組み合わせでブログ環境を構築する方法について説明します。<br>上から順番に読んでいただくと、ブログを作成できるような流れになっています。</p>
<p>本記事の内容です。</p>
<ol>
<li>前提条件</li>
<li>インストール</li>
<li>ブログを作成</li>
<li>記事を作成</li>
<li>テーマを適用</li>
<li>ローカルでサーバ起動</li>
<li>GitHub Pagesへデプロイ</li>
<li>ゴール</li>
<li>GitHub上でブログ用のリポジトリを作成</li>
<li>_config.ymlを編集</li>
<li>GitHub Pagesの設定</li>
<li>デプロイ</li>
<li>参考にしたページ</li>
</ol>
<h2 id="前提条件"><a href="#前提条件" class="headerlink" title="前提条件"></a>前提条件</h2><ul>
<li>GitHubアカウント作成済み</li>
<li>Node.jsインストール済み</li>
<li>Gitインストール済み</li>
</ul>
<h2 id="インストール"><a href="#インストール" class="headerlink" title="インストール"></a>インストール</h2><p>下記コマンドを実行します。コマンドを実行するディレクトリはどこでも良いです。</p>
<pre class="line-numbers language-none"><code class="language-none">npm install -g hexo-cli<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h2 id="ブログを作成"><a href="#ブログを作成" class="headerlink" title="ブログを作成"></a>ブログを作成</h2><p>ブログを作成したいディレクトリで下記コマンドを実行します。<br>[Webサイト名]には、好きな名前を入力してください。</p>
<pre class="line-numbers language-none"><code class="language-none">hexo init [Webサイト名]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>その後、作成したWebサイトのディレクトリへ移動し、下記コマンドを実行します。</p>
<pre class="line-numbers language-none"><code class="language-none">npm install<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h2 id="記事を作成"><a href="#記事を作成" class="headerlink" title="記事を作成"></a>記事を作成</h2><p>記事を作成するには、作成したWebサイトディレクトリのルートで下記コマンドを実行します。 [記事名]は、好きな記事名を入力してください。<br>また、この時に拡張子は指定しないように注意です。</p>
<pre class="line-numbers language-none"><code class="language-none">hexo new [記事名]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>すると、source/_posts下に記事のMarkdownファイルが作成されますので、後は自由に編集します。</p>
<h2 id="テーマを適用"><a href="#テーマを適用" class="headerlink" title="テーマを適用"></a>テーマを適用</h2><p>本記事内では、hexo-theme-materyを適用します。<br>最初に作成したWebサイトディレクトリのルートで下記のコマンドを実行し、GitHubからthemesディレクトリへテーマをダウンロードします。</p>
<pre class="line-numbers language-none"><code class="language-none">git clone https://github.com/ppoffice/hexo-theme-icarus themes/hexo-theme-matery<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>テーマのダウンロード後、_config.ymlの</p>
<pre class="line-numbers language-none"><code class="language-none">theme: landscape<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>の右側をダウンロードしたテーマ名に変更します。<br>今回はhexo-theme-icarusを適用するので、下記の通り変更します。</p>
<pre class="line-numbers language-none"><code class="language-none">theme: hexo-theme-icarus<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>テーマの一覧を確認できるページや個人的におススメしたいテーマについては、本記事最後に記述します。</p>
<p>config.ymlの設定が終わったら上書き保存し、後述する方法でサーバを起動します。<br>初回時はテーマのディレクトリ内でconfig.ymlが作成されるだけでサーバが起動しない事があるので、その場合は再度サーバを起動してください。</p>
<h2 id="ローカルでサーバ起動"><a href="#ローカルでサーバ起動" class="headerlink" title="ローカルでサーバ起動"></a>ローカルでサーバ起動</h2><p>作成したWebサイトディレクトリのルートで下記コマンドを実行します。</p>
<pre class="line-numbers language-none"><code class="language-none">hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>また、下記のように「-p [ポート番号]」とオプションを付けると、そのポート番号で起動することが可能です。</p>
<pre class="line-numbers language-none"><code class="language-none">hexo server -p 12345<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>ローカルで公開されているページへアクセスするには、上記コマンド実行時に表示される下記urlへアクセスしましょう。</p>
<pre class="line-numbers language-none"><code class="language-none">INFO  Hexo is running at http://localhost:4000 . Press Ctrl+C to stop.<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h2 id="GitHub-Pagesへデプロイ"><a href="#GitHub-Pagesへデプロイ" class="headerlink" title="GitHub Pagesへデプロイ"></a>GitHub Pagesへデプロイ</h2><h2 id="ゴール"><a href="#ゴール" class="headerlink" title="ゴール"></a>ゴール</h2><p>今回は、GitHub Pagesのサブディレクトリで公開する。<br>例:下記URLにてブログを公開。<br><a href="https://github.com/Aihuu08/Aihuu08.github.io">https://github.com/Aihuu08/Aihuu08.github.io</a></p>
<h2 id="GitHub上でブログ用のリポジトリを作成"><a href="#GitHub上でブログ用のリポジトリを作成" class="headerlink" title="GitHub上でブログ用のリポジトリを作成"></a>GitHub上でブログ用のリポジトリを作成</h2><p>静的ファイルを公開するためのリポジトリを作成します。<br>今回は「test-hexo-blog」という名前のリポジトリを作成します。</p>
<h2 id="config-ymlを編集"><a href="#config-ymlを編集" class="headerlink" title="config.ymlを編集"></a>config.ymlを編集</h2><p>config.ymlに存在する下記項目を編集します。<br>type、repoおよびbranchは、下記のように<br>typeはgitを、<br>repoは「GitHub上でブログ用のリポジトリを作成」で作成したリポジトリを、<br>branchは使用するbranch (大体の場合はmasterで良いと思います。) を、それぞれ指定してください。</p>
<pre class="line-numbers language-none"><code class="language-none">deploy:
  type: 'git'
  repo: https://github.com/Aihuu08/Aihuu08.github.io.git
  branch: master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="GitHub-Pagesの設定"><a href="#GitHub-Pagesの設定" class="headerlink" title="GitHub Pagesの設定"></a>GitHub Pagesの設定</h2><p>「GitHub上でブログ用のリポジトリを作成」で作成したリポジトリのページを開き、下記の設定を行います。<br>Settings -&gt; GitHub PagesのSourceでmaster branchを選択 (大体の場合はmaster branchだと思います。)<br>実際の画面を確認しながら作業を行いたい方は、下記ページを参考にするとわかりやすいです。<br><a href="https://tech.qookie.jp/posts/hexo-deploy-github-pages-fast/">https://tech.qookie.jp/posts/hexo-deploy-github-pages-fast/</a></p>
<h2 id="デプロイ"><a href="#デプロイ" class="headerlink" title="デプロイ"></a>デプロイ</h2><p>これで最後です。<br>作成したWebサイトディレクトリのルートで下記コマンドを実行し、Hexoで作成したWebページをデプロイします。</p>
<pre class="line-numbers language-none"><code class="language-none">hexo deploy -g<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>オプションに「-g」を付けているのは、デプロイ時に静的ファイルの生成も一緒に行いたいためです。</p>
<p>ここまで作業が終わったら、実際に作成したurlへアクセスし、Hexoで作成したものが表示されるかを確認してみましょう。</p>
<h2 id="参考にしたページ"><a href="#参考にしたページ" class="headerlink" title="参考にしたページ"></a>参考にしたページ</h2><p><a href="https://j-levia.hatenablog.jp/entry/2019/09/05/152908#%E8%A8%98%E4%BA%8B%E3%82%92%E4%BD%9C%E6%88%90">https://j-levia.hatenablog.jp/entry/2019/09/05/152908#%E8%A8%98%E4%BA%8B%E3%82%92%E4%BD%9C%E6%88%90</a></p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Blog</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo博客搭建之在文章中插入图片</title>
    <url>/2022/08/12/Hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E4%B9%8B%E5%9C%A8%E6%96%87%E7%AB%A0%E4%B8%AD%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87/</url>
    <content><![CDATA[<h1 id="Hexo博客搭建之在文章中插入图片"><a href="#Hexo博客搭建之在文章中插入图片" class="headerlink" title="Hexo博客搭建之在文章中插入图片"></a>Hexo博客搭建之在文章中插入图片</h1><p>在写文章时，常常有配图说明的需求。Hexo有多种图片插入方式，可以将图片存放在本地引用或者将图片放在CDN上引用。</p>
<h3 id="本地引用"><a href="#本地引用" class="headerlink" title="本地引用"></a>本地引用</h3><h4 id="绝对路径"><a href="#绝对路径" class="headerlink" title="绝对路径"></a>绝对路径</h4><p>当Hexo项目中只用到少量图片时，可以将图片统一放在<code>source/images</code>文件夹中，通过markdown语法访问它们。</p>
<pre class="line-numbers language-none"><code class="language-none">source/images/image.jpg![](/images/image.jpg)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>图片既可以在首页内容中访问到，也可以在文章正文中访问到。</p>
<h4 id="相对路径"><a href="#相对路径" class="headerlink" title="相对路径"></a>相对路径</h4><p>图片除了可以放在统一的<code>images</code>文件夹中，还可以放在文章自己的目录中。文章的目录可以通过配置<code>_config.yml</code>来生成。</p>
<pre class="line-numbers language-none"><code class="language-none">_config.ymlpost_asset_folder: true<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>将<code>_config.yml</code>文件中的配置项<code>post_asset_folder</code>设为<code>true</code>后，执行命令<code>$ hexo new post_name</code>，在<code>source/_posts</code>中会生成文章<code>post_name.md</code>和同名文件夹<code>post_name</code>。将图片资源放在<code>post_name</code>中，文章就可以使用相对路径引用图片资源了。</p>
<pre class="line-numbers language-none"><code class="language-none">_posts/post_name/image.jpg![](image.jpg)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>上述是markdown的引用方式，图片只能在文章中显示，但无法在首页中正常显示。</p>
<p>如果希望图片在文章和首页中同时显示，可以使用标签插件语法。</p>
<pre class="line-numbers language-none"><code class="language-none">_posts/post_name/image.jpg{% asset_img image.jpg This is an image %}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="CDN引用"><a href="#CDN引用" class="headerlink" title="CDN引用"></a>CDN引用</h3><p>除了在本地存储图片，还可以将图片上传到一些免费的CDN服务中。比如<a href="http://cloudinary.com/">Cloudinary</a>提供的图片CDN服务，在Cloudinary中上传图片后，会生成对应的url地址，将地址直接拿来引用即可。</p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Blog</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx配置SSL证书（Https）给WordPress网站</title>
    <url>/2022/08/28/Nginx%E9%85%8D%E7%BD%AESSL%E8%AF%81%E4%B9%A6%EF%BC%88Https%EF%BC%89%E7%BB%99WordPress%E7%BD%91%E7%AB%99/</url>
    <content><![CDATA[<h1 id="Nginx配置SSL证书（Https）给WordPress网站"><a href="#Nginx配置SSL证书（Https）给WordPress网站" class="headerlink" title="Nginx配置SSL证书（Https）给WordPress网站"></a>Nginx配置SSL证书（Https）给WordPress网站</h1><p>前置条件：</p>
<p>服务器已经安装nginx和WordPress网站并且通过http可以正常访问。</p>
<h2 id="1-去免费申请一个SSl证书"><a href="#1-去免费申请一个SSl证书" class="headerlink" title="1.去免费申请一个SSl证书"></a>1.去免费申请一个SSl证书</h2><p>推荐一个SSL For Free网站:</p>
<p>网站地址：<a href="https://www.sslforfree.com/">https://www.sslforfree.com</a></p>
<p><img src="https://tutujanjan.world/wp-content/uploads/2022/08/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE-2022-08-28-022222-1024x380.png" alt="img"></p>
<p>添加自己需要应用SSL证书的域名,比如我的WordPress网站域名*（tutujanjan.world）,然后点击Create Free SSL Certificate按钮，系统会自动补齐www域名或者不带www域名。</p>
<p>1.然后我们选择90天证书</p>
<p>2.然后取消自动生成 CSR进行手动配置</p>
<p>3.输入邮件地址 城市 国家点击下一步</p>
<p>4.接着就可以下载一个TXT文件保存到本地</p>
<h2 id="2-验证域名所有权"><a href="#2-验证域名所有权" class="headerlink" title="2.验证域名所有权"></a>2.验证域名所有权</h2><p>1.根据网站的提示到我们的服务器网站根目录添加文件夹</p>
<p>列如我的情况</p>
<p>/home/wwwroot/wordpress/.well-known/pki-validation</p>
<p>网站根目录为wordpress在下面创建</p>
<p>.well-known/pki-validation</p>
<p>2.把下载下来的TXT文件导入进去。</p>
<p>然后网站点击验证域名。验证成功就可以下载一个证书的安装包</p>
<p>分别是certificate.crt、ca_bundle.crt，以及private.key。</p>
<p><img src="https://tutujanjan.world/wp-content/uploads/2022/08/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE-2022-08-28-023609.png" alt="img"></p>
<h2 id="3-免费SSL证书部署网站"><a href="#3-免费SSL证书部署网站" class="headerlink" title="3.免费SSL证书部署网站"></a>3.免费SSL证书部署网站</h2><ol>
<li>合并certificate.crt、ca_bundle.crt（其实就是用文本编辑器打开，然后把里面的代码复制到一起。）</li>
<li>把合并好的.crt文件改名为自己喜欢的名字，比如tutu.crt</li>
<li>然后在服务器中创建了一个SSL目录”/usr/local/nginx/conf/ssl/”，然后将合并的文件（laobuluo.crt）以及private.key，一并上传进去。</li>
</ol>
<h2 id="4-配置Nginx文件启动SSL证书"><a href="#4-配置Nginx文件启动SSL证书" class="headerlink" title="4.配置Nginx文件启动SSL证书"></a>4.配置Nginx文件启动SSL证书</h2><p>这一步我折腾了好久，格式一定要填对，网上找的教程很多和现在格式都不正确。</p>
<p>1.修改nginx.conf配置</p>
<p>首先进入nginx的安装目录</p>
<p>一般在/usr/local/nginx/conf里面</p>
<p>打开它或者使用命令</p>
<pre class="line-numbers language-none"><code class="language-none">cd /usr/locla/nginx/conf
#修改nginx.conf文件
vim nginx.conf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>2.找到server这一行进行修改</p>
<p>格式一定要对。</p>
<p><img src="https://tutujanjan.world/wp-content/uploads/2022/08/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE-2022-08-28-024559.png" alt="img"></p>
<p>简单说明以下</p>
<pre class="line-numbers language-none"><code class="language-none">server
    {
        listen 443;                 #监听443端口
        #listen [::]:80 default_server ipv6only=on;
        server_name tutujanjan.world;           #你的域名
        index index.html index.htm index.php;
        root  /home/wwwroot/wordpress;        #站点目录。
	ssl on;   #开启ssl
	ssl_certificate     /usr/local/nginx/conf/ssl/tutu.crt;        #ssl证书的crt文件路径
	ssl_certificate_key /usr/local/nginx/conf/ssl/private.key;         #ssl证书的key文件路径
        #error_page   404   /404.html;

        # Deny access to PHP files in specific directory
        #location ~ /(wp-content|uploads|wp-includes|images)/.*\.php$ { deny all; }

        include enable-php.conf;

        location /nginx_status
        {
            stub_status on;
            access_log   off;
        }

        location ~ .*\.(gif|jpg|jpeg|png|bmp|swf)$
        {
            expires      30d;
        }

        location ~ .*\.(js|css)?$
        {
            expires      12h;
        }

        location ~ /.well-known {
            allow all;
        }

        location ~ /\.
        {
            deny all;
        }

        access_log  /home/wwwlogs/access.log;
    }
include vhost/*.conf;
}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>3.配置完成后，检查一下nginx配置文件是否可用，有successful表示可用。</p>
<pre class="line-numbers language-none"><code class="language-none">$ nginx -t // 检查nginx配置文件<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>4.配置正确后，重新加载配置文件使配置生效：</p>
<pre class="line-numbers language-none"><code class="language-none">nginx -s reload // 使配置生效<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>5.如需重启nginx，用以下命令：</p>
<pre class="line-numbers language-none"><code class="language-none">$ service nginx stop // 停止
$ service nginx start // 启动
$ service nginx restart // 重启<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h2 id="5-测试是否成功"><a href="#5-测试是否成功" class="headerlink" title="5.测试是否成功"></a>5.测试是否成功</h2><p>输入<a href="https://tutujanjan.world/">https://tutujanjan.world</a> 看看能否成功访问。</p>
<h2 id="6-重定向到-443-端口"><a href="#6-重定向到-443-端口" class="headerlink" title="6.重定向到 443 端口"></a>6.重定向到 443 端口</h2><p>本来以为就结束了，然后我最后发现一个问题，就是必须手动输入https://在浏览器才能访问。</p>
<p>我们需要把80端口的http://重定向到443端口。</p>
<p>打开nginx.conf配置文件</p>
<p>在server上面再添加一行</p>
<pre class="line-numbers language-none"><code class="language-none">server
    {
        listen 443;                 #监听443端口
        #listen [::]:80 default_server ipv6only=on;
        server_name tutujanjan.world;           #你的域名
        index index.html index.htm index.php;
        root  /home/wwwroot/wordpress;        #站点目录。
	ssl on;   #开启ssl<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>相关配置：</p>
<pre class="line-numbers language-none"><code class="language-none">server {
    listen 80;
    server_name YOUR_DOMAIN;
    rewrite ^(.*)$ https://${server_name}$1 permanent;     
}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>比如我的就是这样的</p>
<p><img src="https://tutujanjan.world/wp-content/uploads/2022/08/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE-2022-08-28-173954.png" alt="img"></p>
<p>搞定，只需要输入域名都能访问https://而不需要手动输入了。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>对于小白用户，前面步骤都挺轻松的，后面的配置信息因为格式不对，导致我一直没成功，折腾了半天。</p>
<p>建议配置nginx.conf的时候对它先进行一次备份。</p>
]]></content>
      <categories>
        <category>服务器</category>
        <category>Linux</category>
        <category>网站</category>
      </categories>
      <tags>
        <tag>教程</tag>
        <tag>Ubuntu</tag>
        <tag>WordPress</tag>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu Server ARM 22.04从英文切换到中文环境</title>
    <url>/2022/08/31/Ubuntu-Server-ARM-22-04%E4%BB%8E%E8%8B%B1%E6%96%87%E5%88%87%E6%8D%A2%E5%88%B0%E4%B8%AD%E6%96%87%E7%8E%AF%E5%A2%83/</url>
    <content><![CDATA[<h1 id="Ubuntu-Server-ARM-22-04从英文切换到中文环境"><a href="#Ubuntu-Server-ARM-22-04从英文切换到中文环境" class="headerlink" title="Ubuntu Server ARM 22.04从英文切换到中文环境"></a>Ubuntu Server ARM 22.04从英文切换到中文环境</h1><h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1.前言"></a>1.前言</h2><p>安装好了Ubuntu Server ARM 22.04的图形化虚拟机，发现设置里面不能切换语言，安装了中文语言包依然没用，甚至选项都没有，瞬间昏了过去<img src="https://s.w.org/images/core/emoji/14.0.0/svg/1f605.svg" alt="😅">。最后还是配置好了中文环境，分享一下经验。</p>
<h2 id="2-开始配置"><a href="#2-开始配置" class="headerlink" title="2.开始配置"></a>2.开始配置</h2><h3 id="2-1-更新软件列表和安装包。"><a href="#2-1-更新软件列表和安装包。" class="headerlink" title="2.1 更新软件列表和安装包。"></a>2.1 更新软件列表和安装包。</h3><pre class="line-numbers language-none"><code class="language-none">sudo apt-get update
sudo apt-get upgrade<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h3 id="2-2-安装相关组件："><a href="#2-2-安装相关组件：" class="headerlink" title="2.2 安装相关组件："></a>2.2 安装相关组件：</h3><pre class="line-numbers language-none"><code class="language-none">sudo apt install -y language-pack-zh-hans<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="2-3-编辑配置文件"><a href="#2-3-编辑配置文件" class="headerlink" title="2.3 编辑配置文件"></a>2.3 编辑配置文件</h3><pre class="line-numbers language-none"><code class="language-none">sudo vim /etc/default/locale<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>如果提示没有vim输入：</p>
<pre class="line-numbers language-none"><code class="language-none">sudo apt install vim<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>安装即可</p>
<p>修改为以下内容：</p>
<p><img src="https://tutujanjan.world/wp-content/uploads/2022/08/%E6%88%AA%E5%B1%8F2022-08-31-5.26.44.png" alt="img"></p>
<p>然后重启服务器即可。</p>
<p>*补充</p>
<p>执行以下命令安装字体和输入法。</p>
<pre class="line-numbers language-none"><code class="language-none">sudo apt install $(check-language-support) -y<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
]]></content>
      <categories>
        <category>服务器</category>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>教程</tag>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu防火墙的开启，关闭，端口的打开，查看</title>
    <url>/2022/08/26/Ubuntu%E9%98%B2%E7%81%AB%E5%A2%99%E7%9A%84%E5%BC%80%E5%90%AF%EF%BC%8C%E5%85%B3%E9%97%AD%EF%BC%8C%E7%AB%AF%E5%8F%A3%E7%9A%84%E6%89%93%E5%BC%80%EF%BC%8C%E6%9F%A5%E7%9C%8B/</url>
    <content><![CDATA[<h1 id="Ubuntu防火墙的开启，关闭，端口的打开，查看"><a href="#Ubuntu防火墙的开启，关闭，端口的打开，查看" class="headerlink" title="Ubuntu防火墙的开启，关闭，端口的打开，查看"></a>Ubuntu防火墙的开启，关闭，端口的打开，查看</h1><h2 id="1-防火墙的打开"><a href="#1-防火墙的打开" class="headerlink" title="1.防火墙的打开"></a>1.防火墙的打开</h2><p><strong>sudo ufw enable</strong></p>
<h2 id="2-防火墙的重启"><a href="#2-防火墙的重启" class="headerlink" title="2.防火墙的重启"></a><strong>2.防火墙的重启</strong></h2><p><strong>sudo ufw reload</strong></p>
<h2 id="3-打开想要的端口（以9000为例）"><a href="#3-打开想要的端口（以9000为例）" class="headerlink" title="3.打开想要的端口（以9000为例）"></a><strong>3.打开想要的端口（以9000为例）</strong></h2><p><strong>ufw allow 9000</strong></p>
<h2 id="4-查看本机端口使用情况"><a href="#4-查看本机端口使用情况" class="headerlink" title="4.查看本机端口使用情况"></a><strong>4.查看本机端口使用情况</strong></h2><p><strong>ufw status</strong></p>
]]></content>
      <categories>
        <category>服务器</category>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>教程</tag>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows 11 免费激活教程</title>
    <url>/2022/08/19/Windows%2011%20%E5%85%8D%E8%B4%B9%E6%BF%80%E6%B4%BB%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<h1 id="Windows-11-免费激活教程"><a href="#Windows-11-免费激活教程" class="headerlink" title="Windows 11 免费激活教程"></a>Windows 11 免费激活教程</h1><p>安装好Windows11 以后，之前一直都是用淘宝买激活码来激活系统的，其实只需要三行命令就可以免费激活。</p>
<p>Windows内搜索「cmd」 打开命令窗口依次输入这三条命令：</p>
<pre class="line-numbers language-none"><code class="language-none">slmgr /ipk W269N-WFGWX-YVC9B-4J6C9-T83GX

slmgr /skms kms.loli.best

slmgr /ato<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>看到成功激活，点击确定就OK。</p>
<p>搞定！(≧▽≦)</p>
]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>教程</tag>
        <tag>windows</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2022/05/19/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>hexo常用命令笔记</title>
    <url>/2022/08/12/hexo%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="hexo常用命令笔记"><a href="#hexo常用命令笔记" class="headerlink" title="hexo常用命令笔记"></a>hexo常用命令笔记</h1><h2 id="hexo"><a href="#hexo" class="headerlink" title="hexo"></a>hexo</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo <span class="token parameter variable">-g</span> <span class="token comment">#安装  </span>
<span class="token function">npm</span> update hexo <span class="token parameter variable">-g</span> <span class="token comment">#升级  </span>
hexo init <span class="token comment">#初始化</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h2 id="简写"><a href="#简写" class="headerlink" title="简写"></a>简写</h2><p><code>hexo n "我的博客"</code> == <code>hexo new "我的博客"</code> #新建文章<br><code>hexo p</code> == <code>hexo publish</code><br><code>hexo g</code> == <code>hexo generate</code>#生成<br><code>hexo s</code> == <code>hexo server</code> #启动服务预览<br><code>hexo d</code> == <code>hexo deploy</code>#部署</p>
<h2 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h2><p><code>hexo server</code> #Hexo 会监视文件变动并自动更新，您无须重启服务器。<br><code>hexo server -s</code> #静态模式<br><code>hexo server -p 5000</code> #更改端口<br><code>hexo server -i 192.168.1.1</code> #自定义 IP</p>
<p><code>hexo clean</code> #清除缓存 网页正常情况下可以忽略此条命令<br><code>hexo g</code> #生成静态网页<br><code>hexo d</code> #开始部署</p>
<h3 id="监视文件变动"><a href="#监视文件变动" class="headerlink" title="监视文件变动"></a>监视文件变动</h3><p><code>hexo generate</code> #使用 Hexo 生成静态文件快速而且简单<br><code>hexo generate --watch</code> #监视文件变动</p>
<h3 id="完成后部署"><a href="#完成后部署" class="headerlink" title="完成后部署"></a>完成后部署</h3><blockquote>
<p>两个命令的作用是相同的<br><code>hexo generate --deploy</code><br><code>hexo deploy --generate</code></p>
</blockquote>
<pre class="line-numbers language-none"><code class="language-none">hexo deploy -g`
`hexo server -g<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h2 id="草稿"><a href="#草稿" class="headerlink" title="草稿"></a>草稿</h2><pre class="line-numbers language-none"><code class="language-none">hexo publish [layout] &lt;title&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h2 id="模版"><a href="#模版" class="headerlink" title="模版"></a>模版</h2><p><code>hexo new "postName"</code> #新建文章<br><code>hexo new page "pageName"</code> #新建页面<br><code>hexo generate</code> #生成静态页面至public目录<br><code>hexo server</code> #开启预览访问端口（默认端口4000，’ctrl + c’关闭server）<br><code>hexo deploy</code> #将.deploy目录部署到GitHub</p>
<pre class="line-numbers language-none"><code class="language-none">hexo new [layout] &lt;title&gt;`
`hexo new photo "My Gallery"`
`hexo new "Hello World" --lang tw<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<table>
<thead>
<tr>
<th>变量</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>layout</td>
<td>布局</td>
</tr>
<tr>
<td>title</td>
<td>标题</td>
</tr>
<tr>
<td>date</td>
<td>文件建立日期</td>
</tr>
</tbody></table>
<pre class="line-numbers language-subunit" data-language="subunit"><code class="language-subunit">title: 使用Hexo搭建个人博客
layout: post
date: 2014-03-03 19:07:43
comments: true
categories: Blog
tags: [Hexo]
keywords: Hexo, Blog
description: 生命在于折腾，又把博客折腾到Hexo了。给Hexo点赞。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="模版（Scaffold）"><a href="#模版（Scaffold）" class="headerlink" title="模版（Scaffold）"></a>模版（Scaffold）</h2><pre class="line-numbers language-none"><code class="language-none">hexo new photo "My Gallery"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<table>
<thead>
<tr>
<th>变量</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>layout</td>
<td>布局</td>
</tr>
<tr>
<td>title</td>
<td>标题</td>
</tr>
<tr>
<td>date</td>
<td>文件建立日期</td>
</tr>
</tbody></table>
<h2 id="设置文章摘要"><a href="#设置文章摘要" class="headerlink" title="设置文章摘要"></a>设置文章摘要</h2><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">以上是文章摘要 <span class="token comment">&lt;!--more--&gt;</span> 以下是余下全文 <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h2 id="写作"><a href="#写作" class="headerlink" title="写作"></a>写作</h2><pre class="line-numbers language-none"><code class="language-none">hexo new page &lt;title&gt;`
`hexo new post &lt;title&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<table>
<thead>
<tr>
<th>变量</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>:title</td>
<td>标题</td>
</tr>
<tr>
<td>:year</td>
<td>建立的年份（4 位数）</td>
</tr>
<tr>
<td>:month</td>
<td>建立的月份（2 位数）</td>
</tr>
<tr>
<td>:i_month</td>
<td>建立的月份（去掉开头的零）</td>
</tr>
<tr>
<td>:day</td>
<td>建立的日期（2 位数）</td>
</tr>
<tr>
<td>:i_day</td>
<td>建立的日期（去掉开头的零）</td>
</tr>
</tbody></table>
<h3 id="推送到服务器上"><a href="#推送到服务器上" class="headerlink" title="推送到服务器上"></a>推送到服务器上</h3><pre class="line-numbers language-none"><code class="language-none">hexo n` #写文章
`hexo g` #生成
`hexo d` #部署 #可与`hexo g`合并为 `hexo d -g<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h2 id="报错"><a href="#报错" class="headerlink" title="报错"></a>报错</h2><h3 id="1-找不到git部署"><a href="#1-找不到git部署" class="headerlink" title="1.找不到git部署"></a>1.找不到git部署</h3><pre class="line-numbers language-subunit" data-language="subunit"><code class="language-subunit">ERROR Deployer not found: git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><strong>解决方法</strong></p>
<pre class="line-numbers language-none"><code class="language-none">npm install hexo-deployer-git --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="3-部署类型设置git"><a href="#3-部署类型设置git" class="headerlink" title="3.部署类型设置git"></a>3.部署类型设置git</h3><p>hexo 3.0 部署类型不再是<code>github</code>，<code>_config.yml</code> 中修改</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># Deployment</span>
<span class="token comment">## Docs: http://hexo.io/docs/deployment.html</span>
deploy:
  type: <span class="token function">git</span>
  repository: git@***.github.com:***/***.github.io.git
  branch: master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="4-xcodebuild"><a href="#4-xcodebuild" class="headerlink" title="4. xcodebuild"></a>4. xcodebuild</h3><p>xcode-select: error: tool ‘xcodebuild’ requires Xcode, but active developer directory ‘/Library/Developer/CommandLineTools’ is a command line tools instance</p>
<pre class="line-numbers language-none"><code class="language-none">npm install bcrypt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="5-RSS不显示"><a href="#5-RSS不显示" class="headerlink" title="5. RSS不显示"></a>5. RSS不显示</h3><h4 id="安装RSS插件"><a href="#安装RSS插件" class="headerlink" title="安装RSS插件"></a>安装RSS插件</h4><pre class="line-numbers language-none"><code class="language-none">npm install hexo-generator-feed --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h4 id="开启RSS功能"><a href="#开启RSS功能" class="headerlink" title="开启RSS功能"></a>开启RSS功能</h4><p>编辑hexo/_config.yml，添加如下代码：</p>
<pre class="line-numbers language-crmsh" data-language="crmsh"><code class="language-crmsh">rss: /atom.xml #rss地址  默认即可<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h4 id="开启评论"><a href="#开启评论" class="headerlink" title="开启评论"></a>开启评论</h4><p>1.我使用多说代替自带的评论，在<a href="http://duoshuo.com/">多说</a> 网站注册 &gt; 后台管理 &gt; 添加新站点 &gt; 工具 === 复制通用代码 里面有 short_name</p>
<ol>
<li>在根目录 <code>_config.yml</code> 添加一行 <code>disqus_shortname: jslite</code> 是在多说注册时产生的</li>
<li>复制到 <code>themes\landscape\layout\_partial\article.ejs</code><br>把</li>
</ol>
<pre class="line-numbers language-mojolicious" data-language="mojolicious"><code class="language-mojolicious">&lt;% if (!index &amp;&amp; post.comments &amp;&amp; config.disqus_shortname){ %&gt;
&lt;section id="comments"&gt;
&lt;div id="disqus_thread"&gt;
  &lt;noscript&gt;Please enable JavaScript to view the &lt;a href="//disqus.com/?ref_noscript"&gt;comments powered by Disqus.&lt;/a&gt;&lt;/noscript&gt;
&lt;/div&gt;
&lt;/section&gt;
&lt;% } %&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>改为</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">&lt;% if (!index &amp;&amp; post.comments &amp;&amp; config.disqus_shortname){ %&gt;
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>section</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>comments<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token comment">&lt;!-- 多说评论框 start --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ds-thread<span class="token punctuation">"</span></span> <span class="token attr-name">data-thread-key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&lt;%= post.layout %&gt;-&lt;%= post.slug %&gt;<span class="token punctuation">"</span></span> <span class="token attr-name">data-title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&lt;%= post.title %&gt;<span class="token punctuation">"</span></span> <span class="token attr-name">data-url</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&lt;%= page.permalink %&gt;<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token comment">&lt;!-- 多说评论框 end --&gt;</span>
    <span class="token comment">&lt;!-- 多说公共JS代码 start (一个网页只需插入一次) --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
    <span class="token keyword">var</span> duoshuoQuery <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">short_name</span><span class="token operator">:</span><span class="token string">'&lt;%= config.disqus_shortname %&gt;'</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
      <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">var</span> ds <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'script'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        ds<span class="token punctuation">.</span>type <span class="token operator">=</span> <span class="token string">'text/javascript'</span><span class="token punctuation">;</span>ds<span class="token punctuation">.</span>async <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        ds<span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token punctuation">(</span>document<span class="token punctuation">.</span>location<span class="token punctuation">.</span>protocol <span class="token operator">==</span> <span class="token string">'https:'</span> <span class="token operator">?</span> <span class="token string">'https:'</span> <span class="token operator">:</span> <span class="token string">'http:'</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'//static.duoshuo.com/embed.js'</span><span class="token punctuation">;</span>
        ds<span class="token punctuation">.</span>charset <span class="token operator">=</span> <span class="token string">'UTF-8'</span><span class="token punctuation">;</span>
        <span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">'head'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> 
         <span class="token operator">||</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">'body'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>ds<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
    <span class="token comment">&lt;!-- 多说公共JS代码 end --&gt;</span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>section</span><span class="token punctuation">&gt;</span></span>
&lt;% } %&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Blog</tag>
      </tags>
  </entry>
  <entry>
    <title>万能的格式转换工具File Converter</title>
    <url>/2022/08/28/%E4%B8%87%E8%83%BD%E7%9A%84%E6%A0%BC%E5%BC%8F%E8%BD%AC%E6%8D%A2%E5%B7%A5%E5%85%B7File%20Converter/</url>
    <content><![CDATA[<h1 id="万能的格式转换工具File-Converter"><a href="#万能的格式转换工具File-Converter" class="headerlink" title="万能的格式转换工具File Converter"></a>万能的格式转换工具File Converter</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>今天想把MP4转换成MP3,去找了以下工具，结果被我找到宝了！</p>
<p>很多很多很多格式的文件。只需要鼠标右键就可以直接转换！非常简单粗暴。</p>
<p>重要的还是免费开源！</p>
<h2 id="支持的格式"><a href="#支持的格式" class="headerlink" title="支持的格式"></a>支持的格式</h2><table>
<thead>
<tr>
<th>支持的输出格式</th>
<th>兼容的输入格式</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>声音的</td>
<td>flac、aac、ogg、mp3、wav</td>
<td>3gp, aiff, 猿, avi, bik, cda, flac, flv, m4a, mkv, mov, mp3, mp4, oga, ogg, wav, webm, wma, wmv</td>
</tr>
<tr>
<td>视频</td>
<td>webm, mkv, mp4, ogv, avi, gif</td>
<td>3gp、avi、bik、flv、gif、m4v、mkv、mp4、mpeg、mov、ogv、webm、wmv</td>
</tr>
<tr>
<td>图片</td>
<td>png, jpg, ico, webp</td>
<td>bmp、exr、ico、jpg、jpeg、png、psd、svg、tiff、tga、webp、pdf、doc<em>、docx</em>、odt<em>、odp</em>、ods<em>、ppt</em>、pptx<em>、xls</em>、xlsx*</td>
</tr>
<tr>
<td>文档</td>
<td>pdf</td>
<td>doc<em>、docx</em>、odt<em>、odp</em>、ods<em>、ppt</em>、pptx<em>、xls</em>、xlsx*、bmp、exr、ico、jpg、jpeg、png、psd、svg、tiff、tga</td>
</tr>
</tbody></table>
<h2 id="下载地址"><a href="#下载地址" class="headerlink" title="下载地址"></a>下载地址</h2><p>File Converter <a href="https://file-converter.org/">点击下载</a></p>
]]></content>
      <categories>
        <category>好用的软件</category>
      </categories>
      <tags>
        <tag>软件</tag>
      </tags>
  </entry>
  <entry>
    <title>修改Android模拟器RAM大小的方法</title>
    <url>/2022/05/20/%E4%BF%AE%E6%94%B9Android%E6%A8%A1%E6%8B%9F%E5%99%A8RAM%E5%A4%A7%E5%B0%8F%E7%9A%84%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p>想在在Mca上玩ウマ娘，安装Android studio 发现内存不太够很卡<br>用以下方法可以改善</p>
<h2 id="修改Android模拟器RAM大小的方法"><a href="#修改Android模拟器RAM大小的方法" class="headerlink" title="修改Android模拟器RAM大小的方法"></a>修改Android模拟器RAM大小的方法</h2><p>安卓开发时候会遇到这种问题：Warning: requested ram_size 2048M too big, reduced to 1024M，这时候可以通过修改Android模拟器的RAM大小来解决（Android模拟器启动速度慢，运行也很缓慢，也可以用这个方法来加速）。</p>
<p>1.找到AVD的安装路径：.android\avd\AVD的名字.avd（如：D:\AVD.android\avd\PHONE.avd）</p>
<p>2.xxx.avd目录下的congfig.ini就是模拟器设备的配置文件：</p>
<p>   用记事本打开xxx.avd目录下的congfig.ini</p>
<p>   找到 hw.ramSize=2048 这句 ，把后面的2048修改得小一点就行（1024或512）    </p>
<p>另外，附上网上找到的congfig.ini内容介绍：</p>
<pre class="line-numbers language-none"><code class="language-none">avd.ini.encoding=ISO-8859-1  #字符编码
hw.dPad=no                            #是否要让手机支持DPad键，默认为yes，表示支持。DPad键就是手机上的那些Home键、返回键、电话键、电源键。
hw.lcd.density=240                 #是屏幕的密度

sdcard.size=16M                    #SD卡的大小
hw.cpu.arch=arm                   #CPU的结构类型
hw.device.hash=-1812631727          #硬件的某种值，可能是设备码之类的

hw.camera.front=none
hw.camera.back=none         #背部相机，还有相关的一系列设置
disk.dataPartition.size=200M   #隔离缓存设置
skin.path=480×800                  #模拟器皮肤路径
skin.dynamic=yes                    #模拟器皮肤是否动态设置
hw.keyboard=yes                    #使用按键输入
hw.ramSize=512                    # 模拟器的RAM运行内存大小
hw.device.manufacturer=Google    #设备厂商（所有人）
hw.sdCard=yes                       #是否使用sd卡
hw.mainKeys=yes                  #是否虚拟键完全隐藏 1：隐藏；0：不
hw.accelerometer=yes           #是否使用加速计等相关设置
skin.name=480×800               #分辨率
abi.type=armeabi
hw.trackBall=yes                    #是否使用跟踪球
hw.device.name=Nexus One   #设备名称
hw.battery=no                          #是否使用电池
image.sysdir.1=platforms\android-10\images\             # 模拟器的映像文件路径

hw.sensors.proximity=yes       #是否使用接近传感器
hw.sensors.orientation=no
hw.audioInput=yes                   #是否记入默认值，然后输入

hw.gps=yes                              #是否使用全球定位
vm.heapSize=512                    # 虚拟机默认堆大小<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>————————————————<br>版权声明：本文为CSDN博主「caide_huang」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href="https://blog.csdn.net/qq_33701857/article/details/50978613">https://blog.csdn.net/qq_33701857/article/details/50978613</a></p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>模拟器</tag>
      </tags>
  </entry>
  <entry>
    <title>创建Ubuntu云服务器以及配置Windows访问远程桌面的方法</title>
    <url>/2022/08/26/%E5%88%9B%E5%BB%BAUbuntu%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%BB%A5%E5%8F%8A%E9%85%8D%E7%BD%AEWindows%E8%AE%BF%E9%97%AE%E8%BF%9C%E7%A8%8B%E6%A1%8C%E9%9D%A2%E7%9A%84%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h1 id="创建Ubuntu云服务器以及配置Windows访问远程桌面的方法"><a href="#创建Ubuntu云服务器以及配置Windows访问远程桌面的方法" class="headerlink" title="创建Ubuntu云服务器以及配置Windows访问远程桌面的方法"></a>创建Ubuntu云服务器以及配置Windows访问远程桌面的方法</h1><p>WINDOWS电脑用XRDP远程连接甲骨文云服务器 - UBUNTU可视化图形界面</p>
<p>有了可视化界面操作更加方便直观，分享以下我的方法。</p>
<h2 id="1-准备工作"><a href="#1-准备工作" class="headerlink" title="1.准备工作"></a>1.准备工作</h2><p>下载安装几款SSH工具。</p>
<p>前几天推荐了FinalShell，但是不知道为什么始终连接不到云服务器，索性换工具。</p>
<p>1.下载安装 WinSCP <a href="https://winscp.net/eng/download.php">点击下载</a></p>
<p>2.下载安装 PuTTY <a href="https://www.putty.org/">点击下载</a></p>
<h2 id="2-连接配置"><a href="#2-连接配置" class="headerlink" title="2.连接配置"></a>2.连接配置</h2><h3 id="2-1-WinSCP配置"><a href="#2-1-WinSCP配置" class="headerlink" title="2-1.WinSCP配置"></a>2-1.WinSCP配置</h3><p>WinSCP安装好了之后新建站点，</p>
<p>协议选择SFTP</p>
<p>主机名填入公网IP地址</p>
<p>用户名: ubuntu</p>
<p>端口:22</p>
<p>密码不用填</p>
<p>然后点击高级</p>
<p>Shell 选择 sudo su -</p>
<p>然后点击SSh下面的验证➡密匙文件，选择自己的SSh密匙，然后进行ppk的转换，保存到自己知道的地方。最后确定即可</p>
<h5 id="在WinSCP上修改登录信息"><a href="#在WinSCP上修改登录信息" class="headerlink" title="在WinSCP上修改登录信息"></a>在WinSCP上修改登录信息</h5><p>在登录信息中选择 <strong>编辑 –&gt; 高级 –&gt; SFTP</strong> 修改如标注所示</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> /usr/lib/openssh/sftp-server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="2-2-PuTTY配置"><a href="#2-2-PuTTY配置" class="headerlink" title="2-2.PuTTY配置"></a>2-2.PuTTY配置</h3><p>1.首先在Session里面配置好公网IP</p>
<p><img src="/images/20220826/ubuntu/2.png"></p>
<p>2.然后选择SSH➡Auth选择好转换过后的ppk密匙</p>
<p><img src="/images/20220826/ubuntu/3.png"></p>
<p>3.配置好之后点击Open接着选择Accept</p>
<p>命令窗口会显示登录用户</p>
<p>输入：ubuntu</p>
<p>成功连接!</p>
<h2 id="3-安装配置Ubuntu桌面系统"><a href="#3-安装配置Ubuntu桌面系统" class="headerlink" title="3.安装配置Ubuntu桌面系统"></a>3.安装配置Ubuntu桌面系统</h2><h3 id="1-更新服务器，并安装Ubuntu桌面系统-GNOME"><a href="#1-更新服务器，并安装Ubuntu桌面系统-GNOME" class="headerlink" title="1.更新服务器，并安装Ubuntu桌面系统(GNOME):"></a>1.更新服务器，并安装Ubuntu桌面系统(GNOME):</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> update
<span class="token function">sudo</span> <span class="token function">apt-get</span> upgrade
<span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> tasksel <span class="token comment">#选择GNOME Flashback</span>
<span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> ubuntu-desktop<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="2-安装并打开xrdp服务"><a href="#2-安装并打开xrdp服务" class="headerlink" title="2.安装并打开xrdp服务"></a>2.安装并打开xrdp服务</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> xrdp 

<span class="token function">sudo</span> systemctl <span class="token builtin class-name">enable</span> xrdp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h3 id="3-添加3389端口"><a href="#3-添加3389端口" class="headerlink" title="3.添加3389端口"></a>3.添加3389端口</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> iptables <span class="token parameter variable">-I</span> INPUT <span class="token parameter variable">-p</span> tcp <span class="token parameter variable">--dport</span> <span class="token number">3389</span> <span class="token parameter variable">-j</span> ACCEPT 

<span class="token function">sudo</span> netfilter-persistent save<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>接着我们在甲骨云添加安全规则#3389</p>
<h3 id="4-为xdrp创建一个用户"><a href="#4-为xdrp创建一个用户" class="headerlink" title="4.为xdrp创建一个用户"></a>4.为xdrp创建一个用户</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> adduser tutu <span class="token comment">#这一步最后一个单词是自己用户名，然后输入密码。后面的名字都可以回车跳过</span>

<span class="token function">sudo</span> <span class="token function">usermod</span> <span class="token parameter variable">-G</span> xrdp tutu <span class="token comment">#最后一个单词是自己用户名，保持一致</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h3 id="5-重启服务器"><a href="#5-重启服务器" class="headerlink" title="5.重启服务器"></a>5.重启服务器</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">reboot</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>最后修复一个启动需要输入密码的bug</p>
<p>—BUG修复： 第一个命令，打开文本编辑器：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">nano</span> /etc/polkit-1/localauthority.conf.d/02-allow-colord.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>输入atrl+x 保存</p>
<h3 id="6-连接到桌面系统"><a href="#6-连接到桌面系统" class="headerlink" title="6.连接到桌面系统"></a>6.连接到桌面系统</h3><h4 id="3-6-1先打开PuTTY配置好2-2的内容，重点来了"><a href="#3-6-1先打开PuTTY配置好2-2的内容，重点来了" class="headerlink" title="3-6-1先打开PuTTY配置好2-2的内容，重点来了"></a>3-6-1先打开PuTTY配置好2-2的内容，重点来了</h4><p>最后需要增加一条隧道</p>
<p>点击Tunnel</p>
<p>添加本机</p>
<p>127.0.0.1:3399</p>
<p>然后公网IP</p>
<p>xxx.xxx.xxx.xx:3389</p>
<p>然后点击Add</p>
<p>最后就能点击连接进主机了。</p>
<p>登录ubuntu</p>
<p><img src="/images/20220826/ubuntu/4.png"></p>
<h4 id="3-6-2"><a href="#3-6-2" class="headerlink" title="3-6-2"></a>3-6-2</h4><p>Windows打开远程连接</p>
<p>输入</p>
<p>127.0.0.1:3399</p>
<p>连接就能成功</p>
<p>然后输入开始3-4步骤设置的用户名和密码然后就完成了。</p>
<h2 id="踩坑和解决方法"><a href="#踩坑和解决方法" class="headerlink" title="踩坑和解决方法"></a>踩坑和解决方法</h2><ul>
<li>在安装<a href="https://so.csdn.net/so/search?q=Ubuntu&amp;spm=1001.2101.3001.7020">Ubuntu</a>系统时，第一次没有设置root用户密码，此时进入root用户需要重新设置密码，才能进入root用户。</li>
</ul>
<p>方法：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">passwd</span> root<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>然后修改密码即可，这样就能重新进入root用户了。</p>
<ul>
<li><p>解决linux下sudo更改文件权限报错xxxis not in the sudoers file. This incident will be reported.</p>
<p>Linux中普通用户用sudo执行命令时报”xxx is not in the sudoers file.This incident will be reported”错误，解决方法就是在/etc/sudoers文件里给该用户添加权限。如下：</p>
<p>1.切换到root用户下<br>方法为直接在命令行输入：su，然后输入密码（即你的登录密码，且密码默认不可见）。</p>
<p>2./etc/sudoers文件默认是只读的，对root来说也是，因此需先添加sudoers文件的写权限,命令是:<br>即执行操作：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">chmod</span> u+w /etc/sudoers<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>3.编辑sudoers文件<br>即执行：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vi</span> /etc/sudoers<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>找到这行 </p>
<p>root ALL=(ALL) ALL</p>
<p>在他下面添加</p>
<p>xxx ALL=(ALL) ALL (这里的xxx是你的用户名)</p>
<p>ps:这里说下你可以sudoers添加下面四行中任意一条<br>youuser ALL=(ALL) ALL<br>%youuser ALL=(ALL) ALL<br>youuser ALL=(ALL) NOPASSWD: ALL<br>%youuser ALL=(ALL) NOPASSWD: ALL</p>
<p>第一行:允许用户youuser执行sudo命令(需要输入密码).<br>第二行:允许用户组youuser里面的用户执行sudo命令(需要输入密码).<br>第三行:允许用户youuser执行sudo命令,并且在执行的时候不输入密码.<br>第四行:允许用户组youuser里面的用户执行sudo命令,并且在执行的时候不输入密码.</p>
<p>4.撤销sudoers文件写权限,命令:</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">chmod</span> u-w /etc/sudoers<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
</ul>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://ja.linuxcapable.com/how-to-install-tasksel-on-ubuntu-22-04-lts/#How_to_Launch_TaskSel_in_Terminal">Ubuntu22.04LTSにTaskselをインストールする方法</a></p>
<p><a href="https://blog.csdn.net/sinat_36118270/article/details/62899093">解决linux下sudo更改文件权限报错xxxis not in the sudoers file. This incident will be reported.</a></p>
]]></content>
      <categories>
        <category>服务器</category>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>教程</tag>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>周末约会去哪里,到池袋去逛逛?</title>
    <url>/2022/08/24/%E5%91%A8%E6%9C%AB%E7%BA%A6%E4%BC%9A%E5%8E%BB%E5%93%AA%E9%87%8C%EF%BC%9F%E5%88%B0%E6%B1%A0%E8%A2%8B%E5%8E%BB%E9%80%9B%E9%80%9B%EF%BC%9F/</url>
    <content><![CDATA[<h1 id="周末约会去哪里？到池袋去逛逛？"><a href="#周末约会去哪里？到池袋去逛逛？" class="headerlink" title="周末约会去哪里？到池袋去逛逛？"></a>周末约会去哪里？到池袋去逛逛？</h1><p>日本 东京都内有一个 叫池袋的地方。</p>
<p> 有很多地大型设施和购物中心。以前刚来日本在池袋打了3年工，还是比较熟悉(<em>/ω＼</em>)</p>
<p>治安差也是我对池袋的印象之一。</p>
<p>每个月22日我都会和我们家那位去玩，这次就一起去了池袋的サンシャイン水族館。</p>
<h2 id="1-サンシャイン水族館（阳光水族馆）"><a href="#1-サンシャイン水族館（阳光水族馆）" class="headerlink" title="1.サンシャイン水族館（阳光水族馆）"></a>1.サンシャイン水族館（阳光水族馆）</h2><p>阳光水族馆共两层，室内设有多个水族箱，另有名为”海洋花园”的室外展区。</p>
<p>一层是来自世界各地的海洋生物。在这片湛蓝的海水之中，您几乎会忘记自己正身处东京。穿过幽暗的隧道，充分感受奇妙的氛围，耳边传来的深海音效更增添了置身海底的真实感。</p>
<p>二层以湖泊和河流为主题，同样令人叹为观止，展示了包括乌龟、青蛙和各种鱼群等淡水生物。</p>
<p>水族馆充分利用大厦楼顶的地理位置，设置了一个户外环形水槽。拾步户外时可以看到海狮和企鹅等生物。</p>
<p>之前也只是被朋友推荐过具体怎么样这次决定去看看！</p>
<p>从家到池袋电车一小时，从东口出发还需要走10分钟左右。</p>
<p>我们家那位用了会社的优待只花了1900円一个人的门票，还是值得表扬以下哈哈╰(<em>°▽°</em>)╯</p>
<p>进去之后先是一个类似花园的走廊。</p>
<p><img src="/images/20220823/jinianri/IMG_6741.jpg"></p>
<p><img src="/images/20220823/jinianri/IMG_6749.jpg"></p>
<p>平日人不多，中间还有一个小姐姐在和鱼玩。</p>
<p><img src="/images/20220823/jinianri/IMG_6768.jpg"></p>
<p>亚马逊地区我最喜欢。</p>
<p><img src="/images/20220823/jinianri/IMG_6787.jpg"></p>
<p>最近我是不是照相技术渐长？</p>
<p><img src="/images/20220823/jinianri/IMG_6808.jpg"></p>
<p>其实在里面就只逛了10来分钟顺路就来到庭院了。</p>
<p>然后这里有这个水族馆比较有名的企鹅？*好像是</p>
<p>然而我就看到一只在那里游。</p>
<p>在都市高楼游泳的企鹅别具一番。</p>
<p><img src="/images/20220823/jinianri/IMG_6826.jpg"></p>
<p>然后就，没了？</p>
<p>好吧，我以为很大的水族馆可能加起来特就20分钟不到就没了，应该是我来日本见过最小的水族馆了。本来还有表演，最近好像也终止了，只能说很遗憾。</p>
<h2 id="2-コニカミノルタ-プラネタリウム満天-池袋"><a href="#2-コニカミノルタ-プラネタリウム満天-池袋" class="headerlink" title="2.コニカミノルタ - プラネタリウム満天(池袋)"></a>2.コニカミノルタ - プラネタリウム満天(池袋)</h2><p>如果你有水族馆的门票其实可以享受20%的折扣来体验这个设施，就在水族馆的旁边。</p>
<p>打算去试一试，进去有一个圆顶，可以看星星，大概是40分钟左右，想放松的可以来试试，我们家那位进去10分钟就开始呼呼大睡了，结束才起来ಠ_ಠ</p>
<p>有沙发床但是只有5个位置，根本就抢不到。 一般的座位一个人1400円左右。</p>
<h2 id="3-逛街，吃饭"><a href="#3-逛街，吃饭" class="headerlink" title="3.逛街，吃饭"></a>3.逛街，吃饭</h2><p>都结束之后，楼下喜欢宝可梦的可以去一下，有宝可梦中心，甚至还能和火箭队对战w</p>
<p><img src="/images/20220823/jinianri/IMG_6850.jpg"></p>
<p>好家伙，4个人在那里搓手机，应该是宝可梦GO</p>
<p><img src="/images/20220823/jinianri/IMG_6842.jpg"></p>
<p>最后这个里面还有一个万代的 扭蛋店，大的离谱。我也是第一次见到这么大的扭蛋店。感觉什么都有。扭了一个最近喜欢的动漫，「夏日重现」感觉挺火的，只剩下一个了。出来了一个妹妹，哎。我只想要潮。(╯▽╰ )</p>
<p>池袋，感觉就是中国人的聚集地，在北口，有很多中华料理店，这次去了一个叫四季香的店，感觉还行，量很大。导致根本就没吃饭。</p>
<p><img src="/images/20220823/jinianri/IMG_6858.jpg"></p>
<p>鳕鱼</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>池袋还是挺适合约会和购物的。但是如果让我打个分。</p>
<p>1.サンシャイン水族館（阳光水族馆）</p>
<p>★★★☆☆</p>
<p>2.コニカミノルタ - プラネタリウム満天(池袋)</p>
<p>★★★☆☆</p>
<p>原因就是我觉得很小。很一般吧。</p>
<p>不过没去过的还是推荐去玩玩。</p>
<p>希望以后能坚持写下去日常博文吧，因为我比较懒（；´д｀）ゞ</p>
]]></content>
      <categories>
        <category>旅行</category>
        <category>日常生活记录</category>
      </categories>
      <tags>
        <tag>日本</tag>
        <tag>记录</tag>
      </tags>
  </entry>
  <entry>
    <title>如何利用Hexo如何写文章</title>
    <url>/2022/08/19/%E5%A6%82%E4%BD%95%E5%88%A9%E7%94%A8Hexo%E5%A6%82%E4%BD%95%E5%86%99%E6%96%87%E7%AB%A0/</url>
    <content><![CDATA[<h1 id="如何利用Hexo如何写文章"><a href="#如何利用Hexo如何写文章" class="headerlink" title="如何利用Hexo如何写文章"></a>如何利用Hexo如何写文章</h1><p>记录一下怎么开始用Hexo写文章。</p>
<p>一般Markdown文章都放在博客目录下的 `「\source _posts」里面</p>
<p><strong>新建新文章</strong></p>
<pre class="line-numbers language-none"><code class="language-none">hexo n ""文章题名""<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>然后配置选项和分类之类的参数。</p>
<h3 id="Front-matter-选项详解"><a href="#Front-matter-选项详解" class="headerlink" title="Front-matter 选项详解"></a>Front-matter 选项详解</h3><p><code>Front-matter</code> 选项中的所有内容均为<strong>非必填</strong>的。但仍然建议至少填写 <code>title</code> 和 <code>date</code> 的值。</p>
<table>
<thead>
<tr>
<th align="left">配置选项</th>
<th align="left">默认值</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">title</td>
<td align="left"><code>Markdown</code> 的文件标题</td>
<td align="left">文章标题，强烈建议填写此选项</td>
</tr>
<tr>
<td align="left">date</td>
<td align="left">文件创建时的日期时间</td>
<td align="left">发布时间，强烈建议填写此选项，且最好保证全局唯一</td>
</tr>
<tr>
<td align="left">author</td>
<td align="left">根 <code>_config.yml</code> 中的 <code>author</code></td>
<td align="left">文章作者</td>
</tr>
<tr>
<td align="left">img</td>
<td align="left"><code>featureImages</code> 中的某个值</td>
<td align="left">文章特征图，推荐使用图床(腾讯云、七牛云、又拍云等)来做图片的路径.如: <code>http://xxx.com/xxx.jpg</code></td>
</tr>
<tr>
<td align="left">top</td>
<td align="left"><code>true</code></td>
<td align="left">推荐文章（文章是否置顶），如果 <code>top</code> 值为 <code>true</code>，则会作为首页推荐文章</td>
</tr>
<tr>
<td align="left">hide</td>
<td align="left"><code>false</code></td>
<td align="left">隐藏文章，如果<code>hide</code>值为<code>true</code>，则文章不会在首页显示</td>
</tr>
<tr>
<td align="left">cover</td>
<td align="left"><code>false</code></td>
<td align="left"><code>v1.0.2</code>版本新增，表示该文章是否需要加入到首页轮播封面中</td>
</tr>
<tr>
<td align="left">coverImg</td>
<td align="left">无</td>
<td align="left"><code>v1.0.2</code>版本新增，表示该文章在首页轮播封面需要显示的图片路径，如果没有，则默认使用文章的特色图片</td>
</tr>
<tr>
<td align="left">password</td>
<td align="left">无</td>
<td align="left">文章阅读密码，如果要对文章设置阅读验证密码的话，就可以设置 <code>password</code> 的值，该值必须是用 <code>SHA256</code> 加密后的密码，防止被他人识破。前提是在主题的 <code>config.yml</code> 中激活了 <code>verifyPassword</code> 选项</td>
</tr>
<tr>
<td align="left">toc</td>
<td align="left"><code>true</code></td>
<td align="left">是否开启 TOC，可以针对某篇文章单独关闭 TOC 的功能。前提是在主题的 <code>config.yml</code> 中激活了 <code>toc</code> 选项</td>
</tr>
<tr>
<td align="left">mathjax</td>
<td align="left"><code>false</code></td>
<td align="left">是否开启数学公式支持 ，本文章是否开启 <code>mathjax</code>，且需要在主题的 <code>_config.yml</code> 文件中也需要开启才行</td>
</tr>
<tr>
<td align="left">summary</td>
<td align="left">无</td>
<td align="left">文章摘要，自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要</td>
</tr>
<tr>
<td align="left">categories</td>
<td align="left">无</td>
<td align="left">文章分类，本主题的分类表示宏观上大的分类，只建议一篇文章一个分类</td>
</tr>
<tr>
<td align="left">tags</td>
<td align="left">无</td>
<td align="left">文章标签，一篇文章可以多个标签</td>
</tr>
<tr>
<td align="left">keywords</td>
<td align="left">文章标题</td>
<td align="left">文章关键字，SEO 时需要</td>
</tr>
<tr>
<td align="left">reprintPolicy</td>
<td align="left">cc_by</td>
<td align="left">文章转载规则， 可以是 cc_by, cc_by_nd, cc_by_sa, cc_by_nc, cc_by_nc_nd, cc_by_nc_sa, cc0, noreprint 或 pay 中的一个</td>
</tr>
</tbody></table>
<blockquote>
<p><strong>注意</strong>:</p>
<ol>
<li>如果 <code>img</code> 属性不填写的话，文章特色图会根据文章标题的 <code>hashcode</code> 的值取余，然后选取主题中对应的特色图片，从而达到让所有文章都的特色图<strong>各有特色</strong>。</li>
<li><code>date</code> 的值尽量保证每篇文章是唯一的，因为本主题中 <code>Gitalk</code> 和 <code>Gitment</code> 识别 <code>id</code> 是通过 <code>date</code> 的值来作为唯一标识的。</li>
<li>如果要对文章设置阅读验证密码的功能，不仅要在 Front-matter 中设置采用了 SHA256 加密的 password 的值，还需要在主题的 <code>_config.yml</code> 中激活了配置。有些在线的 SHA256 加密的地址，可供使用：<a href="http://tool.oschina.net/encrypt?type=2">开源中国在线工具</a>、<a href="http://encode.chahuo.com/">chahuo</a>、<a href="http://tool.chinaz.com/tools/hash.aspx">站长工具</a>。</li>
</ol>
</blockquote>
<p>以下为文章的 <code>Front-matter</code> 示例。</p>
<h3 id="最简示例"><a href="#最简示例" class="headerlink" title="最简示例"></a>最简示例</h3><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span>
<span class="token key atrule">title</span><span class="token punctuation">:</span> 基于Hexo的hexo<span class="token punctuation">-</span>theme<span class="token punctuation">-</span>matery主题搭建博客并优化
<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2019-10-03 14:25:00</span>
<span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="最全示例"><a href="#最全示例" class="headerlink" title="最全示例"></a>最全示例</h3><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span>
<span class="token key atrule">title</span><span class="token punctuation">:</span> 基于Hexo的hexo<span class="token punctuation">-</span>theme<span class="token punctuation">-</span>matery主题搭建博客并优化
<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2019-12-30 09:25:00</span>
<span class="token key atrule">author</span><span class="token punctuation">:</span> 17lai.site
<span class="token key atrule">img</span><span class="token punctuation">:</span> /medias/cover/hexo.jpg
<span class="token key atrule">top</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
<span class="token key atrule">cover</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
<span class="token key atrule">coverImg</span><span class="token punctuation">:</span> /medias/cover/hexo.jpg
<span class="token key atrule">password</span><span class="token punctuation">:</span> 8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92
<span class="token key atrule">toc</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>
<span class="token key atrule">mathjax</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>
<span class="token key atrule">summary</span><span class="token punctuation">:</span> 这是你自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要
<span class="token key atrule">categories</span><span class="token punctuation">:</span> Hexo
<span class="token key atrule">keywords</span><span class="token punctuation">:</span> Hexo GitHub blog
<span class="token key atrule">tags</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> Hexo
  <span class="token punctuation">-</span> Blog
  <span class="token punctuation">-</span> GitHub
<span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="新建文章模板修改"><a href="#新建文章模板修改" class="headerlink" title="新建文章模板修改"></a>新建文章模板修改</h3><p>首先为了新建文章方便，我们可以修改一下文章模板，建议将<code>/scaffolds/post.md</code>修改为如下代码：</p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span>
<span class="token key atrule">title</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">{</span> title <span class="token punctuation">}</span><span class="token punctuation">}</span>
<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">{</span> date <span class="token punctuation">}</span><span class="token punctuation">}</span>
<span class="token key atrule">author</span><span class="token punctuation">:</span> 
<span class="token key atrule">img</span><span class="token punctuation">:</span> 
<span class="token key atrule">coverImg</span><span class="token punctuation">:</span> 
<span class="token key atrule">top</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>
<span class="token key atrule">cover</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>
<span class="token key atrule">toc</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
<span class="token key atrule">mathjax</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>
<span class="token key atrule">password</span><span class="token punctuation">:</span>
<span class="token key atrule">summary</span><span class="token punctuation">:</span>
<span class="token key atrule">tags</span><span class="token punctuation">:</span>
<span class="token key atrule">categories</span><span class="token punctuation">:</span>
<span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>这样新建文章后 一些<code>Front-matter</code>参数不用你自己补充了，修改对应信息就可以了。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>来源: 夜法之书<br>文章作者: 夜法之书<br>文章链接: <a href="https://blog.17lai.site/posts/40300608/#%E6%96%B0%E5%BB%BA404%E9%A1%B5">https://blog.17lai.site/posts/40300608/#%E6%96%B0%E5%BB%BA404%E9%A1%B5</a></p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>教程</tag>
        <tag>hexo</tag>
        <tag>blog</tag>
      </tags>
  </entry>
  <entry>
    <title>如何在Ubuntu里安装Docker同时为 Docker 安装图形化操作界面</title>
    <url>/2022/08/26/%E5%A6%82%E4%BD%95%E5%9C%A8Ubuntu%E9%87%8C%E5%AE%89%E8%A3%85Docker/</url>
    <content><![CDATA[<h1 id="如何在Ubuntu里安装Docker同时为-Docker-安装图形化操作界面-Portainer"><a href="#如何在Ubuntu里安装Docker同时为-Docker-安装图形化操作界面-Portainer" class="headerlink" title="如何在Ubuntu里安装Docker同时为 Docker 安装图形化操作界面 Portainer"></a>如何在Ubuntu里安装Docker同时为 Docker 安装图形化操作界面 Portainer</h1><h2 id="安装Docker"><a href="#安装Docker" class="headerlink" title="安装Docker"></a>安装Docker</h2><h3 id="1-更新-apt-工具及索引，以支持-https-存储库"><a href="#1-更新-apt-工具及索引，以支持-https-存储库" class="headerlink" title="1.更新 apt 工具及索引，以支持 https 存储库"></a>1.<strong>更新 apt 工具及索引，以支持 https 存储库</strong></h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> update<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> <span class="token punctuation">\</span>
    ca-certificates <span class="token punctuation">\</span>
    <span class="token function">curl</span> <span class="token punctuation">\</span>
    gnupg <span class="token punctuation">\</span>
    lsb-release<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="2-添加-Docker-官方-GPG-密钥（用于签名-x2F-验证、加密-x2F-解密）"><a href="#2-添加-Docker-官方-GPG-密钥（用于签名-x2F-验证、加密-x2F-解密）" class="headerlink" title="2.添加 Docker 官方 GPG 密钥（用于签名/验证、加密/解密）"></a>2.<strong>添加 Docker 官方 GPG 密钥（用于签名/验证、加密/解密）</strong></h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> <span class="token parameter variable">-fsSL</span> https://download.docker.com/linux/ubuntu/gpg <span class="token operator">|</span> <span class="token function">sudo</span> gpg <span class="token parameter variable">--dearmor</span> <span class="token parameter variable">-o</span> /usr/share/keyrings/docker-archive-keyring.gpg<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>



<h3 id="3-设置-stable-版稳定存储库（区别于夜间版-x2F-测试版-nightly-x2F-test-）"><a href="#3-设置-stable-版稳定存储库（区别于夜间版-x2F-测试版-nightly-x2F-test-）" class="headerlink" title="3.设置 stable 版稳定存储库（区别于夜间版/测试版 nightly / test ）"></a>3.<strong>设置 stable 版稳定存储库（区别于夜间版/测试版 nightly / test ）</strong></h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token punctuation">\</span>
  <span class="token string">"deb [arch=<span class="token variable"><span class="token variable">$(</span>dpkg --print-architecture<span class="token variable">)</span></span> signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu \
  <span class="token variable"><span class="token variable">$(</span>lsb_release <span class="token parameter variable">-cs</span><span class="token variable">)</span></span> stable"</span> <span class="token operator">|</span> <span class="token function">sudo</span> <span class="token function">tee</span> /etc/apt/sources.list.d/docker.list <span class="token operator">&gt;</span> /dev/null<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>



<h3 id="4-更新-apt-工具及索引，并安装-Docker"><a href="#4-更新-apt-工具及索引，并安装-Docker" class="headerlink" title="4.更新 apt 工具及索引，并安装 Docker"></a>4.<strong>更新 apt 工具及索引，并安装 Docker</strong></h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> update

<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> docker-ce docker-ce-cli containerd.io<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p><strong>验证 Docker Engine 是否正确安装（显示 “Hello from Docker!” 即为成功安装）</strong></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">docker</span> run hello-world<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h2 id="安装Portainer"><a href="#安装Portainer" class="headerlink" title="安装Portainer"></a>安装Portainer</h2><h3 id="1-创建-Portainer-Server-存储数据库的卷"><a href="#1-创建-Portainer-Server-存储数据库的卷" class="headerlink" title="1.创建 Portainer Server 存储数据库的卷"></a>1.<strong>创建 Portainer Server 存储数据库的卷</strong></h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">docker</span> volume create portainer_data<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>​    </p>
<h3 id="2-下载并安装-Portainer-Server-容器"><a href="#2-下载并安装-Portainer-Server-容器" class="headerlink" title="2.下载并安装 Portainer Server 容器"></a><strong>2.下载并安装 Portainer Server 容器</strong></h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">-p</span> <span class="token number">8000</span>:8000 <span class="token parameter variable">-p</span> <span class="token number">9443</span>:9443 <span class="token parameter variable">--name</span> portainer <span class="token punctuation">\</span>
    <span class="token parameter variable">--restart</span><span class="token operator">=</span>always <span class="token punctuation">\</span>
    <span class="token parameter variable">-v</span> /var/run/docker.sock:/var/run/docker.sock <span class="token punctuation">\</span>
    <span class="token parameter variable">-v</span> portainer_data:/data <span class="token punctuation">\</span>
    portainer/portainer-ce:latest<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h3 id="3-查看-Docker-容器状态（NAMES-标签出现-portainer-x2F-portainer-ce-则成功运行）"><a href="#3-查看-Docker-容器状态（NAMES-标签出现-portainer-x2F-portainer-ce-则成功运行）" class="headerlink" title="3.查看 Docker 容器状态（NAMES 标签出现 portainer/portainer-ce 则成功运行）"></a>3.<strong>查看 Docker 容器状态（NAMES 标签出现 portainer/portainer-ce 则成功运行）</strong></h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">docker</span> <span class="token function">ps</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>



<h3 id="4-使用-Ubuntu-自带的火狐浏览器访问（https-127-0-0-1-9443-）"><a href="#4-使用-Ubuntu-自带的火狐浏览器访问（https-127-0-0-1-9443-）" class="headerlink" title="4.使用 Ubuntu 自带的火狐浏览器访问（https://127.0.0.1:9443/）"></a>4.<strong>使用 Ubuntu 自带的火狐浏览器访问（<a href="https://127.0.0.1:9443/%EF%BC%89">https://127.0.0.1:9443/）</a></strong></h3><p><strong>或使用局域网内另一台计算机/手机的浏览器访问（https://服务器的IP:9443/）</strong></p>
<h3 id="5-对-Portainer-初始设置"><a href="#5-对-Portainer-初始设置" class="headerlink" title="5.对 Portainer 初始设置"></a>5.<strong>对 Portainer 初始设置</strong></h3><p>设置用户名及密码（8位字符或数字），点击 Get Started，载入后点击 local 即可</p>
]]></content>
      <categories>
        <category>服务器</category>
        <category>Linux</category>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>教程</tag>
        <tag>Ubuntu</tag>
        <tag>Portainer</tag>
      </tags>
  </entry>
  <entry>
    <title>如何备份和恢复WordPress网站</title>
    <url>/2022/08/30/%E5%A6%82%E4%BD%95%E5%A4%87%E4%BB%BD%E5%92%8C%E6%81%A2%E5%A4%8DWordPress%E7%BD%91%E7%AB%99/</url>
    <content><![CDATA[<h1 id="如何备份和恢复WordPress网站"><a href="#如何备份和恢复WordPress网站" class="headerlink" title="如何备份和恢复WordPress网站"></a>如何备份和恢复WordPress网站</h1><p>介绍一个非常简单的迁移网站备份和恢复的方法。</p>
<p>直接在网站里安装一个插件WPvivid Backup</p>
<p>WPvivid Backup 插件提供备份、迁移和暂存站点等基本功能，并且正在集成越来越多的优雅功能，例如未用图像清理器等。</p>
<p>在子目录中创建一个过渡站点，用以安全地测试 WordPress、插件、主题和网站更改。</p>
<p>克隆WP站点并将其迁移到新主机（新域名），安排备份，将备份发送到领先的远程存储，在备份和迁移之前清理未使用的图像。一站式备份和迁移插件。</p>
<h2 id="WPvivid-Backup-for-MainWP"><a href="#WPvivid-Backup-for-MainWP" class="headerlink" title="WPvivid Backup for MainWP"></a>WPvivid Backup for MainWP</h2><p><a href="https://wpvivid.com/wpvivid-backup-for-mainwp">WPvivid Backup for MainWP</a>现已推出，可供下载<br>此插件允许您直接从 MainWP 仪表板为所有子站点设置和控制 WPvivid Backup Free 或 Pro。</p>
<p>点击下载**<a href="https://wordpress.org/plugins/wpvivid-backup-mainwp/">WPvivid Backup for MainWP</a>**</p>
<h2 id="具体使用"><a href="#具体使用" class="headerlink" title="具体使用"></a>具体使用</h2><p>安装后点击插件</p>
<p><img src="https://tutujanjan.world/wp-content/uploads/2022/08/image-1024x707.png" alt="img">本机储存目录会显示在上面</p>
<p>点击立即备份就会在目录生成备份文件</p>
<p>比我的情况备份好以后前往服务器上的/home/wwwroot/wordpress/wp-content/wpvividbackups</p>
<p><img src="https://tutujanjan.world/wp-content/uploads/2022/08/image-1.png" alt="img"></p>
<p>会看到有两个压缩包</p>
<p>迁移的情况下把这两个东西复制到本地电脑保存。</p>
<p>然后再复制到新服务器安装好wordpress安装好插件然后在相同的地方，进行恢复就OK了</p>
<p>是不是很简单！</p>
<p>还有就是迁移的时候记得备份好nginx/conf的nginx.conf配置文件</p>
<p>还有ssl证书。</p>
]]></content>
      <categories>
        <category>服务器</category>
        <category>Linux</category>
        <category>网站</category>
      </categories>
      <tags>
        <tag>教程</tag>
        <tag>Ubuntu</tag>
        <tag>WordPress</tag>
      </tags>
  </entry>
  <entry>
    <title>如何搭建一个wordpress网站</title>
    <url>/2022/08/30/%E5%A6%82%E4%BD%95%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AAwordpress%E7%BD%91%E7%AB%99/</url>
    <content><![CDATA[<h1 id="如何搭建一个wordpress网站"><a href="#如何搭建一个wordpress网站" class="headerlink" title="如何搭建一个wordpress网站"></a>如何搭建一个wordpress网站</h1><p>最近白嫖了一个云服务器。开始尝试自己搭建一个博客！</p>
<h2 id="1-准备工作"><a href="#1-准备工作" class="headerlink" title="1.准备工作"></a>1.准备工作</h2><ol>
<li>一台服务器（我用的 Ubuntu 22.04.1 LTS）</li>
<li>一个自己的域名（我用的<a href="https://account.godaddy.com/">godaddy</a> ）</li>
</ol>
<h2 id="2-开始部署"><a href="#2-开始部署" class="headerlink" title="2.开始部署"></a>2.开始部署</h2><h3 id="2-1部署LNMP一键安装包"><a href="#2-1部署LNMP一键安装包" class="headerlink" title="2.1部署LNMP一键安装包"></a>2.1部署LNMP一键安装包</h3><p><strong>LNMP一键安装包是什么?</strong></p>
<p>LNMP一键安装包是一个用Linux Shell编写的可以为CentOS/RHEL/Fedora/Debian/Ubuntu/Raspbian/Deepin/Alibaba/Amazon/Mint/Oracle/Rocky/Alma/Kali/UOS/银河麒麟/openEuler/Anolis OS Linux VPS或独立主机安装LNMP(Nginx/MySQL/PHP)、LNMPA(Nginx/MySQL/PHP/Apache)、LAMP(Apache/MySQL/PHP)生产环境的Shell程序。</p>
<p><strong>我们为什么需要它?</strong><br>编译安装需要输入大量的命令，如果是配置生产环境需要耗费大量的时间。<br>不会Linux的站长或Linux新手想使用Linux作为生产环境……</p>
<p>哎！简单说过来就是安装网站需要的环境吧！〒▽〒</p>
<p>直接访问网站找最新的安装代码</p>
<p><a href="https://lnmp.org/install.html">https://lnmp.org/install.html</a></p>
<p>比如；</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">wget</span> http://soft.vpser.net/lnmp/lnmp1.9.tar.gz <span class="token parameter variable">-cO</span> lnmp1.9.tar.gz <span class="token operator">&amp;&amp;</span> <span class="token function">tar</span> zxf lnmp1.9.tar.gz <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">cd</span> lnmp1.9 <span class="token operator">&amp;&amp;</span> ./install.sh lnmp<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>记得启动Root权限安装！</p>
<p>运行上述命令后，首先会提示安装 MySQL数据库。</p>
<p>我选择4.的5.7.22版本。</p>
<p>输入前面的序号，完成后会让你输入MySQL的密码。</p>
<p>如果不输入则会默认生成一个密码(形式如lnmp.org#随机数字)，如果输入有错误，可以按住Ctrl再按Backspace进行删除，输入后回车进入下一步。</p>
<p>询问是否需要启用MySQL InnoDB，InnoDB引擎默认为开启，一般建议开启，直接回车或输入 y ，如果确定确实不需要该引擎可以输入 n，(MySQL 5.7+版本无法关闭InnoDB),输入完成，回车进入下一步。</p>
<p>然后会询问我们安装PHP</p>
<p><img src="/%5Cimages%5Cwenzhangtu%5C20220830%5Clnmp1.9-install-4.png"></p>
<p>我会选择10的7.4.28</p>
<p>输入要选择的PHP版本的序号，回车进入下一步，选择是否安装内存优化：</p>
<p><img src="/%5Cimages%5Cwenzhangtu%5C20220830%5Clnmp1.9-install-5.png"></p>
<p>可以选择不安装、Jemalloc或TCmalloc，输入对应序号回车，直接回车为默认为不安装。</p>
<p>提示”Press any key to install…or Press Ctrl+c to cancel”后，按回车键确认开始安装。<br>LNMP脚本就会自动安装编译Nginx、MySQL、PHP、phpMyAdmin等软件及相关的组件。</p>
<p>安装时间可能会几十分钟到几个小时不等，主要是机器的配置网速等原因会造成影响。</p>
<p>安装完成后<br>如果显示Nginx: OK，MySQL: OK，PHP: OK</p>
<p>并且Nginx、MySQL、PHP都是running，80和3306端口都存在，并提示安装使用的时间及Install lnmp V1.9 completed! enjoy it.的话，说明已经安装成功。</p>
<p><img src="/%5Cimages%5Cwenzhangtu%5C20220830%5C6.png"></p>
<h3 id="2-2配置Nginx"><a href="#2-2配置Nginx" class="headerlink" title="2.2配置Nginx"></a>2.2配置Nginx</h3><p>安装好后</p>
<p>接下来可以用浏览器打开<code>http://ip</code>，就可以看到一个Nginx页面。说明安装成功！</p>
<h3 id="2-3安装WordPress"><a href="#2-3安装WordPress" class="headerlink" title="2.3安装WordPress"></a>2.3安装WordPress</h3><p>安装了LNMP，有了环境。就可以安装WordPress了。</p>
<p>方法很简单。</p>
<p><strong>第一步：将WordPress安装包下载并解压到<code>/home/wwwroot</code>中，使用以下命令即可。</strong></p>
<p>wget <a href="https://cn.wordpress.org/latest-zh_CN.zip">https://cn.wordpress.org/latest-zh_CN.zip</a> &amp;&amp; unzip latest-zh_CN.zip -d /home/wwwroot</p>
<p><strong>第二步：登录MySQL，密码是之前安装过程中你输入的，创建一个wordpress的表，完成后退出即可。</strong></p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql <span class="token operator">-</span>u root <span class="token operator">-</span>p
Enter password:
MySQL <span class="token operator">&gt;</span> <span class="token keyword">create</span> <span class="token keyword">database</span> wordpress<span class="token punctuation">;</span>
MySQL <span class="token operator">&gt;</span> <span class="token keyword">exit</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>第三步：使用vim来修改nginx配置文件，使用如下命令即可进入vim的编辑界面，然后先按i，进入编辑模式，然后编辑好了以后，按esc，再按shift+;，最后按wq即可。其中esc表示退出编辑模式，剩余操作是保存退出的意思。</strong></p>
<pre class="line-numbers language-none"><code class="language-none">vim /usr/local/nginx/conf/nginx.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>你会看到如下图显示的内容:</p>
<p><img src="/%5Cimages%5Cwenzhangtu%5C20220830%5C7.png"></p>
<p>上图说明安装好的nginx将网站的根目录设置为了/home/wwwroot/default，这个可以根据你的喜欢来进行更改。我更改成了 </p>
<p>/home/wwwroot/wordpress;</p>
<p>然后使用<code>nginx -t</code>来测试配置是否正确。如果出现ok或者successful字样，说明配置成功。</p>
<p>配置正确后，重新加载配置文件使配置生效：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nginx <span class="token parameter variable">-s</span> reload *// 使配置生效*<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>重启nginx，用以下命令：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">service</span> nginx restart // 重启<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>最后修改wordpress目录权限即可。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /home/wwwroot <span class="token operator">&amp;&amp;</span> <span class="token function">chown</span> <span class="token parameter variable">-R</span> www wordpress/ <span class="token operator">&amp;&amp;</span> <span class="token function">chgrp</span> <span class="token parameter variable">-R</span> www wordpress/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>用浏览器打开<code>http://ip/wp-admin/setup-config.php</code>，你就可以进行安装了。</p>
<p>数据库名 wordpress</p>
<p>用户名 root</p>
<p>`密码输入设置的数据库密码</p>
<p>主机 127.0.0.1</p>
<p>表前缀 wp_</p>
<p>然后提交就可以登录后台了。</p>
<p><img src="/%5Cimages%5Cwenzhangtu%5C20220830%5C8.png"></p>
<p>这个时候你可以在浏览器访问<code>http://ip</code>，就可以看到你搭建的网站了。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>创建好网站后，还有很多优化，安装插件，主题套用。</p>
<p>后面会先介绍怎么进行网站的迁移备份和恢复。</p>
]]></content>
      <categories>
        <category>服务器</category>
        <category>Linux</category>
        <category>网站</category>
      </categories>
      <tags>
        <tag>教程</tag>
        <tag>Ubuntu</tag>
        <tag>WordPress</tag>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>如何通过Linux云服务器来搭建Minecraft服务器</title>
    <url>/2022/08/23/%E5%A6%82%E4%BD%95%E9%80%9A%E8%BF%87Linux%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%9D%A5%E6%90%AD%E5%BB%BAMinecraft%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
    <content><![CDATA[<h1 id="如何通过Linux云服务器来搭建Minecraft服务器"><a href="#如何通过Linux云服务器来搭建Minecraft服务器" class="headerlink" title="如何通过Linux云服务器来搭建Minecraft服务器"></a>如何通过Linux云服务器来搭建Minecraft服务器</h1><p>最近开始折腾云服务器，开始学习一下Linux相关的知识，就尝试用Linux来搭建一个Minecraft的服务器。具体方法如下⬇</p>
<h2 id="1-准备工作"><a href="#1-准备工作" class="headerlink" title="1 准备工作"></a>1 准备工作</h2><p>Linux 系统，*这次是用Centos来做操作。</p>
<h3 id="1-1-安装文件传输工具"><a href="#1-1-安装文件传输工具" class="headerlink" title="1.1 安装文件传输工具"></a>1.1 安装文件传输工具</h3><p>为了方便传文件到服务器上，这里先装一个远程传输工具。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum <span class="token parameter variable">-y</span> <span class="token function">install</span> lrzsz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h2 id="1-2-安装java"><a href="#1-2-安装java" class="headerlink" title="1.2 安装java"></a>1.2 安装java</h2><p>Minecraft服务端也需要jre才能运行，这里有两个安装方法（选择一种）：</p>
<h3 id="1-2-1-官网下载"><a href="#1-2-1-官网下载" class="headerlink" title="1.2.1 官网下载"></a>1.2.1 官网下载</h3><p>去官网下载（<a href="https://www.oracle.com/java/technologies/javase/jdk17-archive-downloads.html">Java17</a>）Linux x64的gz包，得到jdk-17.0.4.1_linux-x64_bin.tar.gz文件（不知道为什么用Java18Minecraft服务端会报错所以用了Java17）。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">rz	<span class="token comment">#将下载好的gz文件上传到服务器</span>

<span class="token comment"># 创建安装目录</span>
<span class="token function">mkdir</span> /usr/local/java/

<span class="token comment"># 解压当前目录下的JDK压缩文件(版本不一样文件名也会不一样，善用tab自动补全)</span>
<span class="token function">tar</span> <span class="token parameter variable">-zxvf</span> jdk-17.0.4.1_linux-x64_bin.tar.gz <span class="token parameter variable">-C</span> /usr/local/java/

<span class="token comment"># 方便后面配置环境，改一下文件名</span>
<span class="token function">mv</span> /usr/usr/local/java/jdk-17.0.4.1_linux-x64_bin.tar.gz /usr/usr/local/java/jdk1.7.0

<span class="token comment"># 设置环境变量(安装 VIM 输入 yum -y install vim)</span>
<span class="token function">vim</span> /etc/profile
<span class="token comment"># 在末尾添加对应变量</span>
滚动光标到末尾 按下 键盘上的 I 键,切换至插入模式
输入这几串内容后 按ESC退出插入模式 
然后按下 ： 输入 wq 并回车保存

<span class="token builtin class-name">export</span> <span class="token assign-left variable">JAVA_HOME</span><span class="token operator">=</span>/usr/local/java/jdk1.7.0
<span class="token builtin class-name">export</span> <span class="token assign-left variable">JRE_HOME</span><span class="token operator">=</span><span class="token variable">${JAVA_HOME}</span>/jre
<span class="token builtin class-name">export</span> <span class="token assign-left variable">CLASSPATH</span><span class="token operator">=</span>.:<span class="token variable">${JAVA_HOME}</span>/lib:<span class="token variable">${JRE_HOME}</span>/lib
<span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token variable">${JAVA_HOME}</span>/bin:<span class="token environment constant">$PATH</span>

<span class="token comment"># 应用修改后的环境变量</span>
<span class="token builtin class-name">source</span> /etc/profile

<span class="token comment"># 软链接程序到环境变量中</span>
<span class="token function">ln</span> <span class="token parameter variable">-s</span> /usr/local/java/jdk1.8.0/bin/java /usr/bin/java

<span class="token comment"># 测试是否安装正常，显示 java version "17.0.4.1" 则为正常</span>
<span class="token function">java</span> <span class="token parameter variable">-version</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="1-2-2-或yum安装"><a href="#1-2-2-或yum安装" class="headerlink" title="1.2.2 或yum安装"></a>1.2.2 或yum安装</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> yum <span class="token function">install</span> java-1.8.0-openjdk<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>有询问输入y即可</p>
<h2 id="1-3-安装screen"><a href="#1-3-安装screen" class="headerlink" title="1.3 安装screen"></a>1.3 安装screen</h2><p>安装screen，后面开服时会用到。使用screen可以让服务器进程在后台运行，而不会因为远程连接的断开而停止进程。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># RedHat/CentOS</span>
yum <span class="token function">install</span> <span class="token parameter variable">-y</span> <span class="token function">screen</span>

<span class="token comment"># Ubuntu/Debian</span>
<span class="token function">apt</span> <span class="token function">install</span> <span class="token function">screen</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="1-4-配置防火墙"><a href="#1-4-配置防火墙" class="headerlink" title="1.4 配置防火墙"></a>1.4 配置防火墙</h2><p>一定要在root用户中操作。</p>
<p>这步很关键，开服之后连接不到服务器，很可能就是因为防火墙没配置好！</p>
<p>添加一个<strong>端口</strong>（25565默认）</p>
<pre class="line-numbers language-text" data-language="text"><code class="language-text">firewall-cmd --zone=public --add-port=25565/tcp --permanent<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>然后 重启防火墙</p>
<pre class="line-numbers language-text" data-language="text"><code class="language-text">firewall-cmd --reload<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>查看端口状态</p>
<pre class="line-numbers language-text" data-language="text"><code class="language-text">firewall-cmd --zone= public --query-port=25565/tcp<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>在网页端的管理控制台 安全 防火墙 右上添加规则</p>
<p>TCP 25565</p>
<h2 id="1-5-创建用户"><a href="#1-5-创建用户" class="headerlink" title="1.5 创建用户"></a>1.5 创建用户</h2><p>不建议使用root系统进行后面的操作，接下来为Minecraft创建一个专门的用户。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">useradd</span> <span class="token parameter variable">-m</span> Minecraft	<span class="token comment"># 新建一个名为Minecraft的用户</span>
<span class="token function">passwd</span> Minecraft		<span class="token comment"># 为用户Minecraft设置密码</span>
<span class="token function">su</span> - Minecraft			<span class="token comment"># 切换至新建的Minecraft用户。改成root，可以切换回root用户</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h1 id="2-Minecraft服务端"><a href="#2-Minecraft服务端" class="headerlink" title="2.Minecraft服务端"></a>2.Minecraft服务端</h1><p>给MC服务端创建一个文件夹</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> ~
<span class="token function">mkdir</span> MinecraftServer	<span class="token comment">#创建文件夹</span>
<span class="token builtin class-name">cd</span> MinecraftServer		<span class="token comment">#进入文件夹</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h2 id="2-1-获取服务端"><a href="#2-1-获取服务端" class="headerlink" title="2.1 获取服务端"></a>2.1 获取服务端</h2><p>MC目前主流的服务端分很多种，简单可以分为三类：</p>
<p>①原版纯净：官网直接下服务端，不能装mod不能装插件 <a href="https://www.minecraft.net/zh-hans/download/server">点击下载</a></p>
<p>②forge服务端：Mod服，只能装Mod，不能装插件</p>
<p>（<a href="http://files.minecraftforge.net/%EF%BC%89">http://files.minecraftforge.net/）</a></p>
<p>③Craftbukkit、Spigot服务端：插件服，只能装插件，不能装Mod</p>
<p>④CatSetver服务端：国人开发的，MOD+插件服，白火现在在用。</p>
<p>以上服务端，按需要选择一个，到对应官网下载。（或直接下载别人配置好的懒人服务端，别人配置好的服务端，可视情况跳至2.3步骤。）</p>
<p>你可以在自己的电脑上下载好服务端，然后利用Xshell等远程终端的lrzsz插件，传输到服务器上。</p>
<p>用cd MinecraftServer指令，进入刚才创建的MinecraftServer内。输入指令：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">rz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>下载好后执行下面这一句。这里分别以Forge和CatServer举例。不论你用那种服务端，你只需要把-jar后面的名字改成你服务端文件的名字即可。善用Tab补全代码，避免输错。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#Forge服</span>
<span class="token function">java</span> <span class="token parameter variable">-jar</span> forge-1.12.2-14.23.4.2705-installer.jar <span class="token parameter variable">-nogui</span> <span class="token parameter variable">-installServer</span>
<span class="token comment">#CatServer服</span>
<span class="token function">java</span> <span class="token parameter variable">-Xmx2G</span> <span class="token parameter variable">-jar</span> CatServer-2a9163f-universal.jar
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>这一步其实是在安装服务端，还要在下载一会服务端资源，网络比较慢。有意思的是，其中CatServer服端安装服务端的指令，和后面正真运行服务端的指令是一样的。（Forge则是不同的）</p>
<p>如果提示下载失败了，或部分资源下载超时了，就再重执行一次上面的forge-*-installer.jar</p>
<p>现在服务器资源都正确下载了，执行以下代码：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#Forge服</span>
<span class="token function">java</span> <span class="token parameter variable">-Xmx1G</span> <span class="token parameter variable">-jar</span> forge-1.12.2-14.23.4.2705-universal.jar
<span class="token comment">#CatServer服</span>
<span class="token function">java</span> <span class="token parameter variable">-Xmx2G</span> <span class="token parameter variable">-jar</span> CatServer-2a9163f-universal.jar
<span class="token comment">#官服（如果您想使用图形用户界面启动服务器，您可以省略“nogui”部分。）</span>
<span class="token function">java</span> <span class="token parameter variable">-Xmx1024M</span> <span class="token parameter variable">-Xms1024M</span> <span class="token parameter variable">-jar</span> minecraft_server.1.19.2.jar nogui<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="2-2-同意协议"><a href="#2-2-同意协议" class="headerlink" title="2.2 同意协议"></a>2.2 同意协议</h2><p>首次运行必定失败，会提示你需要同意协议。这时我们输入<code>ls</code>就能看到目录下多了一个eula.txt。我们需要修改eula文件同意协议，才能启动。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> eula.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>将eula=false改成eula=true即可。</p>
<p>然后按esc，输入<code>:wq</code>保存退出。</p>
<p>*其实官服这个时候就可以再次运行</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">java</span> <span class="token parameter variable">-Xmx1024M</span> <span class="token parameter variable">-Xms1024M</span> <span class="token parameter variable">-jar</span> minecraft_server.1.19.2.jar nogui<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>就可以成功开服了。</p>
<h2 id="2-3-配置文件"><a href="#2-3-配置文件" class="headerlink" title="2.3 配置文件"></a>2.3 配置文件</h2><p>为了方便以后开服，我们创建一个startServer.sh文件。（别人配置好的服务端可能已经创建过了）</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> startServer.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>然后i写入</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#Forge服</span>
<span class="token function">java</span> <span class="token parameter variable">-Xmx1G</span> <span class="token parameter variable">-jar</span> forge-1.12.2-14.23.4.2705-universal.jar
<span class="token comment">#CatServer服</span>
<span class="token function">java</span> <span class="token parameter variable">-Xmx2G</span> <span class="token parameter variable">-jar</span> CatServer-2a9163f-universal.jar
<span class="token comment">#官服（如果您想使用图形用户界面启动服务器，您可以省略“nogui”部分。）</span>
<span class="token function">java</span> <span class="token parameter variable">-Xmx1024M</span> <span class="token parameter variable">-Xms1024M</span> <span class="token parameter variable">-jar</span> minecraft_server.1.19.2.jar nogui<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>按esc，输入:wq保存退出。</p>
<p>其实就是把刚才我们运行服务器的指令，写进了shell中，以后省的敲指令了，直接运行这个shell即可。</p>
<p><em>这和windows的bat批处理性质相似，在windoes中开服，也是把开服的指令写进一个bat中，每次运行bat就省的敲指令了。</em></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 给start.sh执行权限</span>
<span class="token function">chmod</span> <span class="token number">777</span> startServer.sh

<span class="token comment"># 执行start.sh即可开服</span>
./startServer.sh	

<span class="token comment"># 控制台不再跳新的信息时，说明开服成功了</span>
<span class="token comment"># 我们先结束服务器，完成服务器配置</span>
stop<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>首次成功开服后，会产生一个server.properties文件，是服务器的配置文件。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> server.properties	<span class="token comment">#修改配置文件</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>其中online-mode=true是检测正版登录用户，true是只允许正版玩家进入可以使用，false则允许离线进入。</p>
<p>更多配置参考这个文件。</p>
<p><a href="https://minecraft-zh.gamepedia.com/index.php?title=Server.properties&amp;variant=zh">https://minecraft-zh.gamepedia.com/index.php?title=Server.properties&amp;variant=zh</a></p>
<h2 id="2-4-正式开服"><a href="#2-4-正式开服" class="headerlink" title="2.4 正式开服"></a>2.4 正式开服</h2><p>创建一个名为MinecraftServer的screen，可以让服务器在后台运行，断开远程连接也不终止进程。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">screen</span> <span class="token parameter variable">-S</span> MinecraftServer<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>启动服务器</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./start.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>最后你只要看到有Type “/help” for help，就说明你的服务器已经跑起来了。</p>
<p>然后按住Ctrl + A +D ，将screen加入后台运行</p>
<p>当你需要回到这个sreen页面时，使用如下指令。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">screen</span> <span class="token parameter variable">-ls</span>	<span class="token comment"># 查看screen，记下MinecraftServer的编号</span>
<span class="token function">screen</span> <span class="token parameter variable">-r</span> <span class="token operator">&lt;</span>MinecraftServer的编号<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>现在进游戏，输入自己服务器的ip加端口号25565就可以连上了。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>参考：</p>
<p><a href="https://zhuanlan.zhihu.com/p/55952581">MC云服务器搭建教程[非硬核]</a></p>
<p><a href="https://www.bilibili.com/read/cv1267747/">如何在Linux下搭建Minecraft服务器</a></p>
<p><a href="https://minecraft-zh.gamepedia.com/Server.properties?variant=zh">Minecraft Wiki:server.properties</a></p>
]]></content>
      <categories>
        <category>服务器</category>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>教程</tag>
        <tag>Minecraft</tag>
        <tag>游戏</tag>
      </tags>
  </entry>
  <entry>
    <title>如何通过docker-compose来安装WordPress</title>
    <url>/2022/09/01/%E5%A6%82%E4%BD%95%E9%80%9A%E8%BF%87docker-compose%E6%9D%A5%E5%AE%89%E8%A3%85WordPress/</url>
    <content><![CDATA[<h1 id="如何通过docker-compose来安装WordPress"><a href="#如何通过docker-compose来安装WordPress" class="headerlink" title="如何通过docker-compose来安装WordPress"></a>如何通过docker-compose来安装WordPress</h1><p>这次我在我的ARM64  22.04 Server Macbook虚拟机上进行了安装。</p>
<p>以下全在Root用户下操作。</p>
<h2 id="1-安装docker-compose"><a href="#1-安装docker-compose" class="headerlink" title="1.安装docker-compose"></a>1.安装docker-compose</h2><p>第一步更新库</p>
<pre class="line-numbers language-none"><code class="language-none">apt updata<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>第二步安装Python3</p>
<pre class="line-numbers language-none"><code class="language-none">apt install python3-pip -y<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>第三步安装docker-compose</p>
<pre class="line-numbers language-none"><code class="language-none">pip3 install docker-compose<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>第四步创建一个wordpress文件夹并进去目录并创建docker-compose.yml文件</p>
<pre class="line-numbers language-none"><code class="language-none">mkdir wordpress
cd wordpress
vi docker-compose.yml<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>第五步编辑docker-compose.yml输入以下配置</p>
<pre class="line-numbers language-none"><code class="language-none">version: '3.3'

services:
   db:
     image: mariadb:10.5.8                #Mac M1用db代替吧
     volumes:
       - db_data:/var/lib/mysql
     restart: always
     environment:
       MYSQL_ROOT_PASSWORD: somewordpress
       MYSQL_DATABASE: wordpress
       MYSQL_USER: wordpress
       MYSQL_PASSWORD: wordpress

   wordpress:
     depends_on:
       - db
     image: wordpress:latest
     ports:
       - "8082:80"              #端口我的会冲突所以映射到8082端口
     restart: always
     environment:
       WORDPRESS_DB_HOST: db:3306
       WORDPRESS_DB_USER: wordpress
       WORDPRESS_DB_PASSWORD: wordpress
       WORDPRESS_DB_NAME: wordpress

volumes:
  db_data: {}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>第六步开始部署</p>
<pre class="line-numbers language-none"><code class="language-none">docker-compose up<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>搞定，最后浏览器输入</p>
<p>localhost:8082</p>
<p>开始安装WordPress</p>
<p>第七步配置域名</p>
<p>安装后我们可以去Nginx Proxy Manager配置域名来访问</p>
]]></content>
      <categories>
        <category>服务器</category>
        <category>Linux</category>
        <category>worepress</category>
      </categories>
      <tags>
        <tag>教程</tag>
        <tag>Ubuntu</tag>
        <tag>docker-compose</tag>
      </tags>
  </entry>
  <entry>
    <title>让Windows和Mac无缝共用一套键鼠和剪贴板的方法</title>
    <url>/2022/09/01/%E8%AE%A9Windows%E5%92%8CMac%E6%97%A0%E7%BC%9D%E5%85%B1%E7%94%A8%E4%B8%80%E5%A5%97%E9%94%AE%E9%BC%A0%E5%92%8C%E5%89%AA%E8%B4%B4%E6%9D%BF%E7%9A%84%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h1 id="让Windows和Mac无缝共用一套键鼠和剪贴板的方法"><a href="#让Windows和Mac无缝共用一套键鼠和剪贴板的方法" class="headerlink" title="让Windows和Mac无缝共用一套键鼠和剪贴板的方法"></a>让Windows和Mac无缝共用一套键鼠和剪贴板的方法</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>不知道大家又没有和我一样，同时拥有一台台式机Windows和Mac。每次我想同时操作两台电脑的时候，或者想把Mac当副屏幕的时候，我都需要单独操作两边的鼠标和键盘，感觉相当的麻烦。</p>
<p>虽然以前买了一个罗技的MX Master 3 可以满足需求，但是第一成本太高，还有一点就是你还得买个罗技的键盘，成本真的太高了，每次复制文件也是需要右键点击操作，非常的鸡肋。</p>
<p>有没有一个既免费，又方便好用的方案呢。</p>
<p>研究了半天，有了，而且非常流畅，体验下来也没什么延迟。直接感觉起飞(‘ω’)ノ</p>
<p>就是一个叫做<strong>ShareMouse</strong>的软件。听说Synergy也可以做到，但是需要付费直接PASS掉。</p>
<h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><h3 id="1-下载ShareMouse"><a href="#1-下载ShareMouse" class="headerlink" title="1.下载ShareMouse"></a>1.下载ShareMouse</h3><p><a href="https://www.sharemouse.com/download/">https://www.sharemouse.com/download/</a></p>
<p>这里分别在Windows和Mac上下载对应系统的软件</p>
<p><img src="https://tutujanjan.com/wp-content/uploads/2022/09/image-20220921214804615.png" alt="img"></p>
<h3 id="2-安装和设置"><a href="#2-安装和设置" class="headerlink" title="2.安装和设置"></a>2.安装和设置</h3><h4 id="2-1-Windows端设置"><a href="#2-1-Windows端设置" class="headerlink" title="2.1 Windows端设置"></a>2.1 Windows端设置</h4><p>分别在Windows和Mac上安装好了之后，Windows可以在右下角看到一个鼠标的图标</p>
<p><img src="https://tutujanjan.com/wp-content/uploads/2022/09/image-20220921214957796.png" alt="img"></p>
<p>然后右键它。</p>
<p><img src="https://tutujanjan.com/wp-content/uploads/2022/09/image-20220921215155806.png" alt="img"></p>
<p>选择Settings</p>
<p><img src="https://tutujanjan.com/wp-content/uploads/2022/09/image-20220921215720935.png" alt="img"></p>
<p>看到<img src="https://s.w.org/images/core/emoji/14.0.0/svg/2b06.svg" alt="⬆">图之后，选择Clients，这里我们配置一下Mac的IP地址</p>
<p>如果不知道是多少，可以在Mac相同的地方点击 Show local IP address进行查看</p>
<p>然后我们填入到②的位置。最后点击一下6555旁边的小电脑图标。</p>
<p>设置完成。</p>
<h3 id="2-2-Mac端设置"><a href="#2-2-Mac端设置" class="headerlink" title="2.2 Mac端设置"></a>2.2 Mac端设置</h3><p><img src="https://tutujanjan.com/wp-content/uploads/2022/09/%E6%88%AA%E5%B1%8F2022-09-21-22.01.02.png" alt="img"></p>
<p>还是一样上面任务栏我们可以看到一个鼠标的图标，点击它一下。</p>
<p>选择Settings</p>
<p><img src="https://tutujanjan.com/wp-content/uploads/2022/09/%E6%88%AA%E5%B1%8F2022-09-21-22.02.55-1024x945.png" alt="img"></p>
<p>然后一样点击选择Clients</p>
<p><img src="https://tutujanjan.com/wp-content/uploads/2022/09/%E6%88%AA%E5%B1%8F2022-09-21-22.04.40.png" alt="img"></p>
<p>这里我们填写Windows的IP地址</p>
<p>记住，是Windows的IP`地址不是Mac的。</p>
<p>和Windows的设置一样填入IP地址之后。最后点击一下6555旁边的小电脑图标。</p>
<h4 id="2-3配置桌面位置"><a href="#2-3配置桌面位置" class="headerlink" title="2.3配置桌面位置"></a>2.3配置桌面位置</h4><p><img src="https://tutujanjan.com/wp-content/uploads/2022/09/image-20220921221027583-1.png" alt="img"></p>
<p>右键任务栏的鼠标图标</p>
<p>选择 Monitor Manager</p>
<p><img src="https://tutujanjan.com/wp-content/uploads/2022/09/image-20220921221109897-1-1024x362.png" alt="img"></p>
<p>这里你可以配置对应的位置。</p>
<p>两台电脑一定要保持一致。</p>
<p><strong>好了，恭喜你完成了！撒花(‘ω’)ノ</strong></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>其实设置起来很简单，总结起来就是把各个端设置成对方的IP地址即可。</p>
<p>当然你还可以设置一个密码，在设置里的 Network里面 Security里打上勾然后输入密码。</p>
<p>两台电脑都要输入一样的密码设置。就可以了。</p>
<p>体验下来很流畅，拖动文件一步到位。很棒。嘿嘿嘿(;・∀・)</p>
]]></content>
      <categories>
        <category>教程</category>
        <category>好用的软件</category>
        <category>Windows</category>
      </categories>
      <tags>
        <tag>软件</tag>
        <tag>Mac</tag>
      </tags>
  </entry>
  <entry>
    <title>连接云端服务器的方法</title>
    <url>/2022/08/23/%E8%BF%9E%E6%8E%A5%E4%BA%91%E7%AB%AF%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h1 id="连接云端服务器的方法"><a href="#连接云端服务器的方法" class="headerlink" title="连接云端服务器的方法"></a>连接云端服务器的方法</h1><h2 id="1、创建虚拟云服务器"><a href="#1、创建虚拟云服务器" class="headerlink" title="1、创建虚拟云服务器"></a>1、创建虚拟云服务器</h2><p>这次用甲骨文云来作为例子，首先创建一个新的实例。保存好ssh密钥。</p>
<p><img src="/images/20220823/jiaguwen/1.png"></p>
<h2 id="2、下载远程连接工具FinalShell和配置"><a href="#2、下载远程连接工具FinalShell和配置" class="headerlink" title="2、下载远程连接工具FinalShell和配置"></a>2、下载远程连接工具FinalShell和配置</h2><h3 id="1-下载FinalShell"><a href="#1-下载FinalShell" class="headerlink" title="1.下载FinalShell"></a>1.下载FinalShell</h3><p>FinalShell是一体化的的服务器,网络管理软件,不仅是ssh客户端,还是功能强大的开发,运维工具,充分满足开发,运维需求.</p>
<p>特色功能:<br>云端同步,免费海外服务器远程桌面加速,ssh加速,本地化命令输入框,支持自动补全,命令历史,自定义命令参数</p>
<p>Windows版下载地址:<br><a href="http://www.hostbuf.com/downloads/finalshell_install.exe">http://www.hostbuf.com/downloads/finalshell_install.exe</a></p>
<p>macOS版下载地址:<br><a href="http://www.hostbuf.com/downloads/finalshell_install.pkg">http://www.hostbuf.com/downloads/finalshell_install.pkg</a></p>
<p>mac版安装路径 /Applications/FinalShell.app/<br>配置文件路径 /Users/$USER/Library/FinalShell/<br>mac版卸载<br>删除安装目录 /Applications/FinalShell.app/</p>
<p>Linux版安装及教程:<br><a href="http://www.hostbuf.com/t/1059.html">http://www.hostbuf.com/t/1059.html</a></p>
<h3 id="2-配置"><a href="#2-配置" class="headerlink" title="2.配置"></a>2.配置</h3><ul>
<li><p><input checked="" disabled="" type="checkbox"> 
下载安装好后启动到界面点击文件夹标签📂</p>
</li>
<li><p><input checked="" disabled="" type="checkbox"> 
点击第一个加号添加SSH连接</p>
</li>
</ul>
<table>
<thead>
<tr>
<th>常规</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>名称; 甲骨文  *(名称随意)</td>
<td></td>
</tr>
<tr>
<td>主机:服务器IP地址</td>
<td>端口:22</td>
</tr>
<tr>
<td>备注</td>
<td></td>
</tr>
<tr>
<td>认证</td>
<td></td>
</tr>
<tr>
<td>方法:公匙</td>
<td></td>
</tr>
<tr>
<td>用户名:opc</td>
<td></td>
</tr>
<tr>
<td>密匙：点击预览，然后选择1保存的密匙</td>
<td></td>
</tr>
</tbody></table>
<p>最后点击应用就可以连接到自己的云服务器</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>原来连接到云服务器这么简单，如果连不上，需要检查云服务器的防火墙配置。</p>
]]></content>
      <categories>
        <category>服务器</category>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>教程</tag>
      </tags>
  </entry>
  <entry>
    <title>电脑重装系统后如何配置以前的hexo</title>
    <url>/2022/09/27/%E7%94%B5%E8%84%91%E9%87%8D%E8%A3%85%E7%B3%BB%E7%BB%9F%E5%90%8E%E5%A6%82%E4%BD%95%E9%85%8D%E7%BD%AE%E4%BB%A5%E5%89%8D%E7%9A%84hexo/</url>
    <content><![CDATA[<h1 id="电脑重装系统后如何配置以前的Hexo"><a href="#电脑重装系统后如何配置以前的Hexo" class="headerlink" title="电脑重装系统后如何配置以前的Hexo"></a>电脑重装系统后如何配置以前的Hexo</h1><p>前阵子换了SSD重装了系统，发现hexo博客需要在新系统安装配置，找了一下教程，在这里记录一下具体操作。</p>
<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>首先，操作之前。<strong>最重要的一点：备份保存</strong> 硬盘里hexo博客文件夹（就是hexo博客存储的文件夹。） 因为不知道哪些文件需要用，所以我把整个文件夹都保存下来。或者打成一个压缩包。</p>
<h3 id="重装系统之后"><a href="#重装系统之后" class="headerlink" title="重装系统之后"></a>重装系统之后</h3><h3 id="1-安装软件-git-和-Node-js"><a href="#1-安装软件-git-和-Node-js" class="headerlink" title="1.安装软件 git 和 Node.js"></a>1.安装软件 git 和 Node.js</h3><p>git下载地址：<a href="https://link.zhihu.com/?target=https://git-scm.com/">git官网</a> Node.js下载地址：<a href="https://link.zhihu.com/?target=https://nodejs.org/en/">Node.js官网</a></p>
<h3 id="2-配置SSH-Key"><a href="#2-配置SSH-Key" class="headerlink" title="2.配置SSH Key"></a>2.配置SSH Key</h3><p>在 Git Bash 客户端，输入：</p>
<pre class="line-numbers language-text" data-language="text"><code class="language-text">git config --global user.name "这里输入在GitHub的账户名"
git config --global user.email "这里输入在GitHub的注册邮箱名"
ssh-keygen -t rsa -C "这里输入在 GitHub 的注册邮箱"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>接着在 Git Bash 客户端，输入命令行：</p>
<pre class="line-numbers language-none"><code class="language-none">cat id_ras.pub<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>这样会显示公钥文件内容，把它复制到剪贴板。</p>
<p>登录 GitHub 账户，点击右上角个人头像的下拉菜单，依次点击 Settings &gt; SSH and GPG Keys，在 SSH Keys 页面右上角有个<code>New SSH Key</code>按钮，点击该按钮后，粘贴上刚才复制的公钥内容。这样，SSH Key 就配置好了。</p>
<h3 id="3-安装hexo"><a href="#3-安装hexo" class="headerlink" title="3.安装hexo"></a>3.安装hexo</h3><p>在 Git Bash 客户端输入: <code>npm install hexo-cli -g</code></p>
<h3 id="4-删除hexo博客文件夹里的部分文件"><a href="#4-删除hexo博客文件夹里的部分文件" class="headerlink" title="4.删除hexo博客文件夹里的部分文件"></a>4.删除hexo博客文件夹里的部分文件</h3><p><strong>提示：为防止误操作，稳妥起见，执行本操作之前，还是在另外一个盘再存储一份hexo博客文件夹保存为好。</strong></p>
<p><strong>保留_config.yml, themes/, source/, scaffolds/, package.json, .gitignore 这些文件/文件夹，</strong> 其它可以删除。</p>
<h3 id="5-安装文件"><a href="#5-安装文件" class="headerlink" title="5.安装文件"></a>5.安装文件</h3><p>在Git Bash 客户端输入 <code>npm install</code></p>
<h3 id="6-安装部署"><a href="#6-安装部署" class="headerlink" title="6.安装部署"></a>6.安装部署</h3><p>在Git Bash 客户端输入： <code>npm install hexo-deployer-git --save</code></p>
<h3 id="7-运行"><a href="#7-运行" class="headerlink" title="7.运行"></a>7.运行</h3><p>最后，在博客文件夹上，运行Git Bash 客户端，依次输入以下命令：</p>
<pre class="line-numbers language-none"><code class="language-none">hexo clean
hexo g
hexo d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>然后查看是否配置成功。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://zhuanlan.zhihu.com/p/348616082">https://zhuanlan.zhihu.com/p/348616082</a></p>
]]></content>
      <categories>
        <category>教程</category>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>blog</tag>
      </tags>
  </entry>
  <entry>
    <title>利用rclone把OneDrive、GoogleDrive等网盘挂载到window本地</title>
    <url>/2022/09/27/%E5%88%A9%E7%94%A8rclone%E6%8A%8AOneDrive%E3%80%81GoogleDrive%E7%AD%89%E7%BD%91%E7%9B%98%E6%8C%82%E8%BD%BD%E5%88%B0window%E6%9C%AC%E5%9C%B0/</url>
    <content><![CDATA[<h1 id="利用rclone把OneDrive、GoogleDrive等网盘挂载到window本地"><a href="#利用rclone把OneDrive、GoogleDrive等网盘挂载到window本地" class="headerlink" title="利用rclone把OneDrive、GoogleDrive等网盘挂载到window本地"></a>利用rclone把OneDrive、GoogleDrive等网盘挂载到window本地</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>大学4年，都最后一年才发现学校的邮箱可以白嫖1T的Onedrive网盘。而且毕业了说不定还能继续白嫖。但是每次打开网盘都需要在网页上操作，下载软件很麻烦不说，而且还可能乱备份文件，找了一些教程，可以把我们的Onedrive直接挂载到本地磁盘。</p>
<p>成功后你就可以看到下图。</p>
<p><img src="https://tutujanjan.com/wp-content/uploads/2022/09/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE-2022-09-27-034444.png" alt="img"></p>
<p>直接免费增加1T 不多说，既然可以白嫖，不仅要白嫖到还要白嫖到爽才行。</p>
<p>介绍一下怎么挂载吧。</p>
<h2 id="一、环境安装"><a href="#一、环境安装" class="headerlink" title="一、环境安装"></a>一、环境安装</h2><h2 id="1、rclone下载"><a href="#1、rclone下载" class="headerlink" title="1、rclone下载"></a>1、rclone下载</h2><p><a href="https://rclone.org/downloads/">官网下载：https://rclone.org/downloads/</a></p>
<p><img src="https://tutujanjan.com/wp-content/uploads/2022/09/01-1024x309.png" alt="img"></p>
<p>或者你可以在GitHub下载</p>
<p><a href="https://github.com/rclone/rclone/releases">Github下载：https://github.com/rclone/rclone/releases</a></p>
<p><strong>下载后解压</strong></p>
<p>我这里直接解压到我的桌面</p>
<p><img src="https://tutujanjan.com/wp-content/uploads/2022/09/03.jpg" alt="img"></p>
<h2 id="2、安装winfsp"><a href="#2、安装winfsp" class="headerlink" title="2、安装winfsp"></a>2、安装winfsp</h2><p><a href="http://www.secfs.net/winfsp/rel/">官网下载：http://www.secfs.net/winfsp/rel/</a></p>
<p><img src="https://tutujanjan.com/wp-content/uploads/2022/09/04-1024x426.png" alt="img"></p>
<p>或者</p>
<p><a href="https://github.com/billziss-gh/winfsp/releases">Github下载：https://github.com/billziss-gh/winfsp/releases</a></p>
<p><strong>下载完成后安装</strong></p>
<p><img src="https://tutujanjan.com/wp-content/uploads/2022/09/1623763563848.png" alt="img"></p>
<p><img src="https://tutujanjan.com/wp-content/uploads/2022/09/02.png" alt="img"></p>
<p><img src="https://tutujanjan.com/wp-content/uploads/2022/09/03.png" alt="img"></p>
<h2 id="3、安装Git"><a href="#3、安装Git" class="headerlink" title="3、安装Git"></a>3、安装Git</h2><p>官网地址：<a href="https://git-scm.com/downloads">https://git-scm.com/downloads</a></p>
<p>下载后安装</p>
<p>一直下一步就行。</p>
<h2 id="4、为rclone配置环境变量"><a href="#4、为rclone配置环境变量" class="headerlink" title="4、为rclone配置环境变量"></a>4、为rclone配置环境变量</h2><ol>
<li>点开电脑的查找输入查看高级系统设置</li>
<li>选择环境变量</li>
<li>找到刚刚解压的Rclone的路径添加进Path变量</li>
<li>检查rclone是否配置成功，然后按打开，当然也可以打开，输入，如果出现下面的输出则安装成功，否则检查整个步骤的环境是否配置正确。<code>rclone --version</code></li>
</ol>
<p><img src="https://tutujanjan.com/wp-content/uploads/2022/09/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE-2022-09-27-224342-1.jpg" alt="img"></p>
<p><img src="https://tutujanjan.com/wp-content/uploads/2022/09/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE-2022-09-27-224819.jpg" alt="img"></p>
<p><img src="https://tutujanjan.com/wp-content/uploads/2022/09/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE-2022-09-27-225012.jpg" alt="img"></p>
<p><img src="https://tutujanjan.com/wp-content/uploads/2022/09/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE-2022-09-27-225253.jpg" alt="img"></p>
<h1 id="二、配置挂载"><a href="#二、配置挂载" class="headerlink" title="二、配置挂载"></a>二、配置挂载</h1><h2 id="1、rclone配置"><a href="#1、rclone配置" class="headerlink" title="1、rclone配置"></a>1、rclone配置</h2><pre class="line-numbers language-none"><code class="language-none">C:\Users\Administrator&gt;rclone config
No remotes found - make a new one
n) New remote
s) Set configuration password
q) Quit config
n/s/q&gt; n *//第一步：新建配置*
name&gt; tutu
Type of storage to configure.
Enter a string value. Press Enter for the default ("").
Choose a number from below, or type in your own value
 1 / 1Fichier
   \ "fichier"
 2 / Alias for an existing remote
   \ "alias"
 3 / Amazon Drive
   \ "amazon cloud drive"
 4 / Amazon S3 Compliant Storage Providers including AWS, Alibaba, Ceph, Digital Ocean, Dreamhost, IBM COS, Minio, and Tencent COS
   \ "s3"
 5 / Backblaze B2
   \ "b2"
 6 / Box
   \ "box"
 7 / Cache a remote
   \ "cache"
 8 / Citrix Sharefile
   \ "sharefile"
 9 / Compress a remote
   \ "compress"
10 / Dropbox
   \ "dropbox"
11 / Encrypt/Decrypt a remote
   \ "crypt"
12 / Enterprise File Fabric
   \ "filefabric"
13 / FTP Connection
   \ "ftp"
14 / Google Cloud Storage (this is not Google Drive)
   \ "google cloud storage"
15 / Google Drive
   \ "drive"
16 / Google Photos
   \ "google photos"
17 / Hadoop distributed file system
   \ "hdfs"
18 / Hubic
   \ "hubic"
19 / In memory object storage system.
   \ "memory"
20 / Jottacloud
   \ "jottacloud"
21 / Koofr
   \ "koofr"
22 / Local Disk
   \ "local"
23 / Mail.ru Cloud
   \ "mailru"
24 / Mega
   \ "mega"
25 / Microsoft Azure Blob Storage
   \ "azureblob"
26 / Microsoft OneDrive
   \ "onedrive"
27 / OpenDrive
   \ "opendrive"
28 / OpenStack Swift (Rackspace Cloud Files, Memset Memstore, OVH)
   \ "swift"
29 / Pcloud
   \ "pcloud"
30 / Put.io
   \ "putio"
31 / QingCloud Object Storage
   \ "qingstor"
32 / SSH/SFTP Connection
   \ "sftp"
33 / Sugarsync
   \ "sugarsync"
34 / Tardigrade Decentralized Cloud Storage
   \ "tardigrade"
35 / Transparently chunk/split large files
   \ "chunker"
36 / Union merges the contents of several upstream fs
   \ "union"
37 / Webdav
   \ "webdav"
38 / Yandex Disk
   \ "yandex"
39 / Zoho
   \ "zoho"
40 / http Connection
   \ "http"
41 / premiumize.me
   \ "premiumizeme"
42 / seafile
   \ "seafile"
Storage&gt; 26 *//第二步：选择26 Microsoft OneDrive*
** See help for onedrive backend at: https://rclone.org/onedrive/ **

OAuth Client Id
Leave blank normally.
Enter a string value. Press Enter for the default ("").
client_id&gt;
OAuth Client Secret
Leave blank normally.
Enter a string value. Press Enter for the default ("").
client_secret&gt;
Choose national cloud region for OneDrive.
Enter a string value. Press Enter for the default ("global").
Choose a number from below, or type in your own value
 1 / Microsoft Cloud Global
   \ "global"
 2 / Microsoft Cloud for US Government
   \ "us"
 3 / Microsoft Cloud Germany
   \ "de"
 4 / Azure and Office 365 operated by 21Vianet in China
   \ "cn"
region&gt; 1 *//第三步：选择1 国际版*
Edit advanced config? (y/n)
y) Yes
n) No (default)
y/n&gt; n *//第四步：选择n 不进行高级设置*
Remote config
Use auto config?
 * Say Y if not sure
 * Say N if you are working on a remote or headless machine
y) Yes (default)
n) No
y/n&gt; y *//第五步：输入y 使用自动配置授权*

*//输入y后会打开默认浏览器 登录Microsoft账号后 选择 是 即可*

If your browser doesn't open automatically go to the following link: http://127.0.0.1:53682/auth?state=bWBcEsbfRHRZIgcZY7Fg_w
Log in and authorize rclone for access
Waiting for code...
Got code
Choose a number from below, or type in an existing value
 1 / OneDrive Personal or Business
   \ "onedrive"
 2 / Root Sharepoint site
   \ "sharepoint"
 3 / Sharepoint site name or URL (e.g. mysite or https://contoso.sharepoint.com/sites/mysite)
   \ "url"
 4 / Search for a Sharepoint site
   \ "search"
 5 / Type in driveID (advanced)
   \ "driveid"
 6 / Type in SiteID (advanced)
   \ "siteid"
 7 / Sharepoint server-relative path (advanced, e.g. /teams/hr)
   \ "path"
Your choice&gt; 1 *//第六步：选择1 onedrive*
Found 1 drives, please select the one you want to use:
0: OneDrive (business) id=******************
Chose drive to use:&gt; *0 //第七步：选择0: 账号ID*
Found drive 'root' of type 'business', URL: *******************
Is that okay?
y) Yes (default)
n) No
y/n&gt; y *//第八步：选择y 获取账号root权限*
--------------------
[tutu]
type = onedrive
region = global
token = *******
drive_id = *********
drive_type = business
--------------------
y) Yes this is OK (default)
e) Edit this remote
d) Delete this remote
y/e/d&gt; y *//第九步：选择y 确认配置*
Current remotes:

Name                 Type
====                 ====
tutu                   onedrive

e) Edit existing remote
n) New remote
d) Delete remote
r) Rename remote
c) Copy remote
s) Set configuration password
q) Quit config
e/n/d/r/c/s/q&gt; q *//第十步：选择q 退出*

C:\Users\Administrator&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="2、挂载OneDrive为本地硬盘"><a href="#2、挂载OneDrive为本地硬盘" class="headerlink" title="2、挂载OneDrive为本地硬盘"></a>2、挂载OneDrive为本地硬盘</h2><p>这里请使用<code>git bash</code>终端执行以下命令，因为我使用cmd和powershell都关闭终端后挂载程序退出、本地挂载的OneDrive的现象。如果你的windows没有安装git，请自行安装。 cmd的话，cmd是不能退出的，要保持cmd不退出本地硬盘才一直挂载着。</p>
<p>在 git bash 中输入以下挂载命令：</p>
<pre class="line-numbers language-none"><code class="language-none">rclone mount tutu:/  Q: --cache-dir C:\onedrivecache --vfs-cache-mode writes &amp;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>其中：</p>
<ul>
<li><code>tutu</code>替换为你自己前面设置的名称。</li>
<li><code>Q</code>: 替换为你想要挂载的硬盘后的盘符名称，不要记住和本地的C、D盘等重复。</li>
<li>C:\onedrivecache为本地缓存目录，可自行设置。</li>
</ul>
<p>出现：<code>The service rclone has been started</code>则说明挂载成功。</p>
<p>然后输入<code>exit</code>退出即可。</p>
<p>然后就可以看到本地一个盘，往里面复制文件就是上传，从里面复制文件到其他盘就是下载。</p>
<h2 id="3、设置自启动挂载"><a href="#3、设置自启动挂载" class="headerlink" title="3、设置自启动挂载"></a>3、设置自启动挂载</h2><p>创建一个名称为<code>startup_rclone.bat</code>的文件，里面的挂载命令：</p>
<pre class="line-numbers language-none"><code class="language-none">rclone mount tutu:/  Q: --cache-dir C:\onedrivecache --vfs-cache-mode writes &amp;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>将这个文件搜索<code>C:\Users\用户名\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Startup</code>中</p>
<p>计算机重启后要自动挂置的云盘了，当然是因为调用是cmd所以还是不能关闭运行的cmd。下面介绍一种利用Rclone GUI进行管理的使用方法。</p>
]]></content>
      <categories>
        <category>教程</category>
        <category>好用的软件</category>
      </categories>
      <tags>
        <tag>Windows</tag>
        <tag>OneDrive</tag>
        <tag>网盘</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>/2022/11/08/Mysql%E5%88%9B%E5%BB%BA%E7%94%A8%E6%88%B7%E5%92%8C%E7%BB%99%E4%BA%88%E6%9D%83%E9%99%90/</url>
    <content><![CDATA[<h1 id="Mysql创建用户和给予权限"><a href="#Mysql创建用户和给予权限" class="headerlink" title="Mysql创建用户和给予权限"></a>Mysql创建用户和给予权限</h1><h2 id="1-创建用户"><a href="#1-创建用户" class="headerlink" title="1.创建用户"></a>1.创建用户</h2><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; create user 'work'@'localhost' identified by 'GenshinImpactOffline2022';
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h2 id="2-赋予权限"><a href="#2-赋予权限" class="headerlink" title="2.赋予权限"></a>2.赋予权限</h2><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; GRANT ALL PRIVILEGES ON  *.* TO ‘work’@‘localhost’ IDENTIFIED BY ''GenshinImpactOffline2022’；<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h2 id="3-刷新权限"><a href="#3-刷新权限" class="headerlink" title="3.刷新权限"></a>3.刷新权限</h2><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">flush privileges;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2022/10/19/Linux%E7%8E%AF%E5%A2%83%E4%B8%8B%E5%AE%89%E8%A3%85rclone%E9%85%8D%E7%BD%AEgoogle%20drive%E4%B8%8A%E4%BC%A0%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<h1 id="Linux环境下安装rclone配置google-drive上传教程"><a href="#Linux环境下安装rclone配置google-drive上传教程" class="headerlink" title="Linux环境下安装rclone配置google drive上传教程"></a>Linux环境下安装rclone配置google drive上传教程</h1><h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h2><p>我们在云服务器上，很多情况下会发现配置的硬盘根本就不够，想增加容量但是又需要加钱，有没有什么好一点的方案来增加我们的服务器容量，来为我们离线下载提供足够的空间。</p>
<p>如果我们可以后面再通过自动脚本，实现qB下载的文件自动上传，效果更好。</p>
<p>这一次我们先介绍如何在Linux上配置好rclone然后进行简单的上传。</p>
<h2 id="2-配置"><a href="#2-配置" class="headerlink" title="2. 配置"></a>2. 配置</h2><h3 id="2-1-配置前的一些说明"><a href="#2-1-配置前的一些说明" class="headerlink" title="2-1. 配置前的一些说明"></a>2-1. 配置前的一些说明</h3><p>rclone v1.59.1</p>
<p>之前配置 gd 的方法是会返回一个网页链接进行授权，只需要本地浏览器打开后，登陆，复制获取到的代码粘贴回车就行。</p>
<p>随着 rclone 更新到 v1.57 后，新版本提示：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Option config_token.
For this to work, you will need rclone available on a machine that has
a web browser available.
For <span class="token function">more</span> <span class="token builtin class-name">help</span> and alternate methods see: https://rclone.org/remote_setup/
Execute the following on the machine with the web browser <span class="token punctuation">(</span>same rclone
version recommended<span class="token punctuation">)</span>:
        rclone authorize <span class="token string">"drive"</span> <span class="token string">"eyJzY29wZSI6ImRyaXZlIn0"</span>
Then <span class="token function">paste</span> the result.
Enter a value.
config_token<span class="token operator">&gt;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>没有授权链接了，会提示没有浏览器。</p>
<p>所以只能本地 windows 上弄好了，再把配置文件rclone.conf传到 服务器 上了。</p>
<h3 id="2-2-创建rclone-conf配置文件"><a href="#2-2-创建rclone-conf配置文件" class="headerlink" title="2-2. 创建rclone.conf配置文件"></a>2-2. 创建rclone.conf配置文件</h3><p>我们先来到Windows上面来创建rclone.conf配置文件。</p>
<p><strong>google drive盘有区分个人盘和团队盘</strong></p>
<p>演示个人盘配置，团队盘也大同小异。</p>
<h4 id="2-2-1-rclone下载"><a href="#2-2-1-rclone下载" class="headerlink" title="2-2-1. rclone下载"></a>2-2-1. rclone下载</h4><p><a href="https://rclone.org/downloads/">官网下载：https://rclone.org/downloads/</a></p>
<p><img src="http://158.101.152.174/wp-content/uploads/2022/09/01-1024x309.png" alt="img"></p>
<p>或者你可以在GitHub下载</p>
<p><a href="https://github.com/rclone/rclone/releases">Github下载：https://github.com/rclone/rclone/releases</a></p>
<p><strong>下载后解压</strong></p>
<p>我这里直接解压到我的桌面</p>
<p><img src="http://158.101.152.174/wp-content/uploads/2022/09/03.jpg" alt="img"></p>
<h4 id="2-2-2-为rclone配置环境变量"><a href="#2-2-2-为rclone配置环境变量" class="headerlink" title="2-2-2. 为rclone配置环境变量"></a>2-2-2. 为rclone配置环境变量</h4><ol>
<li>点开电脑的查找输入查看高级系统设置</li>
<li>选择环境变量</li>
<li>找到刚刚解压的Rclone的路径添加进Path变量</li>
<li>检查rclone是否配置成功，然后按打开，当然也可以打开，输入，如果出现下面的输出则安装成功，否则检查整个步骤的环境是否配置正确。<code>rclone --version</code></li>
</ol>
<p><img src="http://158.101.152.174/wp-content/uploads/2022/09/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE-2022-09-27-224342-1.jpg" alt="img"></p>
<p><img src="http://158.101.152.174/wp-content/uploads/2022/09/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE-2022-09-27-224819.jpg" alt="img"></p>
<p><img src="http://158.101.152.174/wp-content/uploads/2022/09/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE-2022-09-27-225012.jpg" alt="img"></p>
<p><img src="http://158.101.152.174/wp-content/uploads/2022/09/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE-2022-09-27-225253.jpg" alt="img"></p>
<h4 id="2-2-3-正式配置"><a href="#2-2-3-正式配置" class="headerlink" title="2-2-3. 正式配置"></a>2-2-3. 正式配置</h4><p>来到命令提示符</p>
<p>C:\Users\Administrator&gt;rclone config</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">No remotes found - <span class="token function">make</span> a new one
n<span class="token punctuation">)</span> New remote
s<span class="token punctuation">)</span> Set configuration password
q<span class="token punctuation">)</span> Quit config
n/s/q<span class="token operator">&gt;</span> n *//第一步：新建配置*
name<span class="token operator">&gt;</span> tutugd
Type of storage to configure.
Enter a string value. Press Enter <span class="token keyword">for</span> the default <span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span>.
Choose a number from below, or <span class="token builtin class-name">type</span> <span class="token keyword">in</span> your own value
 <span class="token number">1</span> / 1Fichier
   <span class="token punctuation">\</span> <span class="token string">"fichier"</span>
 <span class="token number">2</span> / Alias <span class="token keyword">for</span> an existing remote
   <span class="token punctuation">\</span> <span class="token string">"alias"</span>
 <span class="token number">3</span> / Amazon Drive
   <span class="token punctuation">\</span> <span class="token string">"amazon cloud drive"</span>
 <span class="token number">4</span> / Amazon S3 Compliant Storage Providers including AWS, Alibaba, Ceph, Digital Ocean, Dreamhost, IBM COS, Minio, and Tencent COS
   <span class="token punctuation">\</span> <span class="token string">"s3"</span>
 <span class="token number">5</span> / Backblaze B2
   <span class="token punctuation">\</span> <span class="token string">"b2"</span>
 <span class="token number">6</span> / Box
   <span class="token punctuation">\</span> <span class="token string">"box"</span>
 <span class="token number">7</span> / Cache a remote
   <span class="token punctuation">\</span> <span class="token string">"cache"</span>
 <span class="token number">8</span> / Citrix Sharefile
   <span class="token punctuation">\</span> <span class="token string">"sharefile"</span>
 <span class="token number">9</span> / Compress a remote
   <span class="token punctuation">\</span> <span class="token string">"compress"</span>
<span class="token number">10</span> / Dropbox
   <span class="token punctuation">\</span> <span class="token string">"dropbox"</span>
<span class="token number">11</span> / Encrypt/Decrypt a remote
   <span class="token punctuation">\</span> <span class="token string">"crypt"</span>
<span class="token number">12</span> / Enterprise File Fabric
   <span class="token punctuation">\</span> <span class="token string">"filefabric"</span>
<span class="token number">13</span> / FTP Connection
   <span class="token punctuation">\</span> <span class="token string">"ftp"</span>
<span class="token number">14</span> / Google Cloud Storage <span class="token punctuation">(</span>this is not Google Drive<span class="token punctuation">)</span>
   <span class="token punctuation">\</span> <span class="token string">"google cloud storage"</span>
<span class="token number">15</span> / Google Drive
   <span class="token punctuation">\</span> <span class="token string">"drive"</span>
<span class="token number">16</span> / Google Photos
   <span class="token punctuation">\</span> <span class="token string">"google photos"</span>
<span class="token number">17</span> / Hadoop distributed <span class="token function">file</span> system
   <span class="token punctuation">\</span> <span class="token string">"hdfs"</span>
<span class="token number">18</span> / Hubic
   <span class="token punctuation">\</span> <span class="token string">"hubic"</span>
<span class="token number">19</span> / In memory object storage system.
   <span class="token punctuation">\</span> <span class="token string">"memory"</span>
<span class="token number">20</span> / Jottacloud
   <span class="token punctuation">\</span> <span class="token string">"jottacloud"</span>
<span class="token number">21</span> / Koofr
   <span class="token punctuation">\</span> <span class="token string">"koofr"</span>
<span class="token number">22</span> / Local Disk
   <span class="token punctuation">\</span> <span class="token string">"local"</span>
<span class="token number">23</span> / Mail.ru Cloud
   <span class="token punctuation">\</span> <span class="token string">"mailru"</span>
<span class="token number">24</span> / Mega
   <span class="token punctuation">\</span> <span class="token string">"mega"</span>
<span class="token number">25</span> / Microsoft Azure Blob Storage
   <span class="token punctuation">\</span> <span class="token string">"azureblob"</span>
<span class="token number">26</span> / Microsoft OneDrive
   <span class="token punctuation">\</span> <span class="token string">"onedrive"</span>
<span class="token number">27</span> / OpenDrive
   <span class="token punctuation">\</span> <span class="token string">"opendrive"</span>
<span class="token number">28</span> / OpenStack Swift <span class="token punctuation">(</span>Rackspace Cloud Files, Memset Memstore, OVH<span class="token punctuation">)</span>
   <span class="token punctuation">\</span> <span class="token string">"swift"</span>
<span class="token number">29</span> / Pcloud
   <span class="token punctuation">\</span> <span class="token string">"pcloud"</span>
<span class="token number">30</span> / Put.io
   <span class="token punctuation">\</span> <span class="token string">"putio"</span>
<span class="token number">31</span> / QingCloud Object Storage
   <span class="token punctuation">\</span> <span class="token string">"qingstor"</span>
<span class="token number">32</span> / SSH/SFTP Connection
   <span class="token punctuation">\</span> <span class="token string">"sftp"</span>
<span class="token number">33</span> / Sugarsync
   <span class="token punctuation">\</span> <span class="token string">"sugarsync"</span>
<span class="token number">34</span> / Tardigrade Decentralized Cloud Storage
   <span class="token punctuation">\</span> <span class="token string">"tardigrade"</span>
<span class="token number">35</span> / Transparently chunk/split large files
   <span class="token punctuation">\</span> <span class="token string">"chunker"</span>
<span class="token number">36</span> / Union merges the contents of several upstream fs
   <span class="token punctuation">\</span> <span class="token string">"union"</span>
<span class="token number">37</span> / Webdav
   <span class="token punctuation">\</span> <span class="token string">"webdav"</span>
<span class="token number">38</span> / Yandex Disk
   <span class="token punctuation">\</span> <span class="token string">"yandex"</span>
<span class="token number">39</span> / Zoho
   <span class="token punctuation">\</span> <span class="token string">"zoho"</span>
<span class="token number">40</span> / http Connection
   <span class="token punctuation">\</span> <span class="token string">"http"</span>
<span class="token number">41</span> / premiumize.me
   <span class="token punctuation">\</span> <span class="token string">"premiumizeme"</span>
<span class="token number">42</span> / seafile
   <span class="token punctuation">\</span> <span class="token string">"seafile"</span>
Storage<span class="token operator">&gt;</span> <span class="token number">15</span> *//找到 Google Drive 这里可以看到是 <span class="token number">18</span> 号 第二步：选择15 Google Drive*<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Option client_id.
Google Application Client Id
Setting your own is recommended.
See https://rclone.org/drive/<span class="token comment">#making-your-own-client-id for how to create your own.</span>
If you leave this blank, it will use an internal key <span class="token function">which</span> is low performance.
Enter a value. Press Enter to leave empty.
client_id<span class="token operator">&gt;</span> 

<span class="token comment"># 留空就行</span>

Option client_secret.
OAuth Client Secret.
Leave blank normally.
Enter a value. Press Enter to leave empty.
client_secret<span class="token operator">&gt;</span> 

<span class="token comment"># 留空就行</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>当然这里你也可以自己配置 GoogleDriveAPI。</p>
<p>Google API 控制台地址<br><code>https://console.developers.google.com/</code></p>
<p>我们还是直接留空默认得了。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Option scope.
Scope that rclone should use when requesting access from drive.
Choose a number from below, or <span class="token builtin class-name">type</span> <span class="token keyword">in</span> your own value.
Press Enter to leave empty.
 <span class="token number">1</span> / Full access all files, excluding Application Data Folder.
   <span class="token punctuation">\</span> <span class="token punctuation">(</span>drive<span class="token punctuation">)</span>
 <span class="token number">2</span> / Read-only access to <span class="token function">file</span> metadata and <span class="token function">file</span> contents.
   <span class="token punctuation">\</span> <span class="token punctuation">(</span>drive.readonly<span class="token punctuation">)</span>
   / Access to files created by rclone only.
 <span class="token number">3</span> <span class="token operator">|</span> These are visible <span class="token keyword">in</span> the drive website.
   <span class="token operator">|</span> File authorization is revoked when the user deauthorizes the app.
   <span class="token punctuation">\</span> <span class="token punctuation">(</span>drive.file<span class="token punctuation">)</span>
   / Allows <span class="token builtin class-name">read</span> and <span class="token function">write</span> access to the Application Data folder.
 <span class="token number">4</span> <span class="token operator">|</span> This is not visible <span class="token keyword">in</span> the drive website.
   <span class="token punctuation">\</span> <span class="token punctuation">(</span>drive.appfolder<span class="token punctuation">)</span>
   / Allows read-only access to <span class="token function">file</span> metadata but
 <span class="token number">5</span> <span class="token operator">|</span> does not allow any access to <span class="token builtin class-name">read</span> or download <span class="token function">file</span> content.
   <span class="token punctuation">\</span> <span class="token punctuation">(</span>drive.metadata.readonly<span class="token punctuation">)</span>
scope<span class="token operator">&gt;</span> <span class="token number">1</span>

<span class="token comment"># 输入 1 完全读写权限</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>回车</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Option service_account_file.
Service Account Credentials JSON <span class="token function">file</span> path.
Leave blank normally.
Needed only <span class="token keyword">if</span> you want use SA instead of interactive login.
Leading <span class="token variable"><span class="token variable">`</span>~<span class="token variable">`</span></span> will be expanded <span class="token keyword">in</span> the <span class="token function">file</span> name as will environment variables such as <span class="token variable"><span class="token variable">`</span>$<span class="token punctuation">{</span>RCLONE_CONFIG_DIR<span class="token punctuation">}</span><span class="token variable">`</span></span><span class="token builtin class-name">.</span>
Enter a value. Press Enter to leave empty.
service_account_file<span class="token operator">&gt;</span> 

<span class="token comment"># 留空就行</span>

Edit advanced config?
y<span class="token punctuation">)</span> Yes
n<span class="token punctuation">)</span> No <span class="token punctuation">(</span>default<span class="token punctuation">)</span>
y/n<span class="token operator">&gt;</span> 

<span class="token comment"># 输入 n</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>回车</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Use auto config?
 * Say Y <span class="token keyword">if</span> not sure
 * Say N <span class="token keyword">if</span> you are working on a remote or headless machine

y<span class="token punctuation">)</span> Yes <span class="token punctuation">(</span>default<span class="token punctuation">)</span>
n<span class="token punctuation">)</span> No
y/n<span class="token operator">&gt;</span> 

<span class="token comment"># 输入 n</span>
<span class="token comment"># 提示：</span>

Option config_token.
For this to work, you will need rclone available on a machine that has
a web browser available.
For <span class="token function">more</span> <span class="token builtin class-name">help</span> and alternate methods see: https://rclone.org/remote_setup/
Execute the following on the machine with the web browser <span class="token punctuation">(</span>same rclone
version recommended<span class="token punctuation">)</span>:
        rclone authorize <span class="token string">"drive"</span> <span class="token string">"eyJzY29wZSI6ImRyaXZlIn0"</span>
Then <span class="token function">paste</span> the result.
Enter a value.
config_token<span class="token operator">&gt;</span> 等待输入

<span class="token comment"># 回到本地 windows 上</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>这里我们回到windows上用管理员权限再打开一个命令提示符</p>
<pre class="line-numbers language-none"><code class="language-none">cd 我们解压rclone的目录
rclone authorize "drive"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>会自动打开浏览器让你登录你的<strong>google</strong>账户</p>
<p>这里我们在浏览器授权里进行一下授权操作。</p>
<p>点击允许后，浏览器出现<code>Success!</code>提示证明成功了。</p>
<p>出现大一串字符。</p>
<p>复制 access_token 注意：连同大括号一同复制，从大括号开始到大括号结束。</p>
<p>然后把复制的 code 粘贴到 SSH 终端上回车。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Configure this as a Shared Drive <span class="token punctuation">(</span>Team Drive<span class="token punctuation">)</span>?

y<span class="token punctuation">)</span> Yes
n<span class="token punctuation">)</span> No <span class="token punctuation">(</span>default<span class="token punctuation">)</span>
y/n<span class="token operator">&gt;</span> 

<span class="token comment">#输入 n 默认回车就是 n 了</span>

Configuration complete.
Options:
- type: drive
- scope: drive
- token: <span class="token punctuation">{</span><span class="token string">"access_token"</span><span class="token builtin class-name">:</span><span class="token string">"ya2PJrRmKORRz9dTlkq-on8XQQE65dr8CQEx-3PjmyPoFw6VxZxYYw0163"</span>,<span class="token string">"token_type"</span><span class="token builtin class-name">:</span><span class="token string">"Bearer"</span>,<span class="token string">"refresh_token"</span><span class="token builtin class-name">:</span><span class="token string">"1//0e7xWWDX2tRgPCgYIARAAGA4SNwF-L9Irvw-ZnCue7vgz6kb6jYstKGyZsBliCvNGbj9tWd1mZGEoegiCYxoPIU0z9j6nmFck41c"</span>,<span class="token string">"expiry"</span><span class="token builtin class-name">:</span><span class="token string">"2022-09-08T22:42:59.5596286+08:00"</span><span class="token punctuation">}</span>
- team_drive: 
Keep this <span class="token string">"1"</span> remote?
y<span class="token punctuation">)</span> Yes this is OK <span class="token punctuation">(</span>default<span class="token punctuation">)</span>
e<span class="token punctuation">)</span> Edit this remote
d<span class="token punctuation">)</span> Delete this remote
y/e/d<span class="token operator">&gt;</span> 

<span class="token comment"># 输入 y 完成。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>团队盘/共享盘</strong></p>
<p>跟个人盘差不多，只不过进行到最后有一些差异</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">2022</span>/09/13 <span class="token number">14</span>:38:20 NOTICE: If your browser doesn't <span class="token function">open</span> automatically go to the following link: http://127.0.0.1:53682/auth?state<span class="token operator">=</span>XK4Khs8g
<span class="token number">2022</span>/09/13 <span class="token number">14</span>:38:20 NOTICE: Log <span class="token keyword">in</span> and authorize rclone <span class="token keyword">for</span> access
<span class="token number">2022</span>/09/13 <span class="token number">14</span>:38:20 NOTICE: Waiting <span class="token keyword">for</span> code<span class="token punctuation">..</span>.
<span class="token number">2022</span>/09/13 <span class="token number">14</span>:38:25 NOTICE: Got code
Configure this as a Shared Drive <span class="token punctuation">(</span>Team Drive<span class="token punctuation">)</span>?

y<span class="token punctuation">)</span> Yes
n<span class="token punctuation">)</span> No <span class="token punctuation">(</span>default<span class="token punctuation">)</span>
y/n<span class="token operator">&gt;</span> y

<span class="token comment"># 这里会提示，Configure this as a Shared Drive (Team Drive)? 将此配置为共享驱动器（团队驱动器）？默认回车是 N ，如果是团队盘/共享盘的话，要选 y 。</span>

Option config_team_drive.
Shared Drive
Choose a number from below, or <span class="token builtin class-name">type</span> <span class="token keyword">in</span> your own string value.
Press Enter <span class="token keyword">for</span> the default <span class="token punctuation">(</span>0AGt8URxxxxPVA<span class="token punctuation">)</span>.
 <span class="token number">1</span> / Patricia
   <span class="token punctuation">\</span> <span class="token punctuation">(</span>0AGtXXXXX9PVA<span class="token punctuation">)</span>
config_team_drive<span class="token operator">&gt;</span> 

<span class="token comment"># 然后就会检测你的账户下有几个团队盘/共享盘，这串代码的意识就是：https://drive.google.com/drive/u/2/folders/0AGtXXXXX9PVA</span>
<span class="token comment"># 点开你的团队盘/共享盘，网址栏最后那一串代码。</span>
<span class="token comment"># 然后一路回车就行了。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h4 id="2-2-4-服务器下载安装rclone"><a href="#2-2-4-服务器下载安装rclone" class="headerlink" title="2-2-4. 服务器下载安装rclone"></a>2-2-4. 服务器下载安装rclone</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">apt-get</span> update
<span class="token function">curl</span> https://rclone.org/install.sh <span class="token operator">|</span> <span class="token function">sudo</span> <span class="token function">bash</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>



<h4 id="2-2-5-配置到服务器"><a href="#2-2-5-配置到服务器" class="headerlink" title="2-2-5. 配置到服务器"></a>2-2-5. 配置到服务器</h4><p>我们在windows的C:\Users\xxx\AppData\Roaming\rclone下找到创建好的rclone.conf</p>
<p>然后上传到我们的服务器的/root/.config/rclone目录下</p>
<p>然后就大功告成了。</p>
<h2 id="3-测试上传命令"><a href="#3-测试上传命令" class="headerlink" title="3.测试上传命令"></a>3.测试上传命令</h2><p>上传之前别忘装一个 screen</p>
<p>一般情况上传的时候，我们把终端一关闭，程序运行就停止了，但有时候上传的文件比较多，总不能一直开着终端，所以 screen 的做用就是让你关闭终端后依旧保持上传。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">apt-get</span> <span class="token function">install</span> <span class="token parameter variable">-y</span> <span class="token function">screen</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>测试一下上传。我把服务器本地的**/root/download/<strong>目录里面的文件复制到谷歌云的</strong>upload**目录里。</p>
<p>开启4线程，并显示上传详情</p>
<p>命令就是：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">screen</span> rclone copy /root/download/ gd-ceshi:/upload <span class="token parameter variable">--transfers</span> <span class="token number">4</span> <span class="token parameter variable">-P</span>

<span class="token comment"># 你说你不想复制？想上传完就删除本地的文件？</span>
<span class="token comment">## 那就把 copy 这个参数 改成 move</span>
rclone move /root/googledrive/ tutugd:/dianyin <span class="token parameter variable">--transfers</span> <span class="token number">4</span> <span class="token parameter variable">-P</span>
<span class="token comment"># 你说你的服务器cpu性能强劲？网速也快？4线程太慢了，想要12线程？</span>
<span class="token comment">## 那就把--transfers 4 这个 4 改成 12</span>

<span class="token comment"># 你说你想反过来？把云盘的文件下载到服务器本地？</span>
<span class="token comment">## 那就倒过来：screen rclone copy gd-ceshi:/upload /root/download/ --transfers 4 -P</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.ectrv.com/?p=917">https://www.ectrv.com/?p=917</a></p>
<p><a href="https://hechuan.me/rclone-google-drive">https://hechuan.me/rclone-google-drive</a></p>
<p><a href="https://hechuan.me/rclone">https://hechuan.me/rclone</a></p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2022/10/26/Plex%20%E6%8F%92%E4%BB%B6%20%E5%8A%A0%E8%BD%BD%E6%9C%AC%E5%9C%B0%20nfo%20%E6%96%87%E4%BB%B6%E5%92%8C%E6%9C%AC%E5%9C%B0%E5%A4%96%E6%8C%82%E5%AD%97%E5%B9%95/</url>
    <content><![CDATA[<h1 id="Plex-插件-加载本地-nfo-文件和本地外挂字幕"><a href="#Plex-插件-加载本地-nfo-文件和本地外挂字幕" class="headerlink" title="Plex 插件 加载本地 nfo 文件和本地外挂字幕"></a>Plex 插件 加载本地 nfo 文件和本地外挂字幕</h1><p>之前在搭建本地媒体服务器上介绍过如果安装Plex和使用<a href="https://www.tinymediamanager.org/">tinyMediaManager</a>进行刮削tMM 的好处在于你可以清楚地看到每部电影、电视剧的各种信息，是没找到还是漏了一些或者全找到了，一目了然，但是当 Plex 导入资料库时，往往不会用你搜集好的信息和图片，可能会自己再去搜一次，搜的不一定对，浪费时间，如果出现要手工调整的情况操作起来也比 tMM 麻烦一些，如何让 Plex 自动识别本地的信息呢，需要利用到 Plex 的插件：XBMCnfoMoviesImporter 和 XBMCnfoTVImporter。</p>
<h2 id="1-加载插件"><a href="#1-加载插件" class="headerlink" title="1 加载插件"></a>1 加载插件</h2><h3 id="1-1-下载插件"><a href="#1-1-下载插件" class="headerlink" title="1.1 下载插件"></a>1.1 下载插件</h3><p>这里提供三个下载方式，其中包含的文件都是一样的，GitHub 链接、百度网盘和我的私有网盘。如果网盘都失效了而且 GitHub链接出现问题，可以自行去 GitHub上搜索这两个插件。</p>
<p>GitHub：</p>
<p> XBMCnfoMoviesImporter：<a href="https://github.com/gboudreau/XBMCnfoMoviesImporter.bundle">仓库地址</a> <a href="https://github.com/gboudreau/XBMCnfoMoviesImporter.bundle/archive/master.zip">下载地址</a></p>
<p> XBMCnfoTVImporter：<a href="https://github.com/gboudreau/XBMCnfoTVImporter.bundle">仓库地址</a> <a href="https://github.com/gboudreau/XBMCnfoTVImporter.bundle/archive/master.zip">下载地址</a></p>
<h3 id="1-2-安装插件"><a href="#1-2-安装插件" class="headerlink" title="1.2 安装插件"></a>1.2 安装插件</h3><p>下载完成后解压，你会得到两个文件夹，如果你是从 GitHub 上下载，注意更改一下文件夹的名字，确保这两个文件夹的名字是 <strong>XBMCnfoMoviesImporter.bundle</strong> 和 <strong>XBMCnfoTVImporter.bundle</strong>。然后将这两个文件夹放到 Plex 的插件目录下，在官网的 <a href="https://support.plex.tv/articles/202915258-where-is-the-plex-media-server-data-directory-located/">说明文档</a> 中可以找到你的平台对应的目录。</p>
<p>我是在 Ubuntu Server 中安装的，所以我的目录为 <code>/var/lib/plexmediaserver/Library/Application Support/Plex Media Server/Plug-ins/</code> ，注意后面多了一个 <code>/Plug-ins/</code>，官网给的目录是 Plex 的安装目录，我们要把插件复制到 <strong>插件文件夹</strong> 里去。</p>
<p>将两个文件夹都丢进去之后，我们重启 Plex 服务，Linux 用户可以使用命令 <code>sudo service plexmediaserver restart</code>，接下来进行一下插件的配置。</p>
<h2 id="2-配置插件"><a href="#2-配置插件" class="headerlink" title="2 配置插件"></a>2 配置插件</h2><h3 id="2-1-使-Plex-加载本地信息"><a href="#2-1-使-Plex-加载本地信息" class="headerlink" title="2.1 使 Plex 加载本地信息"></a>2.1 使 Plex 加载本地信息</h3><p>说是配置插件，实际上是配置资料库的代理。进入 Plex 的控制面板，点击设置，左边的导航条拉到最下面，选择 <strong>管理</strong> 下的 <strong>资料库</strong>，找到你需要操作的资料库点击 <strong>编辑资料库</strong>。</p>
<p>在编辑面板中选择 <strong>高级</strong>，并更改代理，如果是电影资料库就将代理改为 XBMCnfoMoviesImporter，如果是电视节目资料库就将代理改为 XBMCnfoTVImporter。</p>
<p>根据网上的经验，最好关闭 Enable generating Collections from tags 这一选项（只有电影资料库有）并将 Collections 选项调整为 Disabled。</p>
<p>![屏幕截图 2022-10-26 201915](D:\博客文章图片\Plex 插件 加载本地 nfo 文件和本地外挂字幕\屏幕截图 2022-10-26 201915.JPG)</p>
<h3 id="使-Plex-加载本地字幕"><a href="#使-Plex-加载本地字幕" class="headerlink" title="使 Plex 加载本地字幕"></a>使 Plex 加载本地字幕</h3><p>到这一步，插件已经可以帮我们加载本地的影片信息了，但是还不能自动加载本地外挂字幕，即使字幕的命名没有问题，Plex 也不能识别，还需要对插件本身进行配置。</p>
<p>从左边导航栏找到 <strong>设置</strong> 下的 <strong>代理</strong>，在右边的电影和电视节目中可以看到我们刚刚加载的插件，将插件下的 Local Media Assets <strong>勾选上</strong>。</p>
<p>![屏幕截图 2022-10-26 202217](D:\博客文章图片\Plex 插件 加载本地 nfo 文件和本地外挂字幕\屏幕截图 2022-10-26 202217.JPG)</p>
<p>这时候，刷新资料库的元数据，你会发现所有的信息包括海报、缩略图、字幕等全都已经按照本地的文件加载好了。</p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2022/10/31/Ubuntu%E4%B8%8B%E5%A6%82%E4%BD%95%E8%A7%A3%E5%8E%8Bzip%E6%96%87%E4%BB%B6/</url>
    <content><![CDATA[<h1 id="Ubuntu下如何解压zip文件"><a href="#Ubuntu下如何解压zip文件" class="headerlink" title="Ubuntu下如何解压zip文件"></a>Ubuntu下如何解压zip文件</h1><h2 id="1-安装解压软件"><a href="#1-安装解压软件" class="headerlink" title="1. 安装解压软件"></a>1. 安装解压软件</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> <span class="token function">unzip</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><strong>step # 2</strong> 解压文件（注意：要切换到压缩包的目录中去）</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">unzip</span> xxxxx.zip<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h2 id="2-扩展："><a href="#2-扩展：" class="headerlink" title="2. 扩展："></a>2. 扩展：</h2><p>1、把文件解压到当前目录下</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">unzip</span> xxxxx.zip<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>2、如果要把文件解压到指定的目录下，需要用到-d参数(-d指定目标路径,file.zip是需要解压的，<code>destination_folder是指定的目录下</code>)。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">unzip</span> file.zip <span class="token parameter variable">-d</span> destination_folder<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>比如：我在/home/1/下载 有个123.zip</p>
<p>而我要把这个压缩包解压到/home/2/test</p>
<p>目录下,首先就要到压缩包这个目录下</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /home/1/下载<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>然后输入：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">unzip</span> <span class="token number">123</span>.zip <span class="token parameter variable">-d</span> /home/2/test<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p> 然后找到/home/2/test目录，可以看到test文件夹。是第二次解压，还会出现选项根据需求选择就行。</p>
<p>我们根据自己选择对应的就好了.当然也可以使用如下命令：（其中/temp是指定的目录，test.zip是需要解压的压缩包）</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">unzip</span> <span class="token parameter variable">-d</span> /temp test.zip<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>3、解压的时候，有时候不想覆盖已经存在的文件，那么可以加上-n参数</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">unzip</span> file.zip <span class="token parameter variable">-n</span> destination_folder
<span class="token function">unzip</span> file.zip <span class="token parameter variable">-n</span> <span class="token parameter variable">-d</span> /temp test.zip<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>4、只看一下zip压缩包中包含哪些文件，不进行解压缩</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">unzip</span> <span class="token parameter variable">-l</span> test.zip<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>5、查看显示的文件列表还包含压缩比率</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">unzip</span> <span class="token parameter variable">-v</span> test.zip<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>6、检查zip文件是否损坏</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">unzip</span> <span class="token parameter variable">-t</span> test.zip<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>7、将压缩文件test.zip在指定目录tmp下解压缩，如果已有相同的文件存在，要求unzip命令覆盖原先的文件</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">unzip</span> <span class="token parameter variable">-o</span> test.zip <span class="token parameter variable">-d</span> /tmp/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>总结：格式用法：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">unzip</span> <span class="token punctuation">[</span>-Z<span class="token punctuation">]</span> <span class="token punctuation">[</span>-opts<span class="token punctuation">[</span>modifiers<span class="token punctuation">]</span><span class="token punctuation">]</span> file<span class="token punctuation">[</span>.zip<span class="token punctuation">]</span> <span class="token punctuation">[</span>list<span class="token punctuation">]</span> <span class="token punctuation">[</span>-x xlist<span class="token punctuation">]</span> <span class="token punctuation">[</span>-d exdir<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h2 id="3-主要参数"><a href="#3-主要参数" class="headerlink" title="3.主要参数"></a>3.主要参数</h2><p>-c 将解压缩的结果显示到屏幕上，并对字符做适当的转换<br> -p 与-c参数类似，会将解压缩的结果显示到屏幕上，但不会执行任何的转换。<br> -l 显示压缩文件内所包含的文件<br> -f 更新现有的文件<br> -t 检查压缩文件是否正确，但不解压<br> -u 与-f参数类似，但是除了更新现有的文件外，也会将压缩文件中的其他文件解压缩到目录中<br> -z 仅显示压缩文件的备注文字<br> -v 执行是时显示详细的信息。或查看压缩文件目录，但不解压<br> -T 将压缩文件内的所有文件的最新变动时间设为解压缩时候的时间<br> -x 指定不要处理.zip压缩文件中的哪些文件<br> -d 指定文件解压缩后所要存储的目录<br> -n 解压缩时不要覆盖原有的文件<br> -q 安静模式，执行时不显示任何信息<br> -o 不必先询问用户，unzip执行后覆盖原有文件<br> -a 对文本文件进行必要的字符转换<br> -j 不处理压缩文件中原有的目录路径<br> -aa 把所有的文件目录当作文本处理<br> -U use escapes for all non-ASCII Unicode<br> -UU 忽略Unicode编码字符<br> -C 压缩文件中的文件名称区分大小写<br> -L 将压缩文件中的全部文件名改为小写<br> -X 解压缩时同时回存文件原来的UID/GID<br> -V 保留VMS的文件版本信息<br> -K 保留文件的setuid/setgid/tacky属性<br> -M 将输出结果送到more程序处理<br> -O 指定字符编码为DOS，Windows和OS/2<br> -I 指定字符编码为UNIX</p>
<p>参考</p>
<p><a href="https://www.jianshu.com/p/1d2d3c6e2bf0">https://www.jianshu.com/p/1d2d3c6e2bf0</a></p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2022/10/22/Ubuntu%20%E7%B3%BB%E7%BB%9F%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%20root%20%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95%E5%AE%9E%E4%BE%8B/</url>
    <content><![CDATA[<h1 id="Ubuntu-系统如何使用-root-用户登录实例"><a href="#Ubuntu-系统如何使用-root-用户登录实例" class="headerlink" title="Ubuntu 系统如何使用 root 用户登录实例"></a>Ubuntu 系统如何使用 root 用户登录实例</h1><p>ubuntu系统的默认用户名是 ubuntu，并在安装过程中默认不设置 root 帐户和密码。如有需要，可</p>
<p>在设置中开启允许 root 用户登录。具体操作步骤如下：</p>
<p>1.使用 ubuntu 帐户登录轻量应用服务器。</p>
<p>2.执行以下命令，设置 root 密码。</p>
<pre class="line-numbers language-undefined" data-language="undefined"><code class="language-undefined">sudo passwd root<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>3.输入 root 的密码，按 Enter。</p>
<p>4.重复输入 root 的密码，按 <strong>Enter</strong>。</p>
<p>返回如下信息，即表示 root 密码设置成功。</p>
<pre class="line-numbers language-vbnet" data-language="vbnet"><code class="language-vbnet">passwd<span class="token punctuation">:</span> password updated successfully<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>5.执行以下命令，打开 <code>sshd_config</code> 配置文件。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">vi</span> /etc/ssh/sshd_config<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>6.按 <strong>i</strong> 切换至编辑模式，找到 <code>#Authentication</code>，将 <code>PermitRootLogin</code> 参数修改为 <code>yes</code>。如果</p>
<p><code>PermitRootLogin</code> 参数被注释，请去掉首行的注释符号（<code>#</code>）</p>
<p>7.找到 <code>#Authentication</code>，将 <code>PasswordAuthentication</code> 参数修改为 yes。如下图所示： </p>
<p>说明：若 <code>sshd_config</code> 配置文件中无此配置项，则添加 <code>PasswordAuthentication yes</code> 项即可。</p>
<p>8.按 Esc，输入 :wq，保存文件并返回。</p>
<p>9.执行以下命令，重启 ssh 服务。</p>
<pre class="line-numbers language-undefined" data-language="undefined"><code class="language-undefined">sudo service ssh restart<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p> 10.使用以下信息登录 Ubuntu 轻量应用服务器：</p>
<ul>
<li><strong>用户名</strong>：root</li>
<li><strong>登录密码</strong>：在 步骤2 中已设置的密码</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2022/11/05/Ubuntu%E5%AE%89%E8%A3%85%E5%92%8C%E5%8D%B8%E8%BD%BDJava/</url>
    <content><![CDATA[<h1 id="Ubuntu安装和卸载Java"><a href="#Ubuntu安装和卸载Java" class="headerlink" title="Ubuntu安装和卸载Java"></a>Ubuntu安装和卸载Java</h1><h2 id="1-安装java"><a href="#1-安装java" class="headerlink" title="1.安装java"></a>1.安装java</h2><p>查看java是否安装：<code>java -version</code></p>
<p>java版本：</p>
<p>较新的版本是java18，若要安装执行命令：<code>sudo apt install default-jre</code></p>
<p>我选择的是java17</p>
<p>安装命令：<code>sudo apt install openjdk-17-jdk</code></p>
<p>安装好后，执行<code>java -version</code>，如果输出java版本，则说明安装成功</p>
<h2 id="2-配置环境变量："><a href="#2-配置环境变量：" class="headerlink" title="2.配置环境变量："></a>2.配置环境变量：</h2><ul>
<li><p>通过上述方式安装的java，目录是在：<code>/usr/lib/jvm/java-*-openjdk-amd64</code></p>
</li>
<li><p>所以环境变量配置时候添加下面内容即可：</p>
</li>
<li><p>```<br>~/.bashrc</p>
<pre class="line-numbers language-none"><code class="language-none">


```shell
export JAVA_HOME=/usr/lib/jvm/java-11-openjdk-amd64
export JRE_HOME=${JAVA_HOME}/jre
export CLASSPATH=.:${JAVA_HOME}/lib:${JRE_HOME}/lib
export PATH=${JAVA_HOME}/bin:$PATH<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ul>
<h2 id="3-卸载"><a href="#3-卸载" class="headerlink" title="3.卸载"></a>3.卸载</h2><h3 id="卸载java"><a href="#卸载java" class="headerlink" title="卸载java"></a>卸载java</h3><ul>
<li>先检查是否安装，命令：<code>dpkg --list | grep -i jdk</code></li>
<li>移除openjdk包，命令：<code>apt-get purge openjdk*</code></li>
<li>卸载 OpenJDK 相关包，命令：<code>apt-get purge icedtea-* openjdk-*</code></li>
<li>再次检查是否卸载成功，命令：<code>dpkg --list | grep -i jdk</code></li>
<li>卸载完成</li>
</ul>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://www.cnblogs.com/jaysonteng/p/13453244.html">ubuntu安装与卸载java</a></p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2022/10/30/Ubuntu%E7%B3%BB%E7%BB%9F%E6%9F%A5%E7%9C%8B%E5%86%85%E5%AD%98%E5%8D%A0%E7%94%A8%E5%92%8CCPU%E4%BD%BF%E7%94%A8%E7%8E%87%E7%9A%84%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h1 id="Ubuntu系统查看内存占用和CPU使用率的方法"><a href="#Ubuntu系统查看内存占用和CPU使用率的方法" class="headerlink" title="Ubuntu系统查看内存占用和CPU使用率的方法"></a>Ubuntu系统查看内存占用和CPU使用率的方法</h1><p>单独查看内存使用情况的命令：free -m</p>
<p>查看内存及cpu使用情况的命令：top</p>
<p>也可以安装htop工具，这样更直观，</p>
<p>安装命令如下：sudo apt-get install htop<br>安装完后，直接输入命令：htop<br>就可以看到内存或cpu的使用情况了。</p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2022/10/30/Ubuntu%E8%AE%BE%E7%BD%AE%E4%BD%BF%E7%94%A8SSH%E5%AF%86%E9%92%A5%E8%BF%9C%E7%A8%8B%E7%99%BB%E9%99%86%E7%AE%A1%E7%90%86/</url>
    <content><![CDATA[<h1 id="Ubuntu设置使用SSH密钥远程登陆管理"><a href="#Ubuntu设置使用SSH密钥远程登陆管理" class="headerlink" title="Ubuntu设置使用SSH密钥远程登陆管理"></a>Ubuntu设置使用SSH密钥远程登陆管理</h1><p>SSH 或安全外壳是一种加密协议，用于管理服务器并与服务器进行通信。在使用 Ubuntu 服务器时，您很可能将大部分时间花在通过 SSH 连接到服务器的终端会话中。</p>
<p>本教程重点介绍为 Ubuntu 等Linux 安装设置 SSH 密钥。SSH 密钥提供了一种登录服务器的安全方式，建议所有用户使用。</p>
<h2 id="1-制作密钥对"><a href="#1-制作密钥对" class="headerlink" title="1. 制作密钥对"></a>1. 制作密钥对</h2><p>首先在服务器上制作密钥对。首先用密码登录到你打算使用密钥登录的账户，然后执行以下命令：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@host ~<span class="token punctuation">]</span>$ ssh-keygen  <span class="token operator">&lt;=</span><span class="token operator">=</span> 建立密钥对
Generating public/private rsa key pair.
Enter <span class="token function">file</span> <span class="token keyword">in</span> <span class="token function">which</span> to save the key <span class="token punctuation">(</span>/root/.ssh/id_rsa<span class="token punctuation">)</span>: <span class="token operator">&lt;=</span><span class="token operator">=</span> 按 Enter
Created directory <span class="token string">'/root/.ssh'</span><span class="token builtin class-name">.</span>
Enter passphrase <span class="token punctuation">(</span>empty <span class="token keyword">for</span> no passphrase<span class="token punctuation">)</span>: <span class="token operator">&lt;=</span><span class="token operator">=</span> 输入密钥锁码，或直接按 Enter 留空
Enter same passphrase again: <span class="token operator">&lt;=</span><span class="token operator">=</span> 再输入一遍密钥锁码

Your identification has been saved <span class="token keyword">in</span> /root/.ssh/id_rsa. <span class="token operator">&lt;=</span><span class="token operator">=</span> 私钥
Your public key has been saved <span class="token keyword">in</span> /root/.ssh/id_rsa.pub. <span class="token operator">&lt;=</span><span class="token operator">=</span> 公钥

The key fingerprint is:
0f:d3:e7:1a:1c:bd:5c:03:f1:19:f1:22:df:9b:cc:08 root@host<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>密钥锁码在使用私钥时必须输入，这样就可以保护私钥不被盗用。当然，也可以留空，实现无密码登录。</p>
<p>现在，在 root 用户的家目录中生成了一个 .ssh 的隐藏目录，内含两个密钥文件。id_rsa 为私钥，id_rsa.pub 为公钥。</p>
<h2 id="2-在服务器上安装公钥"><a href="#2-在服务器上安装公钥" class="headerlink" title="2. 在服务器上安装公钥"></a>2. 在服务器上安装公钥</h2><pre class="line-numbers language-perl" data-language="perl"><code class="language-perl">键入以下命令，在服务器上安装公钥：
<span class="token punctuation">[</span>root<span class="token variable">@host</span> <span class="token operator">~</span><span class="token punctuation">]</span>$ cd <span class="token operator">.</span>ssh
<span class="token punctuation">[</span>root<span class="token variable">@host</span> <span class="token operator">.</span>ssh<span class="token punctuation">]</span>$ cat id_rsa<span class="token operator">.</span>pub <span class="token operator">&gt;&gt;</span> authorized_keys
如此便完成了公钥的安装。为了确保连接成功，请保证以下文件权限正确：

<span class="token punctuation">[</span>root<span class="token variable">@host</span> <span class="token operator">.</span>ssh<span class="token punctuation">]</span>$ chmod <span class="token number">600</span> authorized_keys
<span class="token punctuation">[</span>root<span class="token variable">@host</span> <span class="token operator">.</span>ssh<span class="token punctuation">]</span>$ chmod <span class="token number">700</span> <span class="token operator">~</span><span class="token operator">/</span><span class="token operator">.</span>ssh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="3-设置-SSH，打开密钥登录功能"><a href="#3-设置-SSH，打开密钥登录功能" class="headerlink" title="3. 设置 SSH，打开密钥登录功能"></a>3. 设置 SSH，打开密钥登录功能</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">编辑 /etc/ssh/sshd_config 文件，进行如下设置：

RSAAuthentication <span class="token function">yes</span>
PubkeyAuthentication <span class="token function">yes</span>
另外，请留意 root 用户能否通过 SSH 登录：

PermitRootLogin <span class="token function">yes</span>
当你完成全部设置，并以密钥方式登录成功后，再禁用密码登录：

PasswordAuthentication no
最后，重启 SSH 服务：

<span class="token punctuation">[</span>root@host .ssh<span class="token punctuation">]</span>$ <span class="token function">service</span> sshd restart<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://blog.csdn.net/permike/article/details/52386868">https://blog.csdn.net/permike/article/details/52386868</a></p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2022/11/01/Ubuntu%E8%AE%BE%E7%BD%AE%E5%BC%80%E6%9C%BA%E5%90%AF%E5%8A%A8%E8%84%9A%E6%9C%AC/</url>
    <content><![CDATA[<h1 id="Ubuntu设置开机启动脚本"><a href="#Ubuntu设置开机启动脚本" class="headerlink" title="Ubuntu设置开机启动脚本"></a>Ubuntu设置开机启动脚本</h1><p>想在开机的时候自动启动Minecraft的服务器，这样就可以不用每次开机都去手动启动了。</p>
<p>研究了一下如何在Ubuntu上设置开机启动自己写的Shell，来实现开机自动启动Minecraft server。</p>
<p>以我想启动Minecraft为例</p>
<h2 id="1-编写启动脚本"><a href="#1-编写启动脚本" class="headerlink" title="1. 编写启动脚本"></a>1. 编写启动脚本</h2><p>为了方便以后开服，我们先在/root/mc下面创建一个startServer.sh文件。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> startServer.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>根据自己情况填写<br>我这里想开机启动screen然后用screen启动游戏</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">screen_name</span><span class="token operator">=</span><span class="token string">"MC"</span>  　<span class="token comment"># 要建立的screen名字</span>
<span class="token function">screen</span> <span class="token parameter variable">-dmS</span> <span class="token variable">$screen_name</span>
<span class="token assign-left variable">cmd</span><span class="token operator">=</span><span class="token string">"cd /root/mc &amp;&amp; java -jar fabric-server-launch.jar"</span><span class="token punctuation">;</span>  <span class="token comment"># 要执行的命令，要指明路径，不指明时默认是在 / 目录下</span>
<span class="token function">screen</span> <span class="token parameter variable">-x</span> <span class="token parameter variable">-S</span> <span class="token variable">$screen_name</span> <span class="token parameter variable">-p</span> <span class="token number">0</span> <span class="token parameter variable">-X</span> stuff <span class="token string">"<span class="token variable">$cmd</span>"</span>  <span class="token comment"># 输入命令</span>
<span class="token function">screen</span> <span class="token parameter variable">-x</span> <span class="token parameter variable">-S</span> <span class="token variable">$screen_name</span> <span class="token parameter variable">-p</span> <span class="token number">0</span> <span class="token parameter variable">-X</span> stuff <span class="token string">'\n'</span>   <span class="token comment"># 回车执行</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>保存退出。</p>
<p>不过这种方式发送的命令不能太长，否则会导致脚本卡住。</p>
<p>如果需要发送一条很长的命令，或者连续发送许多条命令，最好单独写一个脚本，发送一个脚本命令给screen，让screen执行新的脚本。</p>
<h2 id="2-编辑-rc-local-service-文件"><a href="#2-编辑-rc-local-service-文件" class="headerlink" title="2. 编辑 rc-local.service 文件"></a>2. 编辑 rc-local.service 文件</h2><p>首先执行</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">chmod</span> <span class="token number">777</span> /lib/systemd/system/rc-local.service  <span class="token comment">#赋予rc-local.service修改权限</span>
<span class="token function">sudo</span> <span class="token function">vim</span> /lib/systemd/system/rc-local.service<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>在rc-local.service文件尾部添加以下内容：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>Install<span class="token punctuation">]</span>
<span class="token assign-left variable">WantedBy</span><span class="token operator">=</span>multi-user.target
<span class="token assign-left variable">Alias</span><span class="token operator">=</span>rc-local.service<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h2 id="3-编辑-rc-local-文件"><a href="#3-编辑-rc-local-文件" class="headerlink" title="3. 编辑 rc.local 文件"></a>3. 编辑 rc.local 文件</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">vim</span> /etc/rc.local<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>在里面填写</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/sh</span>
<span class="token builtin class-name">echo</span> <span class="token string">"看到这行字，说明添加自启动脚本成功。"</span> <span class="token operator">&gt;</span> /usr/local/test.log
<span class="token builtin class-name">cd</span> /root/mc/
<span class="token function">chmod</span> <span class="token number">777</span> startServer.sh
./startServer.sh <span class="token operator">&amp;</span>
<span class="token builtin class-name">exit</span> <span class="token number">0</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>给rc.local文件加上权限。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">chmod</span> +x /etc/rc.local<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h1 id="3-创建软链接"><a href="#3-创建软链接" class="headerlink" title="3. 创建软链接"></a>3. 创建软链接</h1><p>在 /etc/systemd/system/目录下创建软链接。Ubuntu创建软链接类似于Windows下创建快捷方式。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 创建方式：ln -s 原目录 映射目录</span>
<span class="token function">sudo</span> <span class="token function">ln</span> <span class="token parameter variable">-s</span> /lib/systemd/system/rc-local.service /etc/systemd/system/
<span class="token comment"># 查看软链接 </span>
<span class="token function">ls</span> <span class="token parameter variable">-il</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>





<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://blog.csdn.net/m0_52650517/article/details/119767308?spm=1001.2101.3001.6650.2&amp;utm_medium=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~Rate-2-119767308-blog-126146956.pc_relevant_aa&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~Rate-2-119767308-blog-126146956.pc_relevant_aa&amp;utm_relevant_index=5">ubuntu 20.04 | 设置开机启动脚本</a></p>
<p>[Ubuntu 实现shell文件的开机运行（从原理到实现）](</p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2022/11/12/Windows%2011%20%E7%BB%95%E8%BF%87%20TPM%20%E7%AD%89%E9%99%90%E5%88%B6%EF%BC%8C%E4%BB%A5%E5%8F%8A%E5%9C%A8Mac%20M1%E4%B8%8A%E5%AE%89%E8%A3%85%E7%9A%84%E6%96%B9%E6%B3%95%E3%80%82/</url>
    <content><![CDATA[<h1 id="Windows-11-绕过-TPM-等限制，以及在Mac-M1上安装的方法。"><a href="#Windows-11-绕过-TPM-等限制，以及在Mac-M1上安装的方法。" class="headerlink" title="Windows 11 绕过 TPM 等限制，以及在Mac M1上安装的方法。"></a>Windows 11 绕过 TPM 等限制，以及在Mac M1上安装的方法。</h1><h2 id="1-Windows-11-系统要求"><a href="#1-Windows-11-系统要求" class="headerlink" title="1. Windows 11 系统要求"></a>1. Windows 11 <a href="https://www.microsoft.com/zh-cn/windows/windows-11-specifications">系统要求</a></h2><p>系统要求系统要求这些是在电脑上安装 Windows 11 的最低系统要求。如果您的设备不满足这些要求，您可能无法在设备上安装 Windows 11，建议您考虑购买 <a href="https://www.microsoft.com/zh-cn/windows/computers">一台新电脑</a>。如果您不确定您的电脑是否满足这些要求，可以咨询您的原始设备制造商 (OEM)；如果您的设备已经在运行 Windows 10，您可以使用 <a href="https://www.microsoft.com/zh-cn/windows/windows-11#pchealthcheck">电脑健康状况检查应用</a> 来评估兼容性。请注意，此应用不会检查显卡或显示器，因为大多数的兼容设备都能满足以下列出的要求 (sysin)。您的设备必须 <a href="https://support.microsoft.com/zh-cn/windows/which-version-of-windows-operating-system-am-i-running-628bec99-476a-2c13-5296-9dd081cdd808">已安装 Windows 10</a> 的 2004 或更高版本，才能升级。可在‘设置 &gt; 更新和安全’中的 Windows 更新功能中获取免费更新。</p>
<table>
<thead>
<tr>
<th align="left"><strong>处理器</strong></th>
<th align="left"><strong>1 GHz</strong> 或更快的 <a href="https://aka.ms/CPUlist">支持 64 位的处理器</a>（双核或多核）或系统单芯片 **(SoC)**。</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><strong>内存</strong></td>
<td align="left">4 GB。</td>
</tr>
<tr>
<td align="left"><strong>存储</strong></td>
<td align="left">64 GB 或更大的存储设备，注：有关详细信息，请参见以下 “关于保持 Windows 11 最新所需存储空间的更多信息”。</td>
</tr>
<tr>
<td align="left"><strong>系统固件</strong></td>
<td align="left">支持 UEFI 安全启动。请在 <a href="https://support.microsoft.com/topic/a8ff1202-c0d9-42f5-940f-843abef64fad">此处</a> 查看关于如何启用电脑以满足这一要求的说明。</td>
</tr>
<tr>
<td align="left"><strong>TPM</strong></td>
<td align="left"><a href="https://docs.microsoft.com/zh-cn/windows/security/information-protection/tpm/trusted-platform-module-overview">受信任的平台模块 (TPM)</a> 2.0 版本。请在 <a href="https://support.microsoft.com/windows/1fd5a332-360d-4f46-a1e7-ae6b0c90645c">此处</a> 查看关于如何启用电脑以满足这一要求的说明。</td>
</tr>
<tr>
<td align="left"><strong>显卡</strong></td>
<td align="left">支持 DirectX 12 或更高版本，支持 WDDM 2.0 驱动程序。</td>
</tr>
<tr>
<td align="left"><strong>显示器</strong></td>
<td align="left">对角线长大于 9 英寸的高清 (720p) 显示屏，每个颜色通道为 8 位。</td>
</tr>
<tr>
<td align="left"><strong>电脑健康检查互联网连接和 Microsoft 帐户</strong></td>
<td align="left">Windows 11 家庭版要求具有互联网连接和 <a href="https://account.microsoft.com/account">Microsoft 帐户</a>。 将设备切换出 Windows 11 家庭版 S 模式也需要有互联网连接。<a href="https://support.microsoft.com/help/4020089/windows-10-in-s-mode-faq">在此处进一步了解 S 模式</a>。 所有的 Windows 11 版本都需要联网才能执行更新，以及下载和利用某些功能。有些功能需要使用 Microsoft 帐户。</td>
</tr>
</tbody></table>
<p>某些 <a href="https://www.microsoft.com/zh-cn/windows/windows-11-specifications#table2">功能需要特定硬件支持</a>。运行某些应用程序所需满足的系统要求可能高于 Windows 11 的最低设备规格要求。检查设备与您想要安装应用程序的兼容情况。所需的设备存储空间将根据实际的应用程序和更新而有所不同。更高端、更强大的电脑性能也较高。以后或更新时可能会有其它的要求。</p>
<blockquote>
<p>以上为 Windows 11 的官方系统要求。</p>
</blockquote>
<p>关键是这个 TPM 芯片，通常在虚拟机、MacBook，没有 TPM 或者没有 TPM 2.0 的旧 PC 无法正常安装 Windows 11（报错如下图）。</p>
<h2 id="2-一般网上绕过限制的方法"><a href="#2-一般网上绕过限制的方法" class="headerlink" title="2. 一般网上绕过限制的方法"></a>2. 一般网上绕过限制的方法</h2><h3 id="修改注册表"><a href="#修改注册表" class="headerlink" title="修改注册表"></a>修改注册表</h3><p>在 Windows 11 安装界面按 Shift + F10 打开命令行界面（Mac按shift+fn+F10），执行如下命令：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">REG ADD HKLM<span class="token punctuation">\</span>SYSTEM<span class="token punctuation">\</span>Setup<span class="token punctuation">\</span>LabConfig /v BypassTPMCheck /t REG_DWORD /d <span class="token number">1</span>
REG ADD HKLM<span class="token punctuation">\</span>SYSTEM<span class="token punctuation">\</span>Setup<span class="token punctuation">\</span>LabConfig /v BypassSecureBootCheck /t REG_DWORD /d <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>或者使用图形界面的注册表编辑器添加：</p>
<p>输入 regedit 进入注册表编辑器，然后定位到如下位置 HKEY_LOCAL_MACHINE\SYSTEM\Setup，创建一个名为 “LabConfig” 的项，接着在 “LabConfig” 下创建两个 DWORD 值：</p>
<p>键名 “BypassTPMCheck”，赋值 “00000001”</p>
<p>键名 “BypassSecureBootCheck”，赋值 “00000001”</p>
<p>保存退出后，无法安装的提示就消失了。</p>
<h2 id="3-Mac安装windows11"><a href="#3-Mac安装windows11" class="headerlink" title="3.Mac安装windows11"></a>3.Mac安装windows11</h2><h3 id="3-1-准备工作"><a href="#3-1-准备工作" class="headerlink" title="3.1 准备工作"></a>3.1 准备工作</h3><ol>
<li><p>安装Parallels Desktop</p>
</li>
<li><p>准备好Windows11 ARM镜像</p>
<p>镜像下载<a href="https://uupdump.net/">https://uupdump.net/</a></p>
<p>自己构建一个Windows11专业版</p>
</li>
</ol>
<h3 id="3-2-安装"><a href="#3-2-安装" class="headerlink" title="3.2 安装"></a>3.2 安装</h3><ol>
<li>打开Parallels Desktop选择手动安装</li>
<li>设置–硬件–点击减号删除 TPM</li>
<li>启动虚拟机</li>
<li>进入安装页面打开命令提示符执行上面第二步</li>
</ol>
<p>完成！</p>
<p>参考</p>
<p><a href="https://sysin.org/blog/windows-11-no-tpm/">https://sysin.org/blog/windows-11-no-tpm/</a></p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2022/10/19/qbittorrent+Rclone+Google%20Drive%E7%BD%91%E7%9B%98=%E6%97%A0%E9%99%90%E7%A6%BB%E7%BA%BF%E4%B8%8B%E8%BD%BD%E7%A9%BA%E9%97%B4/</url>
    <content><![CDATA[<h1 id="qbittorrent-Rclone-Google-Drive网盘-x3D-无限离线下载空间"><a href="#qbittorrent-Rclone-Google-Drive网盘-x3D-无限离线下载空间" class="headerlink" title="qbittorrent+Rclone+Google Drive网盘=无限离线下载空间"></a>qbittorrent+Rclone+Google Drive网盘=无限离线下载空间</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>之前我介绍了如果通过在服务器上用qbittorrent来下载</p>
<p>文件，然是有一个问题，就是我们服务器硬盘容量很少，我的VPS甚至只有100G，这就导致如果我们一直下载文件，一直堆积，我们的服务器容量根本就不够用，所以我就想到一个方法，就是把我们下载的文件自动上传到Google Drive的团队网盘。这样我们每次可以直接从网盘里面取文件，就方便很多，也解决了容量不够的问题。 记录一下我的方法。</p>
<h2 id="1-前提条件"><a href="#1-前提条件" class="headerlink" title="1.前提条件"></a>1.前提条件</h2><p>安装配置好rclone+qbittorrent</p>
<p>这两个教程我前面有写，点击下面连接进行安装配置</p>
<ul>
<li><p><input checked="" disabled="" type="checkbox"> 
<a href="https://tutujanjan.com/?p=2304">Linux环境下安装rclone并配置google drive</a></p>
</li>
<li><p><input checked="" disabled="" type="checkbox"> 
<a href="https://tutujanjan.com/?p=2312">使用Protainer(docker-compose)来搭建qbittorrent来进行离线下载</a></p>
</li>
</ul>
<h2 id="2-挂载磁盘"><a href="#2-挂载磁盘" class="headerlink" title="2.挂载磁盘"></a>2.挂载磁盘</h2><p>创建一个文件夹来挂载磁盘</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> /mnt/googledrive<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>在挂载之前，我们要先安装fuse文件系统</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token parameter variable">-y</span> <span class="token function">install</span> fuse<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>然后输入挂载命令</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">rclone <span class="token function">mount</span> tutugd:/ /mnt/googledrive/ --allow-other --allow-non-empty --vfs-cache-mode writes <span class="token operator">&amp;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>tutugd:是你的网盘名称</p>
<p>/ /mnt/googledrive/是挂载路径</p>
<p>输入命令查看是否挂载成功</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># df -h</span>

tmpfs            97M  <span class="token number">4</span>.0K   97M   <span class="token number">1</span>% /run/user/1001
tutugd:         <span class="token number">1</span>.0P     <span class="token number">0</span>  <span class="token number">1</span>.0P   <span class="token number">0</span>% /mnt/googledrive
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>可以看到tutugd已经在上面了</p>
<h2 id="3-设置开机自动挂载"><a href="#3-设置开机自动挂载" class="headerlink" title="3.设置开机自动挂载"></a>3.设置开机自动挂载</h2><p>每次开关机服务器，rclone都要重新手动挂载，为了方便，我们设置自动挂载命令</p>
<p>首先新建一个rclone.service文件</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> /usr/lib/systemd/system/rclone.service<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>写入</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>Unit<span class="token punctuation">]</span>
<span class="token assign-left variable">Description</span><span class="token operator">=</span>rclone
    
<span class="token punctuation">[</span>Service<span class="token punctuation">]</span>
<span class="token assign-left variable">User</span><span class="token operator">=</span>root
<span class="token assign-left variable">ExecStart</span><span class="token operator">=</span>/usr/bin/rclone <span class="token function">mount</span> gdShare:/ /mnt/googledrive/ --allow-other --allow-non-empty --vfs-cache-mode writes
<span class="token assign-left variable">Restart</span><span class="token operator">=</span>on-abort
    
<span class="token punctuation">[</span>Install<span class="token punctuation">]</span>
<span class="token assign-left variable">WantedBy</span><span class="token operator">=</span>multi-user.target<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>保存退出后</p>
<p>重载daemon,让新的服务文件生效</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">systemctl daemon-reload<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>然后我们就可以通过systemctl来启动clone了</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">systemctl start rclone<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>设置开机自启</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">systemctl <span class="token builtin class-name">enable</span> rclone<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>重启你的服务器，然后看一下rclone的服务启动了没有，再查看一下谷歌硬盘有没有挂载成功：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">reboot</span>
systemctl status rclone
<span class="token function">df</span> <span class="token parameter variable">-h</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h2 id="4-设置qB下载路径到同步路径"><a href="#4-设置qB下载路径到同步路径" class="headerlink" title="4.设置qB下载路径到同步路径"></a>4.设置qB下载路径到同步路径</h2><p>打开我们的Protainer找到容器 qbittorrent重新映射一下卷</p>
<p>选择[Duplicate/Edit]</p>
<p>然后选择对应的路径即可。</p>
<p><img src="https://tianyedetutu.top/images/2022/10/19/2022-10-19-211725.jpg" alt="2022-10-19-211725.jpg"></p>
<p>我们把/downloads的host修改成我们之前创建的同步路径。</p>
<p>最后点击3的重新部署，完成。</p>
<h2 id="5-总结与思考"><a href="#5-总结与思考" class="headerlink" title="5.总结与思考"></a>5.总结与思考</h2><p>可能有比我更好的方法，但是博主真的很麻瓜，只能用这种本办法来实现同步。</p>
<p>貌似可以通过写脚本的方法来实现qb里面标记标签的方式来进行上传，但是我觉得很麻烦，如果有好吼米有更好的方法，欢迎在下面评论区分享你的方法，感激不尽。</p>
<p>通过这个方法，我们可以实现下载的文件自动上传，也可以直接通过FTP拖到我们的对应目录下进行上传。</p>
<p>如果你觉得有用欢迎留下你的评论。(<em>^^</em>)</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://loyio.me/posts/gcp-create-gdrive-download-server/">https://loyio.me/posts/gcp-create-gdrive-download-server/</a></p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2022/10/22/ubuntu%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AEssh%E6%9C%8D%E5%8A%A1/</url>
    <content><![CDATA[<h1 id="ubuntu安装配置ssh服务"><a href="#ubuntu安装配置ssh服务" class="headerlink" title="ubuntu安装配置ssh服务"></a>ubuntu安装配置ssh服务</h1><p>通常，安装好Ubuntu是不能直接通过ssh访问系统的，我们需要安装ssh服务来远程连接我们的系统。方便管理。</p>
<h2 id="1-更新-Ubuntu"><a href="#1-更新-Ubuntu" class="headerlink" title="1.更新 Ubuntu"></a>1.更新 Ubuntu</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">apt</span> update
$ <span class="token function">sudo</span> <span class="token function">apt</span> upgrade<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h2 id="2-通过命令安装openssh-server"><a href="#2-通过命令安装openssh-server" class="headerlink" title="2.通过命令安装openssh-server"></a>2.通过命令安装openssh-server</h2><pre class="line-numbers language-none"><code class="language-none">sudo apt  install openssh-server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h2 id="3-确定Ubuntu-SSH服务状态"><a href="#3-确定Ubuntu-SSH服务状态" class="headerlink" title="3.确定Ubuntu SSH服务状态"></a>3.确定Ubuntu SSH服务状态</h2><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua">systemctl status ssh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>现在能看到：<br>第一行加载状态，已加载ssh.service文件；<br>第二行是否活动，正在运行；并且留意到一个守护进程sshd；<br>再往下看到监听的端口是22。</p>
<p>至此，我们的SSH服务端已经安装启动OK。</p>
<h2 id="4-确定Ubuntu机器的IP"><a href="#4-确定Ubuntu机器的IP" class="headerlink" title="4.确定Ubuntu机器的IP"></a>4.确定Ubuntu机器的IP</h2><p>我们在局域网测试，那就是查看现在这台局域网IP，可以点击网络设置查看，亦或命令行 <code>ifcofnig</code></p>
<h2 id="5-若不能访问，检查Ubuntu防火墙"><a href="#5-若不能访问，检查Ubuntu防火墙" class="headerlink" title="5. 若不能访问，检查Ubuntu防火墙"></a>5. 若不能访问，检查Ubuntu防火墙</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 检查防火墙</span>
<span class="token function">sudo</span> ufw status verbose

<span class="token comment"># 开启防火墙</span>
<span class="token function">sudo</span> ufw <span class="token builtin class-name">enable</span>

<span class="token comment"># 开放端口</span>
<span class="token function">sudo</span> ufw allow <span class="token number">22</span>
复制代码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>如下命令，可以设置开放来自某IP访问某端口的权限</p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css">sudo ufw allow from your_ip to any port 22<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h2 id="延伸"><a href="#延伸" class="headerlink" title="延伸"></a>延伸</h2><ul>
<li>SSH服务端开放的端口可以更改吗？</li>
</ul>
<blockquote>
<p>可以，在文件 <code>/etc/ssh/sshd_config</code> 里可以配置 SSH Server 开放的端口，修改后记得 <code>sudo systemctl restart sshd</code> 重启下生效。修改位置一般在第5行的 Port 下。</p>
</blockquote>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="https://link.juejin.cn/?target=https://linux.cn/thread/9427/1/1/">ssh 基本原理和免密码登录</a></li>
<li><a href="https://link.juejin.cn/?target=https://linux.cn/article-7683-1.html">五条强化 SSH 安全的建议</a></li>
<li><a href="https://link.juejin.cn/?target=https://linux.cn/article-1206-1.html">牢记25个最佳的SSH命令</a></li>
<li><a href="https://link.juejin.cn/?target=https://linux.cn/article-8087-1.html">在Ubuntu中用UFW配置防火墙</a></li>
<li><a href="https://link.juejin.cn/?target=https://support.apple.com/zh-cn/guide/mac-help/mh34041/mac">在 Mac 上使用防火墙来防止非法连接</a></li>
<li><a href="https://juejin.cn/post/6844904048739500046">Ubuntu如何配置SSH服务端支持远程登录</a></li>
</ol>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2022/10/23/ubuntu%E7%B3%BB%E7%BB%9Fgrub%E5%BC%95%E5%AF%BC%E4%BF%AE%E5%A4%8D/</url>
    <content><![CDATA[<h1 id="ubuntu系统grub引导修复"><a href="#ubuntu系统grub引导修复" class="headerlink" title="ubuntu系统grub引导修复"></a>ubuntu系统grub引导修复</h1><p>特别是在linux调整分区后，开机重启时会出现<br>error : unknow filesystem<br>grub rescue&gt;<br>的字样，系统就是进不去。这表示你的grub2的配置文件坏了……由于分区调整或分区UUID改变造成grub2不能正常启动，从而进入修复模式了（grub rescue)，也称救援模式。</p>
<p>在救援模式下只有很少的命令可以用：set , ls , insmod , root , prefix</p>
<pre class="line-numbers language-scss" data-language="scss"><code class="language-scss"><span class="token punctuation">(</span>1<span class="token punctuation">)</span>set  查看环境变量，这里可以查看启动路径和分区。
<span class="token punctuation">(</span>2<span class="token punctuation">)</span>ls   查看设备
<span class="token punctuation">(</span>3<span class="token punctuation">)</span>insmod  加载模块
<span class="token punctuation">(</span>4<span class="token punctuation">)</span>root  指定用于启动系统的分区<span class="token punctuation">,</span>在救援模式下设置grub启动分区
<span class="token punctuation">(</span>5<span class="token punctuation">)</span>prefix 设定grub启动路径复制代码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>具体修复步骤如下：</p>
<ul>
<li>1、查看分区：grub rescue&gt; ls 回车<br>会出现如下字样：</li>
</ul>
<p>(hd0) (hd0,msdos9) (hd0,msdos8) (hd0,msdos7) (hd0,msdos6) (hd0,msdos5) (hd0,msdos2) (hd0,msdos1)</p>
<p>注：上面是我的分区设备，每个人可能不一样，但原理都是一样的。grub&gt; find /boot/grub/grub.conf 也行</p>
<ul>
<li>2、寻找ubuntu所在分区：<br>（就是寻找你的Linux系统是装在以上哪个分区里）</li>
</ul>
<p>grub rescue&gt; ls (hd0,msdos1)/</p>
<p>若出现unknown filesystem字样，则尝试下一个……若出现的是你的ubuntu主文件夹下的文件夹和文件的名字，那就是的要找的分区了。</p>
<ul>
<li>3、修改启动分区：（假如你找到的启动分区是hd0,msdos8）</li>
</ul>
<ol>
<li>rescue&gt;root=(hd0,msdos8)</li>
</ol>
<p>grub rescue&gt;prefix=/boot/grub //grub路径设置<br>grub rescue&gt;set root=(hd0,msdos8)<br>grub rescue&gt;set prefix=(hd0,msdos8)/boot/grub<br>grub rescue&gt;insmod normal //启动normal启动<br>grub rescue&gt;normal<br>之后你就会看到熟悉的启动菜单栏了</p>
<ul>
<li>4、进入命令行启动ubuntu</li>
</ul>
<p>进入系统启动选项界面后还是进不去，因为你还没有真正的修改grub,这个要到ubuntu里修改,进入系统启动项界面后，按C进入命令行模式。<br>grub &gt;set root=hd0,msdos8<br>grub &gt;set prefix=(hd0,msdos8)/boot/grub<br>grub &gt;linux /vmlinuz-xxx-xxx root=/dev/sda8 //里边的xxxx可以按Tab键，如果有acpi问题,在最后加一句acpi=off<br>grub &gt;initrd /initrd.img-xxx-xxx<br>grub &gt;boot<br>这样就可以进入了</p>
<ul>
<li>5、进入ubuntu修复grub</li>
</ul>
<p>在终端里运行</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> update-grub`
<span class="token function">sudo</span> grub-install /dev/sda复制代码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<ul>
<li>6、重启，搞定！！</li>
</ul>
<p>注：有时只修改1～3步骤，然后在菜单栏就可以进入系统了，且一切正常。<br>在重启时，系统就只有一个光标在左上角不停的闪，咋也进不了系统。可能是启动项的问题，开机启动项改为硬盘启动就好了。</p>
<h2 id="法二："><a href="#法二：" class="headerlink" title="法二："></a>法二：</h2><p>首先制作 Ubuntu 启动 USB</p>
<p>复制代码代码如下：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">dd</span> <span class="token assign-left variable">if</span><span class="token operator">=</span>ubuntu-13.10-desktop-amd64.iso <span class="token assign-left variable">of</span><span class="token operator">=</span>/dev/sdb1 <span class="token comment">#/dev/sdb1 为 USB 盘符复制代码</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ul>
<li>1.使用启动 USB 进入 Ubuntu 试用环境</li>
<li>2.查看硬盘分区状况，获取 Linux 系统安装分区编号<br>sudo fdisk -l</li>
</ul>
<p>查看输出结果，然后根据文件类型和分区大小来判定 Linux 系统安装在哪块硬盘和安装的分区。我的电脑是在/dev/sda3安装了 Ubuntu。<br>或者，打开 Gparted 图形化工具来查看分区信息也可以。<br>挂载Ubuntu分区</p>
<ul>
<li>3.已知Ubuntu安装在了/dev/sda3上，所以我们可以用下面命令来挂载Ubuntu安装分区。你需要将/dev/sda3换成自己的 Linux 安装分区。<br>sudo mount /dev/sda3 /mnt</li>
<li>4.挂载其他所需的目录（使用 –bind）</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">mount</span> <span class="token parameter variable">--bind</span> /dev /mnt/dev
<span class="token function">sudo</span> <span class="token function">mount</span> <span class="token parameter variable">--bind</span> /proc /mnt/proc
<span class="token function">sudo</span> <span class="token function">mount</span> <span class="token parameter variable">--bind</span> /sys /mnt/sys复制代码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<ul>
<li>5.Chroot 到硬盘上的 Linux 系统<br>代码如下：</li>
</ul>
<p>sudo chroot /mnt chroot命令把根目录切换到指定目录下</p>
<ul>
<li>6.安装&amp;更新 Grub</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">grub2-install /dev/sda
grub2-mkconfig <span class="token parameter variable">-o</span> /boot/grub2/grub.cfg复制代码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<ul>
<li>7.Grub 已经修复成功，我们还需要退出 chroot 环境、卸载已经挂载的设备与目录：</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">exit</span> <span class="token comment">#退出 chroot 环境</span>
<span class="token function">sudo</span> <span class="token function">umount</span> /mnt/dev
<span class="token function">sudo</span> <span class="token function">umount</span> /mnt/proc
<span class="token function">sudo</span> <span class="token function">umount</span> /mnt/sys
<span class="token function">sudo</span> <span class="token function">umount</span> /mnt复制代码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>8.重启。</li>
</ul>
<p>可以进grub 这就好办了 &gt;root (hd0,x) 提示： 输入（后 ，按 TAB键 自动补全 很好用的 。x表示你的linux根分区</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">&gt;</span>linux /vmlinuz ro quiet 
<span class="token operator">&gt;</span>initrd /initrd.lz
<span class="token operator">&gt;</span>boot<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>



]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2022/11/27/%E4%B8%BALinux%E7%9A%84cp%E5%92%8Cmv%E5%91%BD%E4%BB%A4%E6%B7%BB%E5%8A%A0%E8%BF%9B%E5%BA%A6%E6%9D%A1/</url>
    <content><![CDATA[<h1 id="为Linux的cp和mv命令添加进度条"><a href="#为Linux的cp和mv命令添加进度条" class="headerlink" title="为Linux的cp和mv命令添加进度条"></a>为Linux的cp和mv命令添加进度条</h1><p>我想拷贝一个大的文件，cp和mv可能是大家日常中使用最多的Linux命令之一。但是有一个突出的问题是这两个命令都不会有任何提示信息。看不到进度就很难受，介绍一个Gnu Coreutils(cp和mv的源代码包)的补丁Advanced Copy，用于给其增加进度条的功能。</p>
<p>Advanced Copy 是<code>GNU cp</code> 和 <code>GNU mv</code> 程序的 mod  。它添加了一个进度条，并提供有关复制或移动文件和文件夹时发生的情况的一些信息。不仅是进度条，它还显示数据传输速率、估计剩余时间和当前正在复制的文件名。</p>
<h2 id="下载和编译"><a href="#下载和编译" class="headerlink" title="下载和编译"></a>下载和编译</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">wget</span> http://ftp.gnu.org/gnu/coreutils/coreutils-9.0.tar.xz

<span class="token function">tar</span> xvJf coreutils-9.0.tar.xz

<span class="token builtin class-name">cd</span> coreutils-9.0/

<span class="token function">wget</span> https://raw.githubusercontent.com/jarun/advcpmv/master/advcpmv-0.9-9.0.patch

<span class="token comment">#安装gcc和g++</span>
<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> g++
<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> gcc

patch <span class="token parameter variable">-p1</span> <span class="token parameter variable">-i</span> advcpmv-0.9-9.0.patch

<span class="token builtin class-name">export</span> <span class="token assign-left variable">FORCE_UNSAFE_CONFIGURE</span><span class="token operator">=</span><span class="token number">1</span>

./configure

<span class="token function">make</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>现在两个新的补丁的二进制文件即<code>cp</code>与<code>mv</code>将在中创建<code>coreutils-9.0/src</code>的文件夹。只需将它们复制到你的 $PATH 中，如下所示：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cp</span> ./src/cp /usr/local/bin/cpg
<span class="token function">cp</span> ./src/mv /usr/local/bin/mvg<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p><code>cpg</code>和<code>mvg</code>命令有现在进度条的功能。</p>
<p>每当你在复制或移动文件和目录时需要进度条时，只需添加<code>-g</code>如下标志：</p>
<pre class="line-numbers language-none"><code class="language-none">$ cpg -g nifi-1.14.0-bin.tar.gz test/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>或使用<code>--progress-bar</code>标志：</p>
<pre class="line-numbers language-none"><code class="language-none">$ cpg --progress-bar nifi-1.14.0-bin.tar.gz test/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>或使用<code>--progress-bar</code>标志：</p>
<pre class="line-numbers language-none"><code class="language-none">$ cpg --progress-bar nifi-1.14.0-bin.tar.gz test/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>示例输出:</p>
<pre class="line-numbers language-none"><code class="language-none">[root@rumenz.com ~]# cpg -g nifi-1.14.0-bin.tar.gz test/
Copying at 119.3 MiB/s (about 0h 0m 7s remaining)
nifi-1.14.0-bin.tar.gz                                                               959.5 MiB /   1.3 GiB
[============================================&gt;                            ] 71.0 %<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>在复制过程结束时，你将看到复制了多少文件、复制文件所用的时间以及每秒的数据传输速率。</p>
<pre class="line-numbers language-none"><code class="language-none">1 files (  1.3 GiB) copied in 25.5 seconds ( 53.0 MiB/s).<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>要递归复制目录及其子目录，只需添加<code>-R</code>标志：</p>
<pre class="line-numbers language-none"><code class="language-none">$ cpg -gR directory1/ directory2/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>同样，要使用<code>mv</code>命令移动文件，请运行：</p>
<pre class="line-numbers language-none"><code class="language-none">$ mvg -g nifi-1.14.0-bin.tar.gz test/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>或者，使用<code>--progress-bar</code>标志：</p>
<pre class="line-numbers language-none"><code class="language-none">$ mvg --progress-bar nifi-1.14.0-bin.tar.gz test/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>要使用<code>mv</code>命令移动目录，请使用：</p>
<pre class="line-numbers language-none"><code class="language-none">$ mvg -g directory1/ directory2/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>你还可以创建别名。编辑<code>~/.bashrc</code>文件：</p>
<pre class="line-numbers language-none"><code class="language-none">$ nano ~/.bashrc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>在后添加以下几行：</p>
<pre class="line-numbers language-none"><code class="language-none">alias cp='/usr/local/bin/cpg -gR'
alias mv='/usr/local/bin/mvg -g'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>按<code>Ctrl+o</code>和<code>Ctl+x</code>保存并关闭文件。</p>
<p>现在运行以下命令使更改生效：</p>
<pre class="line-numbers language-none"><code class="language-none">$ source ~/.bashrc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>从现在开始，你可以只使用没有（或）标志的<code>cp</code>或<code>mv</code>命令。<code>-g</code> <code>--progress-bar</code></p>
<p>请注意，原始程序不会被覆盖。你仍然可以随时通过<code>/usr/bin/cp</code> 或 呼叫他们 <code>/usr/bin/mv</code>。</p>
<p>如果你经常复制或移动大量大文件和目录，推荐向<code>cp</code>和<code>mv</code>命令添加进度条功能。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://zhuanlan.zhihu.com/p/273571991">https://zhuanlan.zhihu.com/p/273571991</a></p>
<p><a href="https://z.itpub.net/article/detail/CF3376ECFEA0A659D48576FEEB954192">https://z.itpub.net/article/detail/CF3376ECFEA0A659D48576FEEB954192</a></p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2022/11/02/%E4%BD%BF%E7%94%A8Docker%E6%90%AD%E5%BB%BAFilebrowser%E7%BD%91%E7%9B%98%E6%9C%8D%E5%8A%A1/</url>
    <content><![CDATA[<h1 id="使用Docker搭建Filebrowser网盘服务"><a href="#使用Docker搭建Filebrowser网盘服务" class="headerlink" title="使用Docker搭建Filebrowser网盘服务"></a>使用Docker搭建Filebrowser网盘服务</h1><p>今天来搭建一个网盘服务，然后配合之前搭建的qBittorrent使用更佳，可以通过网页来管理文件。</p>
<p>FileBrowser是一款基于现代浏览器技术的WEB版多用户文件管理器，它可以与我们的<code>Aria2</code>、<code>qBittorrent</code>等软件相结合，构建一个完整的离线下载与文件管理私有云。</p>
<p>简单网盘，可以管理文件、分享文件、用户权限分配，它还支持在线播放.mp4视频</p>
<h2 id="1-准备工作"><a href="#1-准备工作" class="headerlink" title="1.准备工作"></a>1.准备工作</h2><ol>
<li>准备一台服务器</li>
<li>安装Docker</li>
<li>安装Docker compose</li>
</ol>
<h2 id="2-开始部署"><a href="#2-开始部署" class="headerlink" title="2.开始部署"></a>2.开始部署</h2><p>每次做啥不多说，先进行一波系统软件的更</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> update <span class="token operator">&amp;&amp;</span> <span class="token function">sudo</span> <span class="token function">apt</span> upgrade<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="安装脚本"><a href="#安装脚本" class="headerlink" title="安装脚本"></a>安装脚本</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">wget</span> -qO- get.docker.com <span class="token operator">|</span> <span class="token function">bash</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="查看-Docker-安装版本等信息"><a href="#查看-Docker-安装版本等信息" class="headerlink" title="查看 Docker 安装版本等信息"></a>查看 Docker 安装版本等信息</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> version<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="启动-Docker-服务"><a href="#启动-Docker-服务" class="headerlink" title="启动 Docker 服务"></a>启动 Docker 服务</h3><pre class="line-numbers language-none"><code class="language-none">systemctl start docker<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="查看-Docker-运行状态"><a href="#查看-Docker-运行状态" class="headerlink" title="查看 Docker 运行状态"></a>查看 Docker 运行状态</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">systemctl status <span class="token function">docker</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="将-Docker-服务加入开机自启动"><a href="#将-Docker-服务加入开机自启动" class="headerlink" title="将 Docker 服务加入开机自启动"></a>将 Docker 服务加入开机自启动</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">systemctl <span class="token builtin class-name">enable</span> <span class="token function">docker</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h2 id="3-安装Docker-compose（可选）"><a href="#3-安装Docker-compose（可选）" class="headerlink" title="3.安装Docker compose（可选）"></a>3.安装Docker compose（可选）</h2><p>为了以后方便使用，顺便装上，这次用不上。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">curl</span> <span class="token parameter variable">-L</span> <span class="token string">"https://github.com/docker/compose/releases/download/1.29.2/docker-compose-<span class="token variable"><span class="token variable">$(</span><span class="token function">uname</span> <span class="token parameter variable">-s</span><span class="token variable">)</span></span>-<span class="token variable"><span class="token variable">$(</span><span class="token function">uname</span> <span class="token parameter variable">-m</span><span class="token variable">)</span></span>"</span> <span class="token parameter variable">-o</span> /usr/local/bin/docker-compose<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="赋予执行权限"><a href="#赋予执行权限" class="headerlink" title="赋予执行权限"></a>赋予执行权限</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">chmod</span> +x /usr/local/bin/docker-compose<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="查看docker-compose-版本"><a href="#查看docker-compose-版本" class="headerlink" title="查看docker-compose 版本"></a>查看docker-compose 版本</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker-compose</span> <span class="token parameter variable">--version</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h2 id="4-正式部署FileBrowser"><a href="#4-正式部署FileBrowser" class="headerlink" title="4.正式部署FileBrowser"></a>4.正式部署FileBrowser</h2><h3 id="下载filebrowser镜像"><a href="#下载filebrowser镜像" class="headerlink" title="下载filebrowser镜像"></a>下载filebrowser镜像</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> pull filebrowser/filebro<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>



<h3 id="创建filebrowser挂载所需要的目录"><a href="#创建filebrowser挂载所需要的目录" class="headerlink" title="创建filebrowser挂载所需要的目录"></a>创建filebrowser挂载所需要的目录</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> /root/filebrowser<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>



<h3 id="启动filebrowser"><a href="#启动filebrowser" class="headerlink" title="启动filebrowser"></a>启动filebrowser</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">-v</span> /root/downloads:/srv <span class="token parameter variable">-v</span> /root/filebrowser/filebrowserconfig.json:/etc/config.json <span class="token parameter variable">-v</span> /root/filebrowser/database.db:/etc/database.db <span class="token parameter variable">--name</span> myfile <span class="token parameter variable">-p</span> <span class="token number">8002</span>:80 filebrowser/filebrowser<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><strong>通过浏览器访问ip+8002端口，默认账号密码：admin</strong></p>
<p>至此就搭建完成了</p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2022/10/20/Ubuntu%E4%B8%8B%E4%BD%BF%E7%94%A8%20iftop%20%E5%91%BD%E4%BB%A4%E7%9B%91%E6%8E%A7%E7%BD%91%E7%BB%9C%E5%B8%A6%E5%AE%BD/</url>
    <content><![CDATA[<h1 id="Ubuntu下使用-iftop-命令监控网络带宽"><a href="#Ubuntu下使用-iftop-命令监控网络带宽" class="headerlink" title="Ubuntu下使用 iftop 命令监控网络带宽"></a>Ubuntu下使用 iftop 命令监控网络带宽</h1><p>系统管理员需要监控 IT 基础设施来确保一切正常运行。我们需要监控硬件，也就是内存、硬盘和 CPU 等的性能，我们也必须监控我们的网络。我们需要确保我们的网络不被过度使用，否则我们的程序，网站可能无法正常工作。在本教程中，我们将学习使用 <code>iftop</code>。</p>
<p><code>iftop</code> 是网络监控工具，它提供实时带宽监控。 <code>iftop</code> 测量进出各个套接字连接的总数据量，即它捕获通过网络适配器收到或发出的数据包，然后将这些数据相加以得到使用的带宽。</p>
<h3 id="在-Debian-x2F-Ubuntu-上安装"><a href="#在-Debian-x2F-Ubuntu-上安装" class="headerlink" title="在 Debian/Ubuntu 上安装"></a>在 Debian/Ubuntu 上安装</h3><p>iftop 存在于 Debian/Ubuntu 的默认仓库中，可以使用下面的命令安装：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">$ sudo apt<span class="token operator">-</span><span class="token keyword">get</span> install iftop<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>



<h3 id="使用-yum-在-RHEL-x2F-Centos-上安装"><a href="#使用-yum-在-RHEL-x2F-Centos-上安装" class="headerlink" title="使用 yum 在 RHEL/Centos 上安装"></a>使用 yum 在 RHEL/Centos 上安装</h3><p>要在 CentOS 或 RHEL 上安装 iftop，我们需要启用 EPEL 仓库。要启用仓库，请在终端上运行以下命令：</p>
<p><strong>RHEL/CentOS 7：</strong></p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">$ rpm <span class="token operator">-</span>Uvh https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>dl<span class="token punctuation">.</span>fedoraproject<span class="token punctuation">.</span>org<span class="token operator">/</span>pub<span class="token operator">/</span>epel<span class="token operator">/</span><span class="token number">7</span><span class="token operator">/</span>x86_64<span class="token operator">/</span>e<span class="token operator">/</span>epel<span class="token operator">-</span>release<span class="token operator">-</span><span class="token number">7</span><span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">.</span>noarch<span class="token punctuation">.</span>rpm<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>



<p><strong>RHEL/CentOS 6（64 位）：</strong></p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">$ rpm <span class="token operator">-</span>Uvh http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>download<span class="token punctuation">.</span>fedoraproject<span class="token punctuation">.</span>org<span class="token operator">/</span>pub<span class="token operator">/</span>epel<span class="token operator">/</span><span class="token number">6</span><span class="token operator">/</span>x86_64<span class="token operator">/</span>epel<span class="token operator">-</span>release<span class="token operator">-</span><span class="token number">6</span><span class="token operator">-</span><span class="token number">8</span><span class="token punctuation">.</span>noarch<span class="token punctuation">.</span>rpm<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>



<p><strong>RHEL/CentOS 6 （32 位）：</strong></p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">$ rpm <span class="token operator">-</span>Uvh http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>dl<span class="token punctuation">.</span>fedoraproject<span class="token punctuation">.</span>org<span class="token operator">/</span>pub<span class="token operator">/</span>epel<span class="token operator">/</span><span class="token number">6</span><span class="token operator">/</span>i386<span class="token operator">/</span>epel<span class="token operator">-</span>release<span class="token operator">-</span><span class="token number">6</span><span class="token operator">-</span><span class="token number">8</span><span class="token punctuation">.</span>noarch<span class="token punctuation">.</span>rpm<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>



<p>EPEL 仓库安装完成后，我们可以用下面的命令安装 <code>iftop</code>：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">$ yum install iftop<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>



<p>这将在你的系统上安装 <code>iftop</code>。我们现在将用它来监控我们的网络。</p>
<h3 id="使用-iftop"><a href="#使用-iftop" class="headerlink" title="使用 iftop"></a>使用 iftop</h3><p>可以打开终端窗口，并输入下面的命令使用 <code>iftop</code>：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">$ iftop<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>



<p><img src="https://ask.qcloudimg.com/http-save/8989785/b8425a9ba08b0b9845bd62f4961f4fc4.jpeg?imageView2/2/w/1620" alt="img"></p>
<p><em>network monitoring</em></p>
<p>现在你将看到计算机上发生的网络活动。你也可以使用：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">$ iftop <span class="token operator">-</span>n<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>这将在屏幕上显示网络信息，但使用 <code>-n</code>，则不会显示与 IP 地址相关的名称，只会显示 IP 地址。这个选项能节省一些将 IP 地址解析为名称的带宽。</p>
<p>我们也可以看到 <code>iftop</code> 可以使用的所有命令。运行 <code>iftop</code> 后，按下键盘上的 <code>h</code> 查看 <code>iftop</code> 可以使用的所有命令。</p>
<p><img src="https://ask.qcloudimg.com/http-save/8989785/456157c8ac30fba01ab750f2fa693738.jpeg?imageView2/2/w/1620" alt="img"></p>
<p><em>network monitoring</em></p>
<p>要监控特定的网络接口，我们可以在 <code>iftop</code> 后加上接口名：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">$ iftop <span class="token operator">-</span><span class="token constant">I</span> enp0s3<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>如上所述，你可以使用帮助来查看 <code>iftop</code> 可以使用的更多选项。但是这些提到的例子只是可能只是监控网络。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://cloud.tencent.com/developer/article/1876123">https://cloud.tencent.com/developer/article/1876123</a></p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2022/10/19/%E4%BD%BF%E7%94%A8Protainer(docker-compose)%E6%9D%A5%E6%90%AD%E5%BB%BAqbittorrent%E6%9D%A5%E8%BF%9B%E8%A1%8C%E7%A6%BB%E7%BA%BF%E4%B8%8B%E8%BD%BD/</url>
    <content><![CDATA[<h1 id="使用Protainer-docker-compose-来搭建qbittorrent来进行离线下载"><a href="#使用Protainer-docker-compose-来搭建qbittorrent来进行离线下载" class="headerlink" title="使用Protainer(docker-compose)来搭建qbittorrent来进行离线下载"></a>使用Protainer(docker-compose)来搭建qbittorrent来进行离线下载</h1><h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1.前言"></a>1.前言</h2><p>平时我们下载一些大文件，可能需要很长的时间，但是总不可能一直开着电脑吧，浪费电。但是如果我们有一台服务器，来下载电影，下载好了我们直接从服务器取回可以给我们省去很多时间，本文主要介绍安装qbittorrent来达成离线下载的目的。</p>
<h2 id="2-开始部署"><a href="#2-开始部署" class="headerlink" title="2.开始部署"></a>2.开始部署</h2><h3 id="2-1-安装Docker和图形化界面Protainer。"><a href="#2-1-安装Docker和图形化界面Protainer。" class="headerlink" title="2-1 安装Docker和图形化界面Protainer。"></a>2-1 安装Docker和图形化界面Protainer。</h3><p>具体安装方法可以参考一下我之前写的安装教程。</p>
<p><a href="https://tutujanjan.com/?p=2053">https://tutujanjan.com/?p=2053</a></p>
<h3 id="2-2-配置yml"><a href="#2-2-配置yml" class="headerlink" title="2-2 配置yml"></a>2-2 配置yml</h3><p>进入Protainer</p>
<p>依次点击Stacks<img src="https://s.w.org/images/core/emoji/14.0.0/svg/27a1.svg" alt="➡">Add stack</p>
<p>Name填一个qbittorrent</p>
<p><img src="https://tianyedetutu.top/images/2022/10/19/2022-10-19-201748.jpg" alt="2022-10-19-201748.jpg"></p>
<p>填写一下内容：</p>
<pre class="line-numbers language-none"><code class="language-none">version: "2"
services:
  qbittorrent:
    image: superng6/qbittorrent
    container_name: qbittorrent
    environment:
      - PUID=1026
      - PGID=100
      - TZ=Asia/Shanghai
    volumes:
      - /path/to/appdata/config:/config
      - /path/to/downloads:/downloads
    ports:
      - 6881:6881
      - 6881:6881/udp
      - 8080:8080
    restart: unless-stopped<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>最后点击Deploy the stack 部署</p>
<h3 id="2-3-测试"><a href="#2-3-测试" class="headerlink" title="2-3 测试"></a>2-3 测试</h3><p>部署好之后。我们通过`浏览器服务器</p>
<p>IP:8080 访问</p>
<p><img src="https://tianyedetutu.top/images/2022/10/19/2022-10-19-202259.jpg" alt="2022-10-19-202259.jpg"></p>
<p>默认用户名/密码是<code>admin/adminadmin</code></p>
<p>然后我们就可以进去主界面</p>
<p><img src="https://tianyedetutu.top/images/2022/10/19/2022-10-19-202541.jpg" alt="2022-10-19-202541.jpg"></p>
<h3 id="2-4-相关设置"><a href="#2-4-相关设置" class="headerlink" title="2-4 相关设置"></a>2-4 相关设置</h3><h4 id="设置密码"><a href="#设置密码" class="headerlink" title="设置密码"></a>设置密码</h4><p>进入主界面我们先设置一下我们的账号密码来提高一下安全性。</p>
<p>点击左上角的齿轮设置图标</p>
<p>点击 Web UI</p>
<p>找到验证</p>
<p>接着输入我们的新用户名和密码。</p>
<p>以后就可以使用自己设置的账号密码来登录界面了。</p>
<h4 id="设置语言"><a href="#设置语言" class="headerlink" title="设置语言"></a>设置语言</h4><p><img src="https://tianyedetutu.top/images/2022/10/19/2022-10-19-203027.jpg" alt="2022-10-19-203027.jpg"></p>
<p>修改账号密码的上面就可以选择对应的语言。</p>
<h2 id="3-补充"><a href="#3-补充" class="headerlink" title="3.补充"></a>3.补充</h2><p>关于下载路径我们可以在Protainer里面进行查看</p>
<p><img src="https://tianyedetutu.top/images/2022/10/19/2022-10-19-203242.jpg" alt="2022-10-19-203242.jpg"></p>
<p>我映射的是我的Google同步盘，之后我会分享如果下载文件后自动同步到Google drive的网盘。</p>
<p>这样就不怕我们本地空间不够用。</p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2022/11/05/%E4%BD%BF%E7%94%A8Docker-compose%E9%83%A8%E7%BD%B2Flarum%E8%AE%BA%E5%9D%9B/</url>
    <content><![CDATA[<h1 id="使用Docker-compose部署Flarum论坛"><a href="#使用Docker-compose部署Flarum论坛" class="headerlink" title="使用Docker-compose部署Flarum论坛"></a>使用Docker-compose部署Flarum论坛</h1><p>前阵子在Youtube上，看到一个老外部署的一个Flarum论坛，功能上和美观上都不错，打算自己搭建一个试一下。</p>
<p>部署是很简单的，但是中途出现很多问题，比如进去只显示标题界面，或者没法配置SSL，或者就是重启docker容器就不能进论坛了。</p>
<h3 id="Flarum具有以下特性："><a href="#Flarum具有以下特性：" class="headerlink" title="Flarum具有以下特性："></a><strong>Flarum具有以下特性：</strong></h3><p><strong>多平台：linux/386、linux/amd64、linux/arm/v6、linux/arm/v7、linux/arm64（树莓派也可以搭建！）</strong><br><strong>轻量级和安全的镜像</strong><br><strong>基于Alpine Linux 3.15</strong><br><strong>nginx和PHP 8.0</strong><br><strong>采用最新的Flarum Core（v1.2.0）</strong><br><strong>MySQL/Mariadb驱动</strong><br><strong>配置了OPCache扩展</strong></p>
<p>Github:<a href="https://github.com/mondediefr/docker-flarum">https://github.com/mondediefr/docker-flarum</a></p>
<p>记录一下如何搭建</p>
<h2 id="1-准备工作"><a href="#1-准备工作" class="headerlink" title="1.准备工作"></a>1.准备工作</h2><ol>
<li><p>安装Docker</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">wget</span> -qO- get.docker.com <span class="token operator">|</span> <span class="token function">bash</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p>安装Docker-compose</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">curl</span> <span class="token parameter variable">-L</span> <span class="token string">"https://github.com/docker/compose/releases/download/1.29.2/docker-compose-<span class="token variable"><span class="token variable">$(</span><span class="token function">uname</span> <span class="token parameter variable">-s</span><span class="token variable">)</span></span>-<span class="token variable"><span class="token variable">$(</span><span class="token function">uname</span> <span class="token parameter variable">-m</span><span class="token variable">)</span></span>"</span> <span class="token parameter variable">-o</span> /usr/local/bin/docker-compose<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>赋予执行权限</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">chmod</span> +x /usr/local/bin/docker-compose<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p>安装Portainer（可以不安装）</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">docker</span> volume create portainer_data<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>下载并安装 Portainer Server 容器</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">-p</span> <span class="token number">8000</span>:8000 <span class="token parameter variable">-p</span> <span class="token number">9443</span>:9443 <span class="token parameter variable">--name</span> portainer <span class="token punctuation">\</span>
    <span class="token parameter variable">--restart</span><span class="token operator">=</span>always <span class="token punctuation">\</span>
    <span class="token parameter variable">-v</span> /var/run/docker.sock:/var/run/docker.sock <span class="token punctuation">\</span>
    <span class="token parameter variable">-v</span> portainer_data:/data <span class="token punctuation">\</span>
    portainer/portainer-ce:latest<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ol>
<h2 id="2-正式部署"><a href="#2-正式部署" class="headerlink" title="2.正式部署"></a>2.正式部署</h2><ol>
<li><p>在 /mnt/docker/创建一个flarum的文件夹</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> /mnt/docker/flarum
<span class="token builtin class-name">cd</span> /mnt/docker/flarum<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>


</li>
<li><p>配置docker-compose.yml文件</p>
<p>输入</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> docker-compose.yml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>内容：</p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">"3"</span>

<span class="token key atrule">services</span><span class="token punctuation">:</span>
  <span class="token key atrule">flarum</span><span class="token punctuation">:</span>
    <span class="token key atrule">image</span><span class="token punctuation">:</span> mondedie/flarum<span class="token punctuation">:</span>stable
    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> flarum
    <span class="token key atrule">env_file</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> /mnt/docker/flarum/flarum.env
    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> /mnt/docker/flarum/assets<span class="token punctuation">:</span>/flarum/app/public/assets
      <span class="token punctuation">-</span> /mnt/docker/flarum/extensions<span class="token punctuation">:</span>/flarum/app/extensions
      <span class="token punctuation">-</span> /mnt/docker/flarum/storage/logs<span class="token punctuation">:</span>/flarum/app/storage/logs
      <span class="token punctuation">-</span> /mnt/docker/flarum/nginx<span class="token punctuation">:</span>/etc/nginx/flarum
    <span class="token key atrule">ports</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> 8082<span class="token punctuation">:</span><span class="token number">8888</span>         <span class="token comment">#设置端口为8082，根据自己情况设置</span>
    <span class="token key atrule">depends_on</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> mariadb

  <span class="token key atrule">mariadb</span><span class="token punctuation">:</span>
    <span class="token key atrule">image</span><span class="token punctuation">:</span> mariadb<span class="token punctuation">:</span><span class="token number">10.5</span>
    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> mariadb
    <span class="token key atrule">environment</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> MYSQL_ROOT_PASSWORD=xxxxxxxxxx    <span class="token comment">#设置数据库root密码 do</span>
      <span class="token punctuation">-</span> MYSQL_DATABASE=flarum
      <span class="token punctuation">-</span> MYSQL_USER=flarum
      <span class="token punctuation">-</span> MYSQL_PASSWORD=xxxxxxxxxx         <span class="token comment">#设置数据库密码</span>
    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> /mnt/docker/mysql/db<span class="token punctuation">:</span>/var/lib/mysql<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


</li>
<li><p>再在/mnt/docker/flarum创建一个flarum.env文件</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> flarum.env<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<pre class="line-numbers language-none"><code class="language-none">DEBUG=false
FORUM_URL=http://domain.tld    #设置自己网站地址，刚开始也可以设置成公网IP+端口号

# Database configuration
DB_HOST=mariadb
DB_NAME=flarum
DB_USER=flarum
DB_PASS=xxxxxxxxxx         #和上方设置的密码保持一致
DB_PREF=flarum_
DB_PORT=3306

# User admin flarum (environment variable for first installation)
# /!\ admin password must contain at least 8 characters /!\
FLARUM_ADMIN_USER=admin        #网站管理员账户
FLARUM_ADMIN_PASS=xxxxxxxxxx    #密码和上面的密码保持一致
FLARUM_ADMIN_MAIL=admin@domain.tld       #管理员邮箱
FLARUM_TITLE=Test flarum      #网站标题<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


</li>
<li><p>运行你的 docker-compose</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker-compose</span> up <span class="token parameter variable">-d</span> mariadb
<span class="token function">docker-compose</span> up <span class="token parameter variable">-d</span> flarum<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li>
</ol>
<p>这个时候在浏览器输入你的IP+端口号就能进入网站</p>
<h2 id="3-出现问题的及解决方法"><a href="#3-出现问题的及解决方法" class="headerlink" title="3.出现问题的及解决方法"></a>3.出现问题的及解决方法</h2><h3 id="1-如果进入网站，只显示标题让你强制刷新，怎么办。"><a href="#1-如果进入网站，只显示标题让你强制刷新，怎么办。" class="headerlink" title="1.如果进入网站，只显示标题让你强制刷新，怎么办。"></a>1.如果进入网站，只显示标题让你强制刷新，怎么办。</h3><p>显示<em>Something went wrong while trying to load the full version of this site. Try hard-refreshing this page to fix the error.</em></p>
<p>如果是配置了域名</p>
<pre class="line-numbers language-none"><code class="language-none"># 进入容器内部
docker exec -it flarum-app sh

# 修改 /flarum/app/config.php

vi /flarum/app/config.php<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-none"><code class="language-none">URL='外网ip:端口'  
#域名的话输入
 'url' =&gt; 'https://huddleberry.com'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>最后输入;wq 保存退出，这个时候会发现没用。</p>
<p>然后运行</p>
<pre class="line-numbers language-undefined" data-language="undefined"><code class="language-undefined">php flarum cache:clear<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>清理缓存，刷新网站，发现好了。</p>
<h3 id="2-重启容器后显示错误，直接进不去"><a href="#2-重启容器后显示错误，直接进不去" class="headerlink" title="2.重启容器后显示错误，直接进不去"></a>2.重启容器后显示错误，直接进不去</h3><p>显示</p>
<p>Next Doctrine\DBAL\Driver\PDO\Exception: SQLSTATE[HY000] [1045] Access denied for user ‘flarum‘@’172.19.0.3’ (using password: YES) in /flarum/app/vendor/doctrine/dbal/lib/Doctrine/DBAL/Driver/PDO/Exception.php:18</p>
<p>这个情况可能是数据库的密码和账户不对</p>
<p>检查上面配置的账号密码是不是对的上，有时候，密码设置的问题也可能会这样，试着换个密码，官网说</p>
<p>您的管理员密码必须至少包含<strong>8 个字符</strong>(FLARUM_ADMIN_PASS)。</p>
<h3 id="3-每次重启容器后发现都只显示标题让你强制刷新"><a href="#3-每次重启容器后发现都只显示标题让你强制刷新" class="headerlink" title="3.每次重启容器后发现都只显示标题让你强制刷新"></a>3.每次重启容器后发现都只显示标题让你强制刷新</h3><p>执行解决方法1.每次都要这么操作一下，就非常的麻瓜。</p>
<p>如果大家配置了Protainer那就方便了。</p>
<p>选择flarum容器</p>
<p><img src="D:/%E5%8D%9A%E5%AE%A2%E6%96%87%E7%AB%A0%E5%9B%BE%E7%89%87/%E4%BD%BF%E7%94%A8Docker-compose%E9%83%A8%E7%BD%B2Flarum%E8%AE%BA%E5%9D%9B/1.JPG" alt="1"></p>
<p><img src="D:/%E5%8D%9A%E5%AE%A2%E6%96%87%E7%AB%A0%E5%9B%BE%E7%89%87/%E4%BD%BF%E7%94%A8Docker-compose%E9%83%A8%E7%BD%B2Flarum%E8%AE%BA%E5%9D%9B/2.JPG" alt="2"></p>
<p><img src="D:/%E5%8D%9A%E5%AE%A2%E6%96%87%E7%AB%A0%E5%9B%BE%E7%89%87/%E4%BD%BF%E7%94%A8Docker-compose%E9%83%A8%E7%BD%B2Flarum%E8%AE%BA%E5%9D%9B/3.JPG" alt="3"></p>
<p>在FORUM_URL里输入正确的域名就行了。最后重新部署一下。</p>
<p>完成</p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2022/11/29/%E5%85%8D%E8%B4%B9%E5%BE%AE%E8%BD%AFOffice%20365%20E5%20%E8%AE%A2%E9%98%85+5T%20OneDrive%E5%B9%B6%E6%B0%B8%E4%B9%85%E7%BB%AD%E6%9C%9F/</url>
    <content><![CDATA[<h1 id="免费微软Office-365-E5-订阅-5T-OneDrive并永久续期"><a href="#免费微软Office-365-E5-订阅-5T-OneDrive并永久续期" class="headerlink" title="免费微软Office 365 E5 订阅+5T OneDrive并永久续期"></a>免费微软Office 365 E5 订阅+5T OneDrive并永久续期</h1><h2 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1.介绍"></a>1.介绍</h2><p><strong>微软其实一直都对开发版免费提供正版office全家桶</strong>，对开发者的培育力度真的确实很大的，申请一次开发者计划可以获得为期90天的免费 Office365 E5 订阅。</p>
<p>E5计划就包含了25个用于所有 Office 365 应用的许可证。还附带<strong>5T的不限速OneDrive网盘容量。</strong></p>
<p>简直就是白嫖党的福音，马上白嫖起来！</p>
<p>这次主要介绍以下操作和教程</p>
<ul>
<li>如何申请E5订阅许可</li>
<li>获取5T容量的OneDrive </li>
<li>通过Docker搭建配置永久续期教程。</li>
</ul>
<h2 id="2-申请微软开发人员账号"><a href="#2-申请微软开发人员账号" class="headerlink" title="2.申请微软开发人员账号"></a>2.申请微软开发人员账号</h2><ol>
<li><p><a href="https://developer.microsoft.com/zh-cn/microsoft-365/dev-program">访问链接</a></p>
</li>
<li><p><img src="https://tianyedetutu.top/images/2022/11/29/image-20221128232228372.png" alt="image-20221128232228372"></p>
</li>
<li><p>点击立即加入</p>
</li>
<li><p>注册或者使用自己的微软账号登陆。</p>
</li>
<li><p>注册开发人员，国家填China，我选的Japan。公司随便填，然后接受条款，点下一步</p>
</li>
<li><p>从事行业可以随便选然后保存</p>
</li>
<li><p>选择即时沙盒，如果不需要自定义域名就直接选即时沙盒，反之选第二个。<img src="https://tianyedetutu.top/images/2022/11/29/image-20221129012308133.png" alt="image-20221129012308133"></p>
</li>
<li><p>设置好自己需要的配置后验证号码即可</p>
<p><img src="https://tianyedetutu.top/images/2022/11/29/image-20221129012838615.png" alt="image-20221129012838615"></p>
</li>
</ol>
<h3 id="分配账号"><a href="#分配账号" class="headerlink" title="分配账号"></a>分配账号</h3><p>如果需要分配子账户，到这里<a href="https://admin.microsoft.com登录你的开发者账号,选择用户给添加一个账户/">https://admin.microsoft.com登录你的开发者账号，选择用户给添加一个账户</a></p>
<h2 id="3-设置-OneDrive-5T-容量"><a href="#3-设置-OneDrive-5T-容量" class="headerlink" title="3.设置 OneDrive 5T 容量"></a>3.设置 OneDrive 5T 容量</h2><p>使用创建的账号，登陆E5</p>
<p><a href="https://admin.onedrive.com/?v=StorageSettings%EF%BC%8C">https://admin.onedrive.com/?v=StorageSettings，</a></p>
<p><img src="https://tianyedetutu.top/images/2022/11/29/image-20221129013302124.png" alt="image-20221129013302124"></p>
<h2 id="4-续期E5开发者账户"><a href="#4-续期E5开发者账户" class="headerlink" title="4.续期E5开发者账户"></a>4.续期E5开发者账户</h2><p>MS365 E5 Renew X是由大佬<a href="https://blog.csdn.net/qq_33212020">SundayRX</a>开发的网页版的E5续订服务，其依赖网页浏览器呈现支持用户多端操作，完全将E5账户API调用托管在了服务器端因此用户无需电脑也可使用。</p>
<p>其实目的就是一个</p>
<p>简单来说就是假装你是开发者，然后调用API进行E5续订</p>
<p>要让我们装的真实，就使用这个来进行API的连续调用从而达到自动续期的目的</p>
<p>具体可以看看<a href="https://www.gladtbam.top/posts/36944/%E8%BF%99%E9%87%8C%E7%9A%84%E5%B8%AE%E5%8A%A9%E6%96%87%E6%A1%A3%EF%BC%8C%E5%86%99%E7%9A%84%E5%BE%88%E8%AF%A6%E7%BB%86%E3%80%82">https://www.gladtbam.top/posts/36944/这里的帮助文档，写的很详细。</a></p>
<p>具体设置可以直接查看<a href="https://blog.csdn.net/qq_33212020">SundayRX</a>大佬的文章</p>
<p>由于我太懒，直接使用桌面端直接自动配置号API权限，然后再使用Docker来搭建网页端。</p>
<p>具体操作</p>
<h3 id="1-注册Azure应用程序"><a href="#1-注册Azure应用程序" class="headerlink" title="1.注册Azure应用程序"></a>1.注册Azure应用程序</h3><p>1、登录<a href="https://portal.azure.com/#blade/Microsoft_AAD_RegisteredApps/ApplicationsListBlade">Azure应用注册</a></p>
<p><img src="https://tianyedetutu.top/images/2022/11/29/image-20221129015045104.png" alt="image-20221129015045104"></p>
<p>如果没有找到可以再上面搜索 应用注册</p>
<p>2.选择新注册</p>
<p><img src="https://tianyedetutu.top/images/2022/11/29/image-20221129015151742.png" alt="image-20221129015151742"></p>
<p>3.名称随便填，选择第三个任何组织</p>
<p><img src="https://tianyedetutu.top/images/2022/11/29/image-20221129015241442.png" alt="image-20221129015241442"></p>
<p>4.选择概述里面的添加重定向URI</p>
<p><img src="https://tianyedetutu.top/images/2022/11/29/image-20221129015411068.png" alt="image-20221129015411068"></p>
<p>5.选择添加平台—移动和桌面程序—</p>
<p>勾选第一个URL“<a href="https://login.microsoftonline.com/common/oauth2/nativeclient%E2%80%9D%E5%90%8E%E7%82%B9%E5%87%BB%E9%85%8D%E7%BD%AE%E3%80%82">https://login.microsoftonline.com/common/oauth2/nativeclient”后点击配置。</a></p>
<p>两个是勾上</p>
<p><img src="https://tianyedetutu.top/images/2022/11/29/image-20221129015556592.png" alt="image-20221129015556592"></p>
<p>6.配置桌面 + 设备重定向 URI选择第一个</p>
<p><img src="https://tianyedetutu.top/images/2022/11/29/2022-11-29-015633.jpg" alt="屏幕截图 2022-11-29 015633"></p>
<h3 id="2-配置API权限"><a href="#2-配置API权限" class="headerlink" title="2.配置API权限"></a>2.配置API权限</h3><p>下载Windows程序链接<a href="https://sundayrx.lanzouq.com/2R2AByh83333%EF%BC%8C%E4%B8%8B%E8%BD%BD%E5%AE%8C%E8%A7%A3%E5%8E%8B%E5%90%8E%E6%89%93%E5%BC%80%E8%BD%AF%E4%BB%B6%E3%80%82%E7%82%B9%E5%87%BB%E5%BC%80%E5%A7%8B%E8%BF%90%E8%A1%8C%E3%80%82">https://sundayrx.lanzouq.com/2R2AByh83333，下载完解压后打开软件。点击开始运行。</a></p>
<p>1、点击“添加账号”，填上E5账号，之前保存的应用程序（客户端）ID,以及E5账号密码，选择”登录调用”，点击“启动自动授权”。</p>
<p>2、在弹出的登陆页面中输入你的管理员账户名和密码登录，登录成功时弹出“请求征得许可界面”，滚动到页面最底部勾选“代表组织同意”，最后点击“接受”。</p>
<p>3、API配置成功后，你可以选择使用Windows版的一直运行着，其实用Windows端的目的就是使用它自动配置好授权的简单功能方便后续的docker端方便。如果你和我一样想要直接在服务器上跑。看下面的教程。</p>
<h2 id="5-Docker-部署Microsoft-365-E5-Renew-X"><a href="#5-Docker-部署Microsoft-365-E5-Renew-X" class="headerlink" title="5.Docker 部署Microsoft 365 E5 Renew X"></a>5.Docker 部署Microsoft 365 E5 Renew X</h2><p>环境</p>
<ul>
<li>Ubuntu22.04</li>
<li>docker</li>
</ul>
<h3 id="5-1安装docker"><a href="#5-1安装docker" class="headerlink" title="5.1安装docker"></a>5.1安装docker</h3><p>安装其实很简单，只需要运行第一条命令，后面你可以选择安装。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#1.安装Docker</span>
<span class="token function">wget</span> -qO- get.docker.com <span class="token operator">|</span> <span class="token function">bash</span>

<span class="token comment">#2.开机自动启动</span>
systemctl <span class="token builtin class-name">enable</span> <span class="token function">docker</span>

<span class="token comment">#3.安装Docker-compose</span>
<span class="token function">sudo</span> <span class="token function">curl</span> <span class="token parameter variable">-L</span> <span class="token string">"https://github.com/docker/compose/releases/download/1.29.2/docker-compose-<span class="token variable"><span class="token variable">$(</span><span class="token function">uname</span> <span class="token parameter variable">-s</span><span class="token variable">)</span></span>-<span class="token variable"><span class="token variable">$(</span><span class="token function">uname</span> <span class="token parameter variable">-m</span><span class="token variable">)</span></span>"</span> <span class="token parameter variable">-o</span> /usr/local/bin/docker-compose

<span class="token comment">#4.赋予执行权限</span>
<span class="token function">sudo</span> <span class="token function">chmod</span> +x /usr/local/bin/docker-compose

<span class="token comment">#5.安装Portainer（可以不安装）</span>
<span class="token function">sudo</span> <span class="token function">docker</span> volume create portainer_data

<span class="token comment">#6.下载并安装 Portainer Server 容器 (可选)</span>
<span class="token function">sudo</span> <span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">-p</span> <span class="token number">8000</span>:8000 <span class="token parameter variable">-p</span> <span class="token number">9443</span>:9443 <span class="token parameter variable">--name</span> portainer <span class="token punctuation">\</span>
  <span class="token parameter variable">--restart</span><span class="token operator">=</span>always <span class="token punctuation">\</span>
  <span class="token parameter variable">-v</span> /var/run/docker.sock:/var/run/docker.sock <span class="token punctuation">\</span>
  <span class="token parameter variable">-v</span> portainer_data:/data <span class="token punctuation">\</span>
  portainer/portainer-ce:latest<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="5-2正式搭建"><a href="#5-2正式搭建" class="headerlink" title="5.2正式搭建"></a>5.2正式搭建</h3><p>看了一下说明文档，貌似有两种一种是直接使用默认配置，但是我没找到怎么改密码。</p>
<p>所以我建议使用第二种方法，不过还是两种我都介绍一下。</p>
<h4 id="方法一-使用默认配置部署"><a href="#方法一-使用默认配置部署" class="headerlink" title="方法一: 使用默认配置部署"></a>方法一: 使用默认配置部署</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token punctuation">\</span>
    <span class="token parameter variable">-p</span> <span class="token number">1066</span>:1066 <span class="token punctuation">\</span>
    <span class="token parameter variable">--name</span> RenewX <span class="token punctuation">\</span>
gladtbam/ms365_e5_renewx:latest<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>IP+1066访问默认配置密码为12345678</p>
<h4 id="方法二-自定义配置"><a href="#方法二-自定义配置" class="headerlink" title="方法二: 自定义配置"></a>方法二: 自定义配置</h4><p>1.下载<a href="https://sundayrx.lanzoui.com/aW09Lsss75g">E5 Renew X</a>的配置文件Config.xml，按照Config.xml文件说明进行修改。解压缩，找到Deploy里面就有。</p>
<p>2.输入</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> /root/Deploy   <span class="token comment">#创建一个Deploy文件夹</span>
<span class="token builtin class-name">cd</span> /root/Deploy<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>3.上传配置好的Config.xml到/root/Deploy  记得在里面改好密码</p>
<p>4.输入</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token punctuation">\</span>
    <span class="token parameter variable">-p</span> <span class="token number">1066</span>:1066 <span class="token punctuation">\</span>
    <span class="token parameter variable">-v</span> <span class="token environment constant">$PWD</span>/Deploy:/renewx/Deploy <span class="token punctuation">\</span>
    <span class="token parameter variable">-v</span> <span class="token environment constant">$PWD</span>/appdata:/renewx/appdata <span class="token punctuation">\</span>
    <span class="token parameter variable">--name</span> RenewX <span class="token punctuation">\</span>
gladtbam/ms365_e5_renewx:latest<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>5.最后浏览器输入服务器IP+端口号进入</p>
<p><img src="https://tianyedetutu.top/images/2022/11/29/image-20221129021958344.png" alt="image-20221129021958344"></p>
<p>6.添加账号</p>
<h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>1、一定不要打开双重验证，不然会错误的。</p>
<p>什么？不会关？</p>
<p>好吧，进入<a href="https://aad.portal.azure.com/#blade/Microsoft_AAD_IAM/ActiveDirectoryMenuBlade/Overview">https://aad.portal.azure.com/#blade/Microsoft_AAD_IAM/ActiveDirectoryMenuBlade/Overview</a></p>
<p>仪表盘</p>
<p><img src="https://tianyedetutu.top/images/2022/11/29/image-20221129022357467.png" alt="image-20221129022357467"></p>
<p><img src="https://tianyedetutu.top/images/2022/11/29/image-20221129022425898.png" alt="image-20221129022425898"></p>
<p>最后点击否就可以关闭了。</p>
<p>2.其实这个方法只能增加续订几率，能不能成就看微软，不过一般没问题。续订很玄学</p>
<p>最后真的感慨网友们的这些操作，真的牛</p>
<p>感谢开发软件的作者，还有出各种教程的大佬们</p>
<p>然后再附上帮助文档</p>
<p><a href="https://www.gladtbam.top/posts/36944/">https://www.gladtbam.top/posts/36944/</a></p>
<p>好了开启白嫖生活吧 www╰(<em>°▽°</em>)╯</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.dzdxtd.com/archives/122">2022 申请 Office 365 E5 订阅并永久续期+ 5T 不限速网盘教程</a></p>
<p><a href="https://www.gladtbam.top/posts/22256/">Microsoft 365 E5 Renew X Docker 部署</a></p>
<p><a href="https://moeci.com/posts/%E5%88%86%E7%B1%BB-docker/docker-ms-e5/">Microsoft 365 E5 自动续订 | Docker 自建</a></p>
<p><a href="https://blog.csdn.net/qq_33212020/article/details/119747634">E5 调用API续订服务：Microsoft 365 E5 Renew X</a></p>
<p><a href="https://www.kejiwanjia.com/jiaocheng/82073.html">Docker部署Microsoft 365 E5 Renew X以续订Office365E5订阅</a></p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2022/10/23/%E5%85%B3%E4%BA%8E%E6%88%91%E6%8A%98%E8%85%BE%E4%B8%80%E5%A4%A9%E6%88%90%E5%8A%9F%E5%9C%A8%E7%AC%94%E8%AE%B0%E6%9C%AC%E7%9A%84%E5%85%89%E9%A9%B1%E4%BD%8D%E7%A1%AC%E7%9B%98%E5%AE%89%E8%A3%85Ubuntu%E7%9A%84%E4%BA%8B/</url>
    <content><![CDATA[<h1 id="关于我折腾一天成功在笔记本的光驱位硬盘安装Ubuntu的事"><a href="#关于我折腾一天成功在笔记本的光驱位硬盘安装Ubuntu的事" class="headerlink" title="关于我折腾一天成功在笔记本的光驱位硬盘安装Ubuntu的事"></a>关于我折腾一天成功在笔记本的光驱位硬盘安装Ubuntu的事</h1><p>有一台老旧的笔记本没什么用，今天收到了网上之前定的光驱硬盘托架，打算把SSD装进去然后装上Ubuntu。中途遇到很多问题装不上，直接搞的我差点昏过去，各种查资料，看视频。总结了一下安装的经验。</p>
<p>主要失败原因可能就是在固态硬盘里安装好系统后，机械硬盘在主硬盘位里没有系统的情况下，部分笔记本会发现无法开机了，原因是笔记本的光驱位不可以作为引导系统开机的，因为在按下电源键后主板不会及时给光驱位供电，导致电脑检测不到系统的启动文件，所以就报错了，这个问题最简便的方式就是使用主硬盘进行引导 。</p>
<p>介绍一下全部的流程。</p>
<h2 id="1-制作一个写盘工具"><a href="#1-制作一个写盘工具" class="headerlink" title="1.制作一个写盘工具"></a>1.制作一个写盘工具</h2><p>下载</p>
<p><a href="https://rufus.ie/">RUFUS软件</a></p>
<p>下载好Ubuntu的镜像文件，启动rufus软件</p>
<p><img src="D:\博客文章图片\关于我折腾一天成功在笔记本的光驱位硬盘安装Ubuntu的事\200abbeab7fb9cf1e684346a88e8cb7b.png" alt="200abbeab7fb9cf1e684346a88e8cb7b"></p>
<p>看到准备就绪，就写入完成，记住第四步最好选择NTFS，不然容易安装出错。</p>
<h2 id="2-给光驱位硬盘安装Ubuntu"><a href="#2-给光驱位硬盘安装Ubuntu" class="headerlink" title="2.给光驱位硬盘安装Ubuntu"></a>2.给光驱位硬盘安装Ubuntu</h2><p>这一步我出现很多问题，慢慢来没问题的。</p>
<p>笔记本插入U盘，把U盘设置成第一启动项启动电脑。</p>
<p>然后选择 Install Ubuntu</p>
<ol>
<li><p>选择安装语言，在语言选择栏拉到底可以看到简体中文（倒数第三个），选择中文（简体），然后点击安装Ubuntu进入安装。</p>
</li>
<li><p>选择键盘布局</p>
</li>
<li><p>根据需求我选择正常安装</p>
</li>
<li><p>选择双系统并存还是只安装Ubuntu，由于我之前安装过Ubuntu18.04LTS，这里第一项提示卸载Ubuntu 18.04LTS并重新安装，如果之前没有安装过，会显示与Windows10系统并存，选择双系统并存的选择第一项，选择只安装Ubuntu的可以选择第二项，清除整个磁盘并安装Ubuntu，这里我先选择第一项，然后点击现在安装 。</p>
<p>选择安装磁盘，这里我们先在我们的<em><strong>光驱位硬盘</strong></em>上安装</p>
</li>
<li><p>提示将改动写入磁盘，现在继续</p>
</li>
<li><p>提示选择时区，在哪就在地图上点哪，然后继续</p>
</li>
<li><p>等待安装完成。</p>
</li>
</ol>
<h2 id="3-安装中出现的问题"><a href="#3-安装中出现的问题" class="headerlink" title="3.安装中出现的问题"></a>3.安装中出现的问题</h2><p>一般正常安装不会有问题的，但是我就遇到了。</p>
<p>分享一下解决方法</p>
<h3 id="3-1-提示U盘安装Ubuntu遇到错误"><a href="#3-1-提示U盘安装Ubuntu遇到错误" class="headerlink" title="3-1.提示U盘安装Ubuntu遇到错误"></a>3-1.提示U盘安装Ubuntu遇到错误</h3><p>U盘安装Ubuntu18.04.1遇到错误：</p>
<p>安装程序向硬盘复制文件是遇到错误：[Errno 5] Input/out error ；</p>
<p>这通常是由于CD/DVD盘片或者驱动器有问题，或者硬盘错误造成的。以下措施可能有助于解决问题：清洁盘片、低速刻录或者清洁CD/DVD驱动器激光头（清洁工具通常在电子设备供应商处获得）、检查硬盘是否太旧而需要更换或者把硬盘放置到散热良好的环境中。</p>
<p>查了一下网上资料</p>
<p>遇到这个问题解决方案分为几种</p>
<p>解决方案:</p>
<ol>
<li>制作启动U盘的过程中，iso镜像写入时，U盘的格式为fat32，而电脑的磁盘格式是NTFS；想解决问题，使用RUFUS制作U盘启动，其中文件格式选为NTFS。（开始我试了，但是并不能解决问题然后试了方法二）</li>
<li>换U盘（结果还是不行）</li>
<li>笔记本过热*(我真的不会想到，过热会安装失败，找一个散热环境好的地方顺利解决问题)晕(&gt;_&lt;)</li>
</ol>
<h2 id="4-给内置机械硬盘安装Ubuntu"><a href="#4-给内置机械硬盘安装Ubuntu" class="headerlink" title="4.给内置机械硬盘安装Ubuntu"></a>4.给内置机械硬盘安装Ubuntu</h2><p>每次安装Ubuntu，系统会创建一个Grub引导，我试着单独安装，但是怎么折腾都不行，然后就用了很傻逼的方法，我再给机械硬盘一下Ubuntu是不是就可以让他帮我安装Grub然后就可以开机后自行选择了？试了一下真的可以。</p>
<p>同样的步骤安装Ubuntu选择安装到机械硬盘然后启动系统。</p>
<p><img src="D:\博客文章图片\关于我折腾一天成功在笔记本的光驱位硬盘安装Ubuntu的事\IMG_7756.jpg" alt="IMG_7756"></p>
<h2 id="5-配置默认启动项"><a href="#5-配置默认启动项" class="headerlink" title="5.配置默认启动项"></a>5.配置默认启动项</h2><p>这里就大功告成了，每次默认是启动我们机械硬盘的Ubuntu系统，我们可以修改默认启动项然后让他每次从SSD启动。</p>
<p>方法如下</p>
<ol>
<li><p>进入Ubuntu系统中，打开终端，输入以下命令：</p>
<pre class="line-numbers language-none"><code class="language-none">sudo gedit /etc/default/grub<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>


</li>
<li><p>我的Ubuntu启动项是第5项，则在弹出的页面第六行设置：<br>GRUB_DEFAULT = 4；把原来默认的0改为4就好。<br>这里需要说明一下，0表示机械硬盘的Ubuntu系统，第5个SSD的Ubuntu系统用4表示，大家视自己启动选项而定<img src="D:\博客文章图片\关于我折腾一天成功在笔记本的光驱位硬盘安装Ubuntu的事\921f32ff391f4ae2ab1e3ed166c2d4d3.png" alt="921f32ff391f4ae2ab1e3ed166c2d4d3"></p>
</li>
<li><p>修改完毕后，终端输入：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">update-grub</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
</ol>
<p>完成。</p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2022/11/19/%E5%9C%A8Linux%E4%B8%8A%E9%80%9A%E8%BF%87%E5%91%BD%E4%BB%A4%E8%A1%8Cscp%E8%BF%9C%E7%A8%8B%E6%8B%B7%E8%B4%9D%E6%96%87%E4%BB%B6%E5%8F%8A%E6%96%87%E4%BB%B6%E5%A4%B9/</url>
    <content><![CDATA[<h1 id="在Linux上通过命令行scp远程拷贝文件及文件夹"><a href="#在Linux上通过命令行scp远程拷贝文件及文件夹" class="headerlink" title="在Linux上通过命令行scp远程拷贝文件及文件夹"></a>在Linux上通过命令行scp远程拷贝文件及文件夹</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>Linux scp 命令用于 Linux 之间复制文件和目录。</p>
<p>scp 是 secure copy 的缩写, scp 是 linux 系统下基于 ssh 登陆进行安全的远程文件拷贝命令。</p>
<p>scp 是加密的，<a href="https://www.runoob.com/linux/linux-comm-rcp.html">rcp</a> 是不加密的，scp 是 rcp 的加强版。</p>
<h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><p><strong>参数说明：</strong></p>
<ul>
<li>-1： 强制scp命令使用协议ssh1</li>
<li>-2： 强制scp命令使用协议ssh2</li>
<li>-4： 强制scp命令只使用IPv4寻址</li>
<li>-6： 强制scp命令只使用IPv6寻址</li>
<li>-B： 使用批处理模式（传输过程中不询问传输口令或短语）</li>
<li>-C： 允许压缩。（将-C标志传递给ssh，从而打开压缩功能）</li>
<li>-p：保留原文件的修改时间，访问时间和访问权限。</li>
<li>-q： 不显示传输进度条。</li>
<li>-r： 递归复制整个目录。</li>
<li>-v：详细方式显示输出。scp和ssh(1)会显示出整个过程的调试信息。这些信息用于调试连接，验证和配置问题。</li>
<li>-c cipher： 以cipher将数据传输进行加密，这个选项将直接传递给ssh。</li>
<li>-F ssh_config： 指定一个替代的ssh配置文件，此参数直接传递给ssh。</li>
<li>-i identity_file： 从指定文件中读取传输时使用的密钥文件，此参数直接传递给ssh。</li>
<li>-l limit： 限定用户所能使用的带宽，以Kbit/s为单位。</li>
<li>-o ssh_option： 如果习惯于使用ssh_config(5)中的参数传递方式，</li>
<li>-P port：注意是大写的P, port是指定数据传输用到的端口号</li>
<li>-S program： 指定加密传输时所使用的程序。此程序必须能够理解ssh(1)的选项。</li>
</ul>
<h2 id="具体实际的使用方法"><a href="#具体实际的使用方法" class="headerlink" title="具体实际的使用方法"></a>具体实际的使用方法</h2><h3 id="1、拷贝本机-x2F-home-x2F-test整个目录至远程主机192-168-1-11的-x2F-root目录下"><a href="#1、拷贝本机-x2F-home-x2F-test整个目录至远程主机192-168-1-11的-x2F-root目录下" class="headerlink" title="1、拷贝本机/home/test整个目录至远程主机192.168.1.11的/root目录下"></a>1、拷贝本机/home/test整个目录至远程主机192.168.1.11的/root目录下</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">scp</span> <span class="token parameter variable">-r</span> /home/tes/ root@192.168.1.11:/root/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="2、拷贝单个文件至远程主机"><a href="#2、拷贝单个文件至远程主机" class="headerlink" title="2、拷贝单个文件至远程主机"></a>2、拷贝单个文件至远程主机</h3><pre class="line-numbers language-none"><code class="language-none">scp /home/nihao.mp4 root@192.168.1.11:/root/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>



<h3 id="3、远程文件-x2F-文件夹下载"><a href="#3、远程文件-x2F-文件夹下载" class="headerlink" title="3、远程文件/文件夹下载"></a>3、远程文件/文件夹下载</h3><p>把192.168.1.11上面的/home/data/qihun文件夹下面的所有电视剧，下载到本地的/home/wenjian/电视剧　下，使用远程端的root登陆,因为我SSH的登陆端口指定过1234所以加了一个 -P 1234命令，-r是递归，就是把文件夹下面所有文件拷贝的意思。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">scp</span> <span class="token parameter variable">-P</span> <span class="token number">1234</span> <span class="token parameter variable">-r</span> root@192.168.1.11:/home/data/qihun /home/wenjian/电视剧<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2022/10/22/%E5%A6%82%E4%BD%95%E5%9C%A8%20Ubuntu%2022.04%20LTS%20%E4%B8%AD%E5%AE%89%E8%A3%85%20Docker%20%E5%92%8C%20Docker%20Compose/</url>
    <content><![CDATA[<h1 id="如何在-Ubuntu-22-04-LTS-中安装-Docker-和-Docker-Compose"><a href="#如何在-Ubuntu-22-04-LTS-中安装-Docker-和-Docker-Compose" class="headerlink" title="如何在 Ubuntu 22.04 LTS 中安装 Docker 和 Docker Compose"></a>如何在 Ubuntu 22.04 LTS 中安装 Docker 和 Docker Compose</h1><p>在这篇文章中，我们将会明白 Docker 是什么，如何 <strong>在 Ubuntu 中安装 Docker 引擎</strong> 。此外，我们也将会明白如何 <strong>安装 Docker Compose</strong> ，它是一个定义并运行多容器的 Docker 应用。</p>
<p>我们已经在 Ubuntu 22.04 LTS 中正式的测试了这份指南。然而，它也应该对旧版本如 20.04 LTS 和 18.04 LTS 有效。为了更好的安全性和稳定性，我推荐你使用最新的版本 —— Ubuntu 22.04 LTS 。</p>
<h3 id="什么是-Docker-？"><a href="#什么是-Docker-？" class="headerlink" title="什么是 Docker ？"></a>什么是 Docker ？</h3><p><strong>Docker</strong> 是一个快捷、轻便的系统级虚拟化技术，开发者和系统管理员可以使用它构建具备所有必要依赖项的应用程序，并将其作为一个包发布。</p>
<p>Docker 与其他如 VMWare 、Xen 、以及 VirtualBox 等工具的虚拟化方式不同，每个虚拟机不需要单独的客户操作系统。</p>
<p>所有的 Docker 容器有效地共享同一个主机系统内核。每个容器都在同一个操作系统中的隔离用户空间中运行。</p>
<p>Docker 容器可以在任何 Linux 版本上运行。比如说你使用 Fedora ，我用 Ubuntu 。我们能相互开发、共享并分发 Docker 镜像。</p>
<p>你无需担心操作系统、软件以及自定义设置，任何事都不用担心。只要我们的主机安装了 Docker ，就能持续开发。简言之，Docker 能够在任何地方运行！</p>
<p>前文中你读到了两个词：<strong>Docker 镜像</strong> 和 <strong>Docker 容器</strong> ，或许你在想它们的区别。</p>
<p>通俗地说，Docker 镜像是一个描述容器应该如何表现的文件，而 Docker 容器是 Docker 镜像的运行（或停止）状态。</p>
<p>希望你能够理解 Docker 的基础概念。更多细节，你可以参考文章末尾的 Docker 官方指导手册。</p>
<h3 id="Docker-依赖项"><a href="#Docker-依赖项" class="headerlink" title="Docker 依赖项"></a>Docker 依赖项</h3><p>为了安装并配置 Docker ，你的系统必须满足下列最低要求：</p>
<ol>
<li>64 位 Linux 或 Windows 系统</li>
<li>如果使用 Linux ，内核版本必须不低于 3.10</li>
<li>能够使用<code>sudo</code> 权限的用户</li>
<li>在你系统 BIOS 上启用了 VT（虚拟化技术）支持 on your system BIOS（参考:<a href="https://ostechnix.com/how-to-find-if-a-cpu-supports-virtualization-technology-vt/">如何查看 CPU 支持 虚拟化技术（VT）</a>）</li>
<li>你的系统应该联网</li>
</ol>
<p>在 Linux ，在终端上运行以下命令验证内核以及架构详细信息：</p>
<p>复制</p>
<pre class="line-numbers language-none"><code class="language-none">$ uname -a1.<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>输出样例：</p>
<p>复制</p>
<pre class="line-numbers language-none"><code class="language-none">Linux Ubuntu22CT 5.15.35-3-pve #1 SMP PVE 5.15.35-6 (Fri, 17 Jun 2022 13:42:35 +0200) x86_64 x86_64 x86_64 GNU/Linux1.<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>正如上面你看到的那样，我的 Ubuntu 系统内核版本是 <strong>5.15.35-3-pve</strong> 并且系统架构是 <strong>64 位</strong>（<strong>x86_64 x86_64 x86_64 GNU/Linux</strong>）。</p>
<blockquote>
<p><strong>注意：</strong> 这里，我在 <a href="https://ostechnix.com/install-proxmox-ve/">Proxmox</a> 中使用 Ubuntu 22.04 容器。这是你看到上方内核版本中有 “pve” 字符的原因。如果你正在使用 Ubuntu 实体（或者虚拟）机，你将看到系统版本为 <strong>5.15.35-3-generic</strong> 。</p>
</blockquote>
<p>内核版本需要不低于最低要求的版本，并且是 64 位机器。这样不会有任何问题，我们能顺利安装并使用 Docker 。</p>
<p>请注意你使用哪一个 Ubuntu 系统不重要。并且你使用 Ubuntu 桌面或服务器版本，亦或者其他 Ubuntu 变种如 Lubuntu 、Kubuntu 、Xubuntu ，都不重要。</p>
<p>只要你的系统内核版本不低于 3.10 ，并且是 64 位系统，Docker 都会正常运行。</p>
<h3 id="在-Ubuntu-22-04-LTS-中安装-Docker"><a href="#在-Ubuntu-22-04-LTS-中安装-Docker" class="headerlink" title="在 Ubuntu 22.04 LTS 中安装 Docker"></a>在 Ubuntu 22.04 LTS 中安装 Docker</h3><p>首先，更新你的 Ubuntu 系统。</p>
<h4 id="1、更新-Ubuntu"><a href="#1、更新-Ubuntu" class="headerlink" title="1、更新 Ubuntu"></a>1、更新 Ubuntu</h4><p>打开终端，依次运行下列命令：</p>
<p>复制</p>
<pre class="line-numbers language-none"><code class="language-none">$ sudo apt update
$ sudo apt upgrade
$ sudo apt full-upgrade1.2.3.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h4 id="2、添加-Docker-库"><a href="#2、添加-Docker-库" class="headerlink" title="2、添加 Docker 库"></a>2、添加 Docker 库</h4><p>首先，安装必要的证书并允许 apt 包管理器使用以下命令通过 HTTPS 使用存储库：</p>
<p>复制</p>
<pre class="line-numbers language-none"><code class="language-none">$ sudo apt install apt-transport-https ca-certificates curl software-properties-common gnupg lsb-release1.<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>然后，运行下列命令添加 Docker 的官方 GPG 密钥：</p>
<p>复制</p>
<pre class="line-numbers language-none"><code class="language-none">$ curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg1.<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>添加 Docker 官方库：</p>
<p>复制</p>
<pre class="line-numbers language-none"><code class="language-none">$ echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list &gt; /dev/null1.<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>使用命令更新 Ubuntu 源列表：</p>
<p>复制</p>
<pre class="line-numbers language-none"><code class="language-none">$ sudo apt update1.<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h4 id="3、安装-Docker"><a href="#3、安装-Docker" class="headerlink" title="3、安装 Docker"></a>3、安装 Docker</h4><p>最后，运行下列命令在 Ubuntu 22.04 LTS 服务器中安装最新 Docker CE：</p>
<p>复制</p>
<pre class="line-numbers language-none"><code class="language-none">$ sudo apt install docker-ce docker-ce-cli containerd.io docker-compose-plugin<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2022/10/28/%E5%A6%82%E4%BD%95%E7%BB%99Minecraft%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%BB%91%E5%AE%9A%E5%9F%9F%E5%90%8D/</url>
    <content><![CDATA[<h1 id="如何给Minecraft服务器绑定域名"><a href="#如何给Minecraft服务器绑定域名" class="headerlink" title="如何给Minecraft服务器绑定域名"></a>如何给Minecraft服务器绑定域名</h1><p>每次让朋友连接自己的Minecraft服务器，都得发他们IP，第一不方便记忆，第二不想暴露IP地址和端口号，如果我们绑定了域名，每次只需要输入域名，就不需要输入IP+端口号了。</p>
<h2 id="前提条件"><a href="#前提条件" class="headerlink" title="前提条件"></a>前提条件</h2><ul>
<li>一台已经架设且可访问的Minecraft服务器</li>
</ul>
<h2 id="1-注册一个域名"><a href="#1-注册一个域名" class="headerlink" title="1.注册一个域名"></a>1.注册一个域名</h2><p>要域名访问，首先你得要注册一个域名。</p>
<p>注册域名的厂商可以选择腾讯、阿里、华为等各大服务商。购买并注册域名得流程大家同样可以在各大搜索引擎中找到，这里本人就不赘述了，并假设大家已经注册好了域名。</p>
<h2 id="2-设置-A-记录"><a href="#2-设置-A-记录" class="headerlink" title="2.设置 A 记录"></a>2.设置 A 记录</h2><ol>
<li>注册号域名之后首先添加一个A记录</li>
<li>名称我这里填入 mc</li>
<li>IPv4 地址 （必需）填入自己的VPS的IP地址</li>
</ol>
<p>![屏幕截图 2022-10-28 003549](D:\博客文章图片\如何给Minecraft服务器绑定域名\屏幕截图 2022-10-28 003549.JPG)</p>
<h2 id="3-设置-SRV-记录"><a href="#3-设置-SRV-记录" class="headerlink" title="3.设置 SRV 记录"></a>3.设置 SRV 记录</h2><p>如果只进行上面的 A 记录解析，进入服务器还是要输入端口号。</p>
<p>如果你更改了端口号，但是又不想让别人知道，亦或是自己也不想每次都输入，这时候就可以用 SRV 记录来实现这个功能。</p>
<p> SRV 中的主机记录和 A 的功能是一样的，即如果大家想用哪个域名登录服务器就设为哪个的值。</p>
<p>但是有一点区别，就是必须加上 _minecraft._tcp. 前缀，不然无法进入 MC 服务器。 SRV 的「值」的填法和 A 记录的不同，SRV 中需要顺序填优先级 - 权重 - 端口号 - 目标地址。这里一般优先级填 5；权重写 0；端口号就是你的 MC 服务器的端口号，如果没改就是 25565，改了就填你自己改的那个数值；目标地址就填上一步那个 A 记录的域名即可。填好后的结果如下图所示：</p>
<p>![屏幕截图 2022-10-28 003946](D:\博客文章图片\如何给Minecraft服务器绑定域名\屏幕截图 2022-10-28 003946.JPG)</p>
<p>填好后，稍微等待一会，就可以进入 MC 客户端的多人模式，并在游戏中「服务器地址」那里填写上 mc.minecraft.com（大家需要按照自己的实际情况进行修改），就可以进入服务器愉快的玩耍了。</p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2022/10/18/%E5%A6%82%E4%BD%95%E8%87%AA%E5%B7%B1%E6%90%AD%E5%BB%BAKMS%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%9D%A5%E6%BF%80%E6%B4%BBWindows%E5%92%8Coffice/</url>
    <content><![CDATA[<h1 id="如何自己搭建KMS服务器来激活Windows和office"><a href="#如何自己搭建KMS服务器来激活Windows和office" class="headerlink" title="如何自己搭建KMS服务器来激活Windows和office"></a>如何自己搭建KMS服务器来激活Windows和office</h1>]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2022/11/28/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E7%A7%81%E4%BA%BA%E8%81%8A%E5%A4%A9%E9%A1%B9%E7%9B%AERocket.chat/</url>
    <content><![CDATA[<h1 id="快速搭建一个私人聊天项目Rocket-chat"><a href="#快速搭建一个私人聊天项目Rocket-chat" class="headerlink" title="快速搭建一个私人聊天项目Rocket.chat"></a>快速搭建一个私人聊天项目Rocket.chat</h1><h2 id="1-下载docker-compose-yml"><a href="#1-下载docker-compose-yml" class="headerlink" title="1.下载docker-compose.yml"></a>1.下载docker-compose.yml</h2><pre class="line-numbers language-none"><code class="language-none">curl -L https://raw.githubusercontent.com/RocketChat/Docker.Official.Image/master/compose.yml -O 
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h2 id="2-部署"><a href="#2-部署" class="headerlink" title="2.部署"></a>2.部署</h2><pre class="line-numbers language-none"><code class="language-none">docker compose up -d<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2022/10/10/%E6%89%8B%E5%8A%A8%E6%90%AD%E5%BB%BA%E9%BB%91%E5%95%86%E5%BA%97%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
    <content><![CDATA[<h1 id="手动搭建黑商店服务器"><a href="#手动搭建黑商店服务器" class="headerlink" title="手动搭建黑商店服务器"></a>手动搭建黑商店服务器</h1><p>目前公用的黑商店基本都已经没法使用或者下载困难</p>
<p>主要原因是因为黑商店的下载服务是基于Google云盘<br>而Google云盘对流量滥用有监控，共享的账户很容易被谷歌封禁<br>黑商店的服务器只能频繁创建大量马甲账户，最终疲于奔命不得不选择关闭服务或者选择服务器私用化</p>
<p>本文就是教大家如何使用<a href="https://jits.cc/%E7%9A%84%E7%9B%B8%E5%85%B3%E5%8A%9F%E8%83%BD%EF%BC%8C%E7%BB%91%E5%AE%9A%E7%A7%81%E4%BA%BAGoogle%E4%BA%91%E7%9B%98%EF%BC%8C%E4%BB%A5%E8%BE%BE%E5%88%B0%E6%AD%A3%E5%B8%B8%E4%BD%BF%E7%94%A8%E9%BB%91%E5%95%86%E5%BA%97%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84%E7%9B%AE%E7%9A%84">https://jits.cc/的相关功能，绑定私人Google云盘，以达到正常使用黑商店服务器的目的</a></p>
<p>以下内容参考jits.cc的官方文档编写：有需求的也可以阅读原文<a href="https://games.jits.cc/account#instructions">https://games.jits.cc/account#instructions</a><br>以下全部过程及黑商店下载均需要富强环境，请参考论坛相关帖子自行研究，这里不赘述</p>
<p><strong>第一步：创建账户</strong><br>    前往<a href="https://jits.cc/account">https://jits.cc/account</a><br>    使用Google账号或者Discord账号登陆（登陆一个就行）<br><strong>第二步：链接Google云盘</strong><br>    前往<a href="https://share.jits.cc/dashboard">https://share.jits.cc/dashboard</a><br>    点击左上角的 My Accounts 按钮<br>    点击中间的 Add new account: <strong>Use Defaults</strong> 按钮<br>    还是点击中间的 Add new account: <strong>Get authorization code</strong>. 按钮<br>    此时会跳转到谷歌登陆页面，登陆你希望使用的Google云盘账户（不必和jits.cc的账户一致）<br>    会弹出如下提示：</p>
<p>确保您是从 Google 下载的此应用</p>
<p>​    点击 登陆 按钮</p>
<p>​    此时弹出的页面拒绝访问，不要急，复制浏览器地址</p>
<p>​    例如<a href="http://localhost:12345/?code=4/dasfasflasdjflkajsflksjdflkajdflsdajflk&amp;scope=email%20https://www.googleapis.com/auth/userinfo.email%20openid&amp;authuser=0&amp;prompt=consent%5Dhttps://www.googleapis.com/auth/drive%20https://www.googleapis.com/auth/userinfo.email%20openid&amp;authuser=0&amp;prompt=consent%5B/url%5D">http://localhost:12345/?code=4/dasfasflasdjflkajsflksjdflkajdflsdajflk&amp;scope=email%20https://www.googleapis.com/auth/userinfo.email%20openid&amp;authuser=0&amp;prompt=consent]https://www.googleapis.com/auth/drive%20https://www.googleapis.com/auth/userinfo.email%20openid&amp;authuser=0&amp;prompt=consent[/url]</a></p>
<p>​    将上述code= 和&amp;scope=之间的内容（即涂红色的内容），复制到剪贴板<br>​    回到<a href="https://share.jits.cc/dashboard%E8%BF%99%E4%B8%AA%E9%A1%B5%E9%9D%A2%EF%BC%8C%E5%B0%86%E5%A4%8D%E5%88%B6%E7%9A%84%E5%86%85%E5%AE%B9%E7%B2%98%E8%B4%B4%E5%88%B0%E4%B8%8B%E6%96%B9%E6%89%80%E7%A4%BA%E4%BD%8D%E7%BD%AE%EF%BC%8C%E5%B9%B6%E7%82%B9%E5%87%BB%E2%80%9CAdd">https://share.jits.cc/dashboard这个页面，将复制的内容粘贴到下方所示位置，并点击“Add</a> Account”按钮<br>​            Authorization Code: [<em>将内容粘贴到这个位置</em>] <strong>Add Account</strong><br>​    等待提示添加成功即可<br>​    你也可以在此处添加多个云盘地址<br><strong>第三步：生成连接用Code代码</strong><br>​    前往<a href="https://games.jits.cc/account">https://games.jits.cc/account</a><br>​    点击Sign in with JITS</p>
<p>​    会自动跳转登陆，等待登陆完成即可</p>
<p>​    登陆成功后， 点击中间的 [url=]My Devices[/url]</p>
<p>​    在打开的界面中，点击[url=]Add Device[/url]<br>​    弹出提示窗口，记住提示的Code号码（没记住也没关系，刷新一下页面就看到Unlinked Device (Code: 88888了<br><strong>第四步：连接Switch上的Tinfoil</strong><br>​    打开Switch上的最新版本Tinfoil应用<br>​    在File Browser(档案浏览器)中，使用 <strong>-</strong> 号按钮创建一个新的服务器地址，其中：<br>​          Protocol 选择 https<br>​          host输入 games.jits.site<br>​          Path输入 /tc/你的Code号码 （注意Code号码只会保存15分钟，如失效请重新回到第三步重新生成）<br>​          其他选项都不用填<br>​    确认填写无误后，使用 <strong>X</strong> 储存<br>​    等待刷新完成后，选中刚刚生成的服务器地址，使用 <strong>A</strong> 打开<br>​    会弹出确认提示，先确认，之后会跳转到如下界面</p>
<p><img src="https://tianyedetutu.top/images/2022/10/10/_2022-05-04_124216765.png" alt="_2022-05-04_124216765.png"></p>
<p>选择第二条，Yes，使用 <strong>A</strong> 确认<br>    如显示如下界面，则代表链接成功，否则代表操作有误，请详细检查以上步骤</p>
<p><img src="https://tianyedetutu.top/images/2022/10/10/unknown.png" alt="unknown.png"></p>
<p>使用 <strong>B</strong> 返回，之后重启Tinfoil应用，即可正常加载黑商店内容</p>
<p><strong>其他事项：</strong><br>    下载时，jits.cc会将内容先转存到你设定的Google云盘，之后从改云盘进行下载<br>    下载完成后，云盘内容不会自动清理，需要频繁手动清理<br>    你可以使用多个云盘地址，或者共享云盘（最优解）<br>    使用免费版个人云盘时，由于空间最多就15G，所以大于15G的文件无法转存，也就无法下载</p>
<h2 id="Google云盘搭建黑商店空间不足？无限空间申请教程"><a href="#Google云盘搭建黑商店空间不足？无限空间申请教程" class="headerlink" title="Google云盘搭建黑商店空间不足？无限空间申请教程"></a><strong>Google云盘搭建黑商店空间不足？无限空间申请教程</strong></h2><p>本文基于 <a href="https://www.91tvg.com/thread-298077-1-1.html?_dsign=29ba0bd3">手把手教你搭建私人黑商店服务Nintendo Switch 综合讨论区 - Powered by Discuz! (91tvg.com)</a><br>请先按照教程设置后再阅读本文</p>
<p><img src="https://tianyedetutu.top/images/2022/10/10/_20220616165641.png" alt="_20220616165641.png"></p>
<p><strong>第一步：创建共享云硬盘</strong></p>
<p>需自备tg账号<br>打开链接添加tg机器人<br><a href="https://t.me/MSGuite_SD_Creator_Bot">https://t.me/MSGuite_SD_Creator_Bot</a></p>
<p><img src="https://tianyedetutu.top/images/2022/10/10/_20220616151343.png" alt="_20220616151343.png"></p>
<p>邮箱要填Google账号登陆邮箱<br>让选组织随便选</p>
<p>完成后打开Google Drive你会发现多了一个“共享云端硬盘”</p>
<p><img src="https://tianyedetutu.top/images/2022/10/10/_20220616151638.png" alt="_20220616151638.png"></p>
<p>放在这个盘里的文件是不计入已使用空间的，也就是无限空间</p>
<p><strong>第二步：jits绑定共享云硬盘</strong></p>
<p>在共享云硬盘内创建一个文件用来转存jits内容</p>
<p><img src="https://tianyedetutu.top/images/2022/10/10/_20220616152453.png" alt="_20220616152453.png"></p>
<p><strong>打开你创建的文件夹</strong>，复制网址中/drive/folders/后的内容</p>
<p><img src="https://tianyedetutu.top/images/2022/10/10/_20220616153233.png" alt="_20220616153233.png"></p>
<p>前往 <a href="https://games.jits.cc/account">https://games.jits.cc/account</a><br>点击 <strong>Shop Setting</strong></p>
<p><strong>Selected Account</strong> 选择你的Google Drive账号</p>
<p><strong>Selected Destination Folder</strong> 粘贴刚刚复制的内容</p>
<p>点击下旁边空白的地方</p>
<p>弹出Updated destination folder则设置成功</p>
<p><strong>第三步：定时清理过期文件（非必须）</strong></p>
<p>打开 <a href="https://script.google.com/home">https://script.google.com/home</a></p>
<p>点击 <strong>新建项目</strong></p>
<p><img src="https://tianyedetutu.top/images/2022/10/10/_20220616154851.png" alt="_20220616154851.png"></p>
<p>点击 服务旁边的**+**</p>
<p>选中 <strong>Drive API</strong> 后点击 <strong>添加</strong></p>
<p><img src="https://tianyedetutu.top/images/2022/10/10/_20220616155243.png" alt="_20220616155243.png"></p>
<p>项目名改下<br>代码粘贴上去<br>folderID改成刚刚复制的/drive/folders/之后的内容（不要删掉单引号）</p>
<p><img src="https://tianyedetutu.top/images/2022/10/10/_20220616155837.png" alt="_20220616155837.png"></p>
<pre class="line-numbers language-none"><code class="language-none">const config = {
  // 要处理的目录ID，根目录填root，其他目录填对应的 Folder ID
  folderID: '1-_xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx',
  // 文件保留天数
  fileKeepDays: 7,
  // 删除完成后是否清空回收站
  emptyTrash: true
}

function deleteJitsTempExpiredFiles() {
  var expireDate = new Date()
  expireDate = expireDate.setDate(expireDate.getDate() - config.fileKeepDays)
  expireDate = (new Date(expireDate)).toISOString()
  Logger.log('清理目标文件夹中 ' + expireDate.toLocaleString() + ' 之前的文件')

  var files = DriveApp.searchFiles('modifiedDate &lt; "' + expireDate + '" and parents in "' + config.folderID + '"')
  Logger.log('删除文件中...')
  while (files.hasNext()) {
    var file = files.next()
    Logger.log(file.getName() + ' ----- ' + formatBytes(file.getSize()))
    //文件放入回收站
    file.setTrashed(true)
  }
  if (config.emptyTrash) {
    //清空回收站，需启用高级API
    Drive.Files.emptyTrash()
    Logger.log('回收站已清空')
  }
}

function formatBytes(bytes) {
  if (bytes &lt; 1024) return bytes + ' Bytes'
  else if (bytes &lt; 1048576) return (bytes / 1024).toFixed(3) + ' KB'
  else if (bytes &lt; 1073741824) return (bytes / 1048576).toFixed(3) + ' MB'
  else return (bytes / 1073741824).toFixed(3) + ' GB'
}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>接下来测试一下代码是否能正常运行<br>打开Google Drive上传几个文件到jits文件夹中（注意是上传文件不是文件夹）<br>如图将代码中fileKeepDays的值暂时改为负数<br>点击 <strong>运行</strong></p>
<p><img src="https://tianyedetutu.top/images/2022/10/10/_20220616160648.png" alt="_20220616160648.png"></p>
<p><img src="https://tianyedetutu.top/images/2022/10/10/_20220616160823.png" alt="_20220616160823.png"></p>
<p>检查下Google Drive里刚刚上传的文件是不是正常删除了<br>如果都正常说明代码无误<br>把代码中fileKeepDays值改回7</p>
<p>接下来只要添加一个定时运行就可以了<br>点击 右侧闹钟<strong>触发器</strong></p>
<p><img src="https://tianyedetutu.top/images/2022/10/10/_20220616161048.png" alt="_20220616161048.png"></p>
<p>点击 <strong>添加触发器</strong></p>
<p>按图填写后点击 <strong>保存</strong></p>
<p><img src="https://tianyedetutu.top/images/2022/10/10/_20220616161304.png" alt="_20220616161304.png"></p>
<p>没事来看看脚本运行日志，检查检查是不是正常</p>
<p><strong>完成</strong></p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2022/10/22/%E7%AC%94%E8%AE%B0%E6%9C%AC%E5%AE%89%E8%A3%85%20Ubuntu%2020.04%20LTS%20%E8%AE%BE%E7%BD%AE%E5%90%88%E7%9B%96%E4%B8%8D%E4%BC%91%E7%9C%A0/</url>
    <content><![CDATA[<h1 id="笔记本安装-Ubuntu-20-04-LTS-设置合盖不休眠"><a href="#笔记本安装-Ubuntu-20-04-LTS-设置合盖不休眠" class="headerlink" title="笔记本安装 Ubuntu 20.04 LTS 设置合盖不休眠"></a>笔记本安装 Ubuntu 20.04 LTS 设置合盖不休眠</h1><p>家里有一台闲置的老笔记本打算用来做服务器，于是给它安装了 Ubuntu Server 20.04 LTS。希望能够合上盖子，让它在角落里默默地发挥余热。本以为 Server 系统没有休眠，没想到和 Ubuntu Desktop 一样合盖后也会进入休眠状态。</p>
<p>解决方法：修改Login Manager配置文件。</p>
<p>打开终端，编辑文档：</p>
<pre class="line-numbers language-none"><code class="language-none">sudo vim /etc/systemd/logind.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>找到其中一行（可以用 / + 关键字查找）：</p>
<pre class="line-numbers language-none"><code class="language-none">#HandleLidSwitch=suspend<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>把前面的 # 删除，将 suspend 更改为 ignore :</p>
<pre class="line-numbers language-none"><code class="language-none">HandleLidSwitch=ignore<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>保存。然后重启服务：</p>
<pre class="line-numbers language-none"><code class="language-none">sudo systemctl restart systemd-logind<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>参考</p>
<p><a href="https://www.pcoic.com/skill/2862.html">https://www.pcoic.com/skill/2862.html</a></p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2022/10/26/%E8%A7%A3%E5%86%B3%20Ubuntu%20%E6%8C%82%E8%BD%BDNTFS%E7%A1%AC%E7%9B%98%E6%97%B6%E7%9A%84%E6%9D%83%E9%99%90%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h1 id="解决-Ubuntu-挂载NTFS硬盘时的权限问题"><a href="#解决-Ubuntu-挂载NTFS硬盘时的权限问题" class="headerlink" title="解决 Ubuntu 挂载NTFS硬盘时的权限问题"></a>解决 Ubuntu 挂载NTFS硬盘时的权限问题</h1><p>我在装的是Ubuntu 22.04和Windows11的双系统，当插入硬盘后对硬盘文件属性修改时均无效（chmod相关操作我都试个遍），查询后得知原因如下：因为 NTFS 分区格式不支持类 Unix 的权限，Ubuntu挂载NTFS分区的默认目录是/media ，如果把该分区手动挂载到别的目录，那么这个目录权限就会变化，改都改不了，在 mount 时可以设置。</p>
<p>​    不过呢还是有办法解决该问题的，如果要挂载的这块硬盘想要系统启动过程中被自动挂载那就用方法1，如果这块ntfs硬盘只是临时使用被插入时才使用可以使用方法2手动挂载的方式。</p>
<h1 id="方法一："><a href="#方法一：" class="headerlink" title="方法一："></a>方法一：</h1><p>ubuntu开机自动挂载ntfs硬盘（转自<a href="https://blog.csdn.net/wangliang888888/article/details/104690170%EF%BC%89">https://blog.csdn.net/wangliang888888/article/details/104690170）</a></p>
<h2 id="1-：查看自己的磁盘分析信息"><a href="#1-：查看自己的磁盘分析信息" class="headerlink" title="1 ：查看自己的磁盘分析信息"></a>1 ：查看自己的磁盘分析信息</h2><p>UUID   UGD  GID  信息</p>
<p>获取磁盘UUID 如下</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ls</span> <span class="token parameter variable">-l</span> /dev/disk/by-uuid

lrwxrwxrwx <span class="token number">1</span> root root <span class="token number">10</span> <span class="token number">1</span>月 <span class="token number">12</span> <span class="token number">21</span>:45 0001AC6D000973C1 -<span class="token operator">&gt;</span> <span class="token punctuation">..</span>/<span class="token punctuation">..</span>/sda5
lrwxrwxrwx <span class="token number">1</span> root root <span class="token number">10</span> <span class="token number">1</span>月 <span class="token number">12</span> <span class="token number">21</span>:45 0003A300000D437F -<span class="token operator">&gt;</span> <span class="token punctuation">..</span>/<span class="token punctuation">..</span>/sda6
lrwxrwxrwx <span class="token number">1</span> root root <span class="token number">10</span> <span class="token number">1</span>月 <span class="token number">12</span> <span class="token number">21</span>:45 000ACA5D000CE1C1 -<span class="token operator">&gt;</span> <span class="token punctuation">..</span>/<span class="token punctuation">..</span>/sda8
lrwxrwxrwx <span class="token number">1</span> root root <span class="token number">10</span> <span class="token number">1</span>月 <span class="token number">12</span> <span class="token number">21</span>:45 000E08DD00019CAA -<span class="token operator">&gt;</span> <span class="token punctuation">..</span>/<span class="token punctuation">..</span>/sda7
lrwxrwxrwx <span class="token number">1</span> root root <span class="token number">11</span> <span class="token number">1</span>月 <span class="token number">12</span> <span class="token number">21</span>:45 158c8fbb-a3d4-4cb9-a7a5-1ecf13586280 -<span class="token operator">&gt;</span> <span class="token punctuation">..</span>/<span class="token punctuation">..</span>/sda10
lrwxrwxrwx <span class="token number">1</span> root root <span class="token number">10</span> <span class="token number">1</span>月 <span class="token number">12</span> <span class="token number">21</span>:45 18354ee2-3c44-405a-af87-7c2316c45983 -<span class="token operator">&gt;</span> <span class="token punctuation">..</span>/<span class="token punctuation">..</span>/sda1
lrwxrwxrwx <span class="token number">1</span> root root <span class="token number">10</span> <span class="token number">1</span>月 <span class="token number">12</span> <span class="token number">21</span>:45 f233ebb4-8c6e-48ca-832c-08ceb567f928 -<span class="token operator">&gt;</span> <span class="token punctuation">..</span>/<span class="token punctuation">..</span>/sda9
lrwxrwxrwx <span class="token number">1</span> root root <span class="token number">10</span> <span class="token number">1</span>月 <span class="token number">12</span> <span class="token number">21</span>:45 FE14E80014E7BA33 -<span class="token operator">&gt;</span> <span class="token punctuation">..</span>/<span class="token punctuation">..</span>/sda3
lrwxrwxrwx <span class="token number">1</span> root root <span class="token number">10</span> <span class="token number">1</span>月 <span class="token number">12</span> <span class="token number">21</span>:45 FE3438FC3438BA0B -<span class="token operator">&gt;</span> <span class="token punctuation">..</span>/<span class="token punctuation">..</span>/sda2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>查看自己的 磁盘是在sda? 可以通过 sudo fdisk -l 查询 我推荐一个图形化的工具 </p>
<p>GParted 工具</p>
<h2 id="2：查看GID-（组ID-）-和UID-（用户ID-）"><a href="#2：查看GID-（组ID-）-和UID-（用户ID-）" class="headerlink" title="2：查看GID （组ID ） 和UID （用户ID ）"></a>2：查看GID （组ID ） 和UID （用户ID ）</h2><p>可以查看</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> /etc/passwd<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>



<h2 id="3：修改-x2F-etc-x2F-fstab-文件-让系统启动的时候-自动挂载"><a href="#3：修改-x2F-etc-x2F-fstab-文件-让系统启动的时候-自动挂载" class="headerlink" title="3：修改 /etc/fstab 文件 (让系统启动的时候 自动挂载 )"></a>3：修改 /etc/fstab 文件 (让系统启动的时候 自动挂载 )</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">vim</span> /etc/fstab<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>其中 umask 是权限的 屏蔽 用 777-000 就是你的权限</p>
<p>其中 uid 和 gia 就是 你上面查询的用户 ID 组ID</p>
<pre class="line-numbers language-none"><code class="language-none">\# windows ntfs software D
UUID=0001AC6D000973C1 /media/MyPassport     ntfs  defaults,nls=utf8,umask=000,uid=1000,gid=1000    0   0
\# windows ntfs student E
UUID=0003A300000D437F /media/Student     ntfs  defaults,nls=utf8,umask=000,uid=1000,gid=1000    0   0
\# windows ntfs Media F
UUID=000E08DD00019CAA /media/Medai      ntfs  defaults,nls=utf8,umask=000,uid=1000,gid=1000    0   0
\# windows ntfs Else G
UUID=000ACA5D000CE1C1 /media/Else      ntfs  defaults,nls=utf8,umask=000,uid=1000,gid=1000    0   0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>比如我修改成了</p>
<pre class="line-numbers language-none"><code class="language-none">UUID=5ace08dd-1a42-4113-ad6c-068a1ca4b645 none            swap    sw              0       0
/dev/disk/by-uuid/6C52EB1452EAE236 /home/wenjian ntfs defaults,nls=utf8,umask=000,uid=1000,gid=1000 0 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h2 id="4：保存重启即可"><a href="#4：保存重启即可" class="headerlink" title="4：保存重启即可"></a>4：保存重启即可</h2><p>方法二：手动挂载方式</p>
<p>由方法一可已经得到ntfs的设备号、uuid、uid、gid。如果硬盘插上时被系统自动挂载，那么先解除绑定关系：</p>
<p>sudo umount /dev/sdc1</p>
<p>然后再手动绑定：</p>
<p>sudo mount -t ntfs -o uid=1000,gid=1000,umask=0000 /dev/sdc1 /media/MyPassport</p>
<p> umask 用户权限的掩码值，实际用户权限：是777减去umask的值，因此权限最后编程了都是777。</p>
<p>dmask 目录权限的掩码值，实际目录权限：是777减去dmask的值<br>fmask 文件权限的掩码值，实际文件权限：是777减去fmask的值</p>
<p>如果对ntfs中目录和文件属性作区分的话，可以用下面命令绑定：</p>
<p>sudo mount -t ntfs -o uid=1000,gid=1000,dmask=0111,fmask=0000 /dev/sdc1 /media/MyPassport</p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2022/11/27/%E9%80%9A%E8%BF%87Docker%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E9%9D%9E%E5%B8%B8%E5%A5%BD%E7%94%A8%E7%9A%84%E7%BD%91%E7%9B%98Cloudreve/</url>
    <content><![CDATA[<h1 id="通过Docker搭建一个非常好用的网盘Cloudreve"><a href="#通过Docker搭建一个非常好用的网盘Cloudreve" class="headerlink" title="通过Docker搭建一个非常好用的网盘Cloudreve"></a>通过Docker搭建一个非常好用的网盘Cloudreve</h1><h2 id="1-Cloudreve-是什么？（官方介绍）"><a href="#1-Cloudreve-是什么？（官方介绍）" class="headerlink" title="1.Cloudreve 是什么？（官方介绍）"></a>1.Cloudreve 是什么？<a href="https://docs.cloudreve.org/">（官方介绍）</a></h2><p>Cloudreve 可以让您快速搭建起公私兼备的网盘系统。Cloudreve 在底层支持不同的云存储平台，用户在实际使用时无须关心物理存储方式。你可以使用 Cloudreve 搭建个人用网盘、文件分享系统，亦或是针对大小团体的公有云系统。</p>
<h2 id="✨-特性"><a href="#✨-特性" class="headerlink" title="✨ 特性"></a>✨ 特性</h2><ul>
<li>☁️ 支持本机、从机、七牛、阿里云 OSS、腾讯云 COS、又拍云、OneDrive (包括世纪互联版) 作为存储端</li>
<li>📤 上传/下载 支持客户端直传，支持下载限速</li>
<li>💾 可对接 Aria2 离线下载，可使用多个从机节点分担下载任务</li>
<li>📚 在线 压缩/解压缩、多文件打包下载</li>
<li>💻 覆盖全部存储策略的 WebDAV 协议支持</li>
<li>⚡ 拖拽上传、目录上传、流式上传处理</li>
<li>🗃️ 文件拖拽管理</li>
<li>👩‍👧‍👦 多用户、用户组</li>
<li>🔗 创建文件、目录的分享链接，可设定自动过期</li>
<li>👁️‍🗨️ 视频、图像、音频、文本、Office 文档在线预览</li>
<li>🎨 自定义配色、黑暗模式、PWA 应用、全站单页应用</li>
<li>🚀 All-In-One 打包，开箱即用</li>
<li>🌈 … …</li>
</ul>
<p><strong>Github地址:</strong> <a href="https://github.com/cloudreve/Cloudreve">https://github.com/cloudreve/Cloudreve</a></p>
<h2 id="2-前提条件"><a href="#2-前提条件" class="headerlink" title="2.前提条件"></a>2.前提条件</h2><ol>
<li><p>一台Linux服务器  我痛的</p>
</li>
<li><p>安装好docker和docker-compose</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#1.安装Docker</span>
<span class="token function">wget</span> -qO- get.docker.com <span class="token operator">|</span> <span class="token function">bash</span>

<span class="token comment">#2.开机自动启动</span>
systemctl <span class="token builtin class-name">enable</span> <span class="token function">docker</span>

<span class="token comment">#3.安装Docker-compose</span>
<span class="token function">sudo</span> <span class="token function">curl</span> <span class="token parameter variable">-L</span> <span class="token string">"https://github.com/docker/compose/releases/download/1.29.2/docker-compose-<span class="token variable"><span class="token variable">$(</span><span class="token function">uname</span> <span class="token parameter variable">-s</span><span class="token variable">)</span></span>-<span class="token variable"><span class="token variable">$(</span><span class="token function">uname</span> <span class="token parameter variable">-m</span><span class="token variable">)</span></span>"</span> <span class="token parameter variable">-o</span> /usr/local/bin/docker-compose

<span class="token comment">#4.赋予执行权限</span>
<span class="token function">sudo</span> <span class="token function">chmod</span> +x /usr/local/bin/docker-compose

<span class="token comment">#5.安装Portainer（可以不安装）</span>
<span class="token function">sudo</span> <span class="token function">docker</span> volume create portainer_data

<span class="token comment">#6.下载并安装 Portainer Server 容器 (可选)</span>
<span class="token function">sudo</span> <span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">-p</span> <span class="token number">8000</span>:8000 <span class="token parameter variable">-p</span> <span class="token number">9443</span>:9443 <span class="token parameter variable">--name</span> portainer <span class="token punctuation">\</span>
   <span class="token parameter variable">--restart</span><span class="token operator">=</span>always <span class="token punctuation">\</span>
   <span class="token parameter variable">-v</span> /var/run/docker.sock:/var/run/docker.sock <span class="token punctuation">\</span>
   <span class="token parameter variable">-v</span> portainer_data:/data <span class="token punctuation">\</span>
   portainer/portainer-ce:latest
 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ol>
<h2 id="3-正式搭建"><a href="#3-正式搭建" class="headerlink" title="3.正式搭建"></a>3.正式搭建</h2><h3 id="3-1-创建安装目录"><a href="#3-1-创建安装目录" class="headerlink" title="3.1.创建安装目录"></a>3.1.创建安装目录</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /root/cloudreve

<span class="token builtin class-name">cd</span> /root/cloudreve

<span class="token function">mkdir</span> <span class="token punctuation">{</span>cloudreve,data<span class="token punctuation">}</span>

<span class="token builtin class-name">cd</span> cloudreve

<span class="token function">mkdir</span> <span class="token punctuation">{</span>avatar,uploads<span class="token punctuation">}</span>

<span class="token function">touch</span> <span class="token punctuation">{</span>conf.ini,cloudreve.db<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h3 id="3-2-编辑docker-compose-yml文件"><a href="#3-2-编辑docker-compose-yml文件" class="headerlink" title="3.2.编辑docker-compose.yml文件"></a>3.2.编辑docker-compose.yml文件</h3><p>如果你有安装Portainer其实可以直接在上面创建一个堆栈来直接输入下面的内容，当然你也可以直接编辑。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /root/cloudreve

<span class="token function">vim</span> docker-compose.yml<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>填入内容</p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">"3.8"</span>
<span class="token key atrule">services</span><span class="token punctuation">:</span>
  <span class="token key atrule">cloudreve</span><span class="token punctuation">:</span>
    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> cloudreve
    <span class="token key atrule">image</span><span class="token punctuation">:</span> cloudreve/cloudreve<span class="token punctuation">:</span>latest
    <span class="token key atrule">restart</span><span class="token punctuation">:</span> unless<span class="token punctuation">-</span>stopped
    <span class="token key atrule">ports</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token string">"5212:5212"</span>            <span class="token comment"># 左边可以更换自己喜欢的端口</span>
    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> temp_data<span class="token punctuation">:</span>/data
      <span class="token punctuation">-</span> ./cloudreve/uploads<span class="token punctuation">:</span>/cloudreve/uploads        <span class="token comment"># 冒号左边为自己需要映射出来的本地路径</span>
      <span class="token punctuation">-</span> ./cloudreve/conf.ini<span class="token punctuation">:</span>/cloudreve/conf.ini     
      <span class="token punctuation">-</span> ./cloudreve/cloudreve.db<span class="token punctuation">:</span>/cloudreve/cloudreve.db  
      <span class="token punctuation">-</span> ./cloudreve/avatar<span class="token punctuation">:</span>/cloudreve/avatar
    <span class="token key atrule">depends_on</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> aria2
  <span class="token key atrule">aria2</span><span class="token punctuation">:</span>
    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> aria2
    <span class="token key atrule">image</span><span class="token punctuation">:</span> ddsderek/aria2<span class="token punctuation">-</span>pro
    <span class="token key atrule">restart</span><span class="token punctuation">:</span> unless<span class="token punctuation">-</span>stopped
    <span class="token key atrule">environment</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> RPC_SECRET=qwe123456789  <span class="token comment"># 修改一个自己的密钥</span>
      <span class="token punctuation">-</span> RPC_PORT=6800
      <span class="token punctuation">-</span> DOWNLOAD_DIR=/data
      <span class="token punctuation">-</span> PUID=0
      <span class="token punctuation">-</span> PGID=0
      <span class="token punctuation">-</span> UMASK_SET=022
      <span class="token punctuation">-</span> TZ=Asia/Tokyo
    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> ./aria2/config<span class="token punctuation">:</span>/config    <span class="token comment"># 冒号左边为自己需要映射出来的本地路径</span>
      <span class="token punctuation">-</span> temp_data<span class="token punctuation">:</span>/data
<span class="token key atrule">volumes</span><span class="token punctuation">:</span>
  <span class="token key atrule">temp_data</span><span class="token punctuation">:</span>
    <span class="token key atrule">driver</span><span class="token punctuation">:</span> local
    <span class="token key atrule">driver_opts</span><span class="token punctuation">:</span>
      <span class="token key atrule">type</span><span class="token punctuation">:</span> none
      <span class="token key atrule">device</span><span class="token punctuation">:</span> $PWD/data
      <span class="token key atrule">o</span><span class="token punctuation">:</span> bind<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>保存退出！</p>
<h3 id="3-3-部署"><a href="#3-3-部署" class="headerlink" title="3.3.部署"></a>3.3.部署</h3><p>输入</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker-compose</span> up <span class="token parameter variable">-d</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>部署完成后输入</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker-compose</span> logs<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>然后你可以看到账号和密码</p>
<h3 id="3-4-配置"><a href="#3-4-配置" class="headerlink" title="3.4.配置"></a>3.4.配置</h3><p>如果你开了防火墙，需要开放防火墙</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> ufw allow <span class="token number">5212</span> comment <span class="token string">'cloudreve'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>



<h2 id="4-后期设置"><a href="#4-后期设置" class="headerlink" title="4.后期设置"></a>4.后期设置</h2><p>搭建完之后可以通过IP+端口号进行访问</p>
<h3 id="4-1-配置aria2"><a href="#4-1-配置aria2" class="headerlink" title="4.1. 配置aria2"></a>4.1. 配置aria2</h3><p><img src="https://tianyedetutu.top/images/2022/11/27/image-20221127041730333.png" alt="image-20221127041730333"></p>
<p><strong>③的地址就是aria2容器内部的IP地址</strong></p>
<p>可以通过protainer来查看，也可以直接输入</p>
<pre class="line-numbers language-none"><code class="language-none">http://aria2:6800/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>测试一下，配置完成。</p>
<h3 id="4-2-后期更新"><a href="#4-2-后期更新" class="headerlink" title="4.2. 后期更新"></a>4.2. 后期更新</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /root/cloudreve

<span class="token function">docker-compose</span> down 

<span class="token function">docker-compose</span> pull

<span class="token function">docker-compose</span> up <span class="token parameter variable">-d</span> 

<span class="token function">docker</span> image prune  <span class="token comment"># prune 命令用来删除不再使用的 docker 对象。删除所有未被 tag 标记和未被容器使用的镜像</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://docs.cloudreve.org/">https://docs.cloudreve.org/</a></p>
<p><a href="https://github.com/cloudreve/Cloudreve">https://github.com/cloudreve/Cloudreve</a></p>
<p><a href="https://blog.laoda.de/archives/docker-compose-install-lighthouse-cloudreve">https://blog.laoda.de/archives/docker-compose-install-lighthouse-cloudreve</a></p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2022/11/02/%E7%BB%99%20Ubuntu%20%E6%8C%82%E8%BD%BD%E6%96%B0%E7%A1%AC%E7%9B%98/</url>
    <content><![CDATA[<h1 id="给-Ubuntu-挂载新硬盘"><a href="#给-Ubuntu-挂载新硬盘" class="headerlink" title="给 Ubuntu 挂载新硬盘"></a>给 Ubuntu 挂载新硬盘</h1><p>在服务器上买了个附加存储，这就来给他挂载到服务器上。</p>
<h2 id="1-查看当前硬盘"><a href="#1-查看当前硬盘" class="headerlink" title="1.查看当前硬盘"></a>1.查看当前硬盘</h2><p>添加虚拟硬盘后，我们启动虚拟机，进入系统后，我们可以通过 <code>fdisk</code> 命令检查当前的硬盘状态。</p>
<pre class="line-numbers language-text" data-language="text"><code class="language-text">sudo fdisk -l<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>执行以上命令后，我们可以看到以下输出：</p>
<p>![1](D:\博客文章图片\给 Ubuntu 挂载新硬盘\1.JPG)</p>
<p>这里我们可以看到，我们原来的硬盘标为 /dev/vda1 。下面还能看到一个名为 /dev/sda ，容量为 256G 的硬盘，这个就是我的附加存储。</p>
<h2 id="2-为新硬盘分区"><a href="#2-为新硬盘分区" class="headerlink" title="2.为新硬盘分区"></a>2.为新硬盘分区</h2><p>使用 <code>fdisk</code> 对 /dev/sda 进行分区操作，为了简化操作，我们会将这个新硬盘全部分为一个分区，具体操作如下：</p>
<pre class="line-numbers language-text" data-language="text"><code class="language-text">sudo fdisk /dev/sda<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>进入分区工具后，可以看到如下界面</p>
<p>![2](D:\博客文章图片\给 Ubuntu 挂载新硬盘\2.JPG)</p>
<p>我们接下来要创建新分区，所以我们将会输入 <code>n</code></p>
<pre class="line-numbers language-none"><code class="language-none">Command (m for help): n
Partition type
   p   primary (0 primary, 0 extended, 4 free)
   e   extended (container for logical partitions)
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-none"><code class="language-none">Select (default p): p
Partition number (1-4, default 1): 1
First sector (2048-536870911, default 2048): 2048
Last sector, +/-sectors or +/-size{K,M,G,T,P} (2048-536870911, default 536870911): 536870911

Created a new partition 1 of type 'Linux' and of size 256 GiB.
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>这里，我们可以给一块硬盘创建最多4个主分区，和若干逻辑分区，由于我们这里只为该硬盘创建一个分区，那么我们即创建一个主分区即可。</p>
<p>我们创建分区的操作为：<br>- p 命令创建一个主分区<br>- 选择默认创建第一个分区<br>- 设置分区的开始位置<br>- 设置分区的结束位置，因为只设置一个分区，因此都选择默认选项<br>- w 命令保存分区设置</p>
<h2 id="3-格式化分区"><a href="#3-格式化分区" class="headerlink" title="3.格式化分区"></a>3.格式化分区</h2><p>我们可以使用 <code>mkfs</code> 命令格式化分区，具体命令如下：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">mkfs</span> <span class="token parameter variable">-t</span> ext4 /dev/sdb1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>输入命令后，可以看到分区格式化成功：</p>
<p>![3](D:\博客文章图片\给 Ubuntu 挂载新硬盘\3.JPG)</p>
<h2 id="4-挂载分区"><a href="#4-挂载分区" class="headerlink" title="4.挂载分区"></a>4.挂载分区</h2><p>分区我们需要先创建一个目录，然后再把这个新分区挂载到目录上。具体操作如下：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 我们在 ~ 目录下创建一个 wenjian 的目录，并将新分区挂载到这里</span>
<span class="token function">mkdir</span> ~/wenjian
<span class="token function">sudo</span> <span class="token function">mount</span> /dev/sda ~/wenjian<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>挂载后，我们再通过 <code>df -h</code> 命令查看是否挂载成功：</p>
<p>![4](D:\博客文章图片\给 Ubuntu 挂载新硬盘\4.JPG)</p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2022/10/24/%E9%80%9A%E8%BF%87Protainer(docker-compose)%E6%9D%A5%E6%90%AD%E5%BB%BAnginx%20proxy%20manager%E6%9D%A5%E7%AE%A1%E7%90%86%20Nginx%20%E4%BB%A3%E7%90%86/</url>
    <content><![CDATA[<h1 id="通过Protainer-docker-compose-来搭建nginx-proxy-manager来管理-Nginx-代理"><a href="#通过Protainer-docker-compose-来搭建nginx-proxy-manager来管理-Nginx-代理" class="headerlink" title="通过Protainer(docker-compose)来搭建nginx proxy manager来管理 Nginx 代理"></a>通过Protainer(docker-compose)来搭建nginx proxy manager来管理 Nginx 代理</h1><h2 id="1-Nginx-Proxy-Manager是什么？"><a href="#1-Nginx-Proxy-Manager是什么？" class="headerlink" title="1.Nginx Proxy Manager是什么？"></a>1.Nginx Proxy Manager是什么？</h2><p>nginx proxy manager能让我们轻松地转发到在家里或其他地方运行的网站，包括免费的SSL，而不需要对Nginx或Letsencrypt了解太多。便捷直观的web页面管理和操作无疑大大简化了一般nginx反代服务的步骤。</p>
<h2 id="2-搭建之前的前提条件"><a href="#2-搭建之前的前提条件" class="headerlink" title="2.搭建之前的前提条件"></a>2.搭建之前的前提条件</h2><ul>
<li><input checked="" disabled="" type="checkbox"> 一台服务器</li>
<li><input checked="" disabled="" type="checkbox"> 安装Docker</li>
<li><input checked="" disabled="" type="checkbox"> 配置好Protainer</li>
</ul>
<p>这里有之前写过的配置教程</p>
<p><a href="https://tutujanjan.com/?p=2053">https://tutujanjan.com/?p=2053</a></p>
<h2 id="3-配置yml"><a href="#3-配置yml" class="headerlink" title="3.配置yml"></a>3.配置yml</h2><p>进入Protainer</p>
<p>依次点击Stacks —Add stack</p>
<p>Name填一个qbittorrent</p>
<p>填入如下代码。</p>
<pre class="line-numbers language-none"><code class="language-none">version: "3"

services:

  app:

    image: 'jc21/nginx-proxy-manager:latest'

    restart: unless-stopped

    ports:

      # These ports are in format &lt;host-port&gt;:&lt;container-port&gt;

      - '82:82' # Public HTTP Port

      - '443:443' # Public HTTPS Port

      - '81:81' # Admin Web Port

      # Add any other Stream port you want to expose

      # - '21:21' # FTP

    environment:

      DB_MYSQL_HOST: "db"

      DB_MYSQL_PORT: 3306

      DB_MYSQL_USER: "npm"

      DB_MYSQL_PASSWORD: "npm"

      DB_MYSQL_NAME: "npm"

      # Uncomment this if IPv6 is not enabled on your host

      # DISABLE_IPV6: 'true'

    volumes:

      - ./data:/data

      - ./letsencrypt:/etc/letsencrypt

    depends_on:

      - db



  db:

    image: 'jc21/mariadb-aria:latest'

    restart: unless-stopped

    environment:

      MYSQL_ROOT_PASSWORD: 'npm'

      MYSQL_DATABASE: 'npm'

      MYSQL_USER: 'npm'

      MYSQL_PASSWORD: 'npm'

    volumes:

      - ./data/mysql:/var/lib/mysql

<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>最后点击Deploy the stack 部署</p>
<h2 id="4-登陆测试更改密码"><a href="#4-登陆测试更改密码" class="headerlink" title="4.登陆测试更改密码"></a>4.登陆测试更改密码</h2><p>部署好之后。我们通过`浏览器服务器</p>
<p>IP:81 访问</p>
<p><img src="D:\博客文章图片\通过Protainer(docker-compose" alt="屏幕截图 2022-10-24 135229">来搭建nginx proxy manager来管理 Nginx 代理\屏幕截图 2022-10-24 135229.JPG)</p>
<p>成功进入web页面，初次登录使用邮箱：<a href="mailto:admin@example.com">admin@example.com</a>，密码：changeme。</p>
<p>登录进去后会让你设置管理员的用户名（Full Name），昵称（Nickname）和邮箱。</p>
<p>接下来设置密码，旧密码即预设密码changeme。</p>
<p>至此，nginx proxy manager初始化完成。</p>
<p>具体的使用教程可以参考这个文章</p>
<p><a href="https://zhuanlan.zhihu.com/p/452419621?utm_id=0">https://zhuanlan.zhihu.com/p/452419621?utm_id=0</a></p>
]]></content>
  </entry>
</search>
