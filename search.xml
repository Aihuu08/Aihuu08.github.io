<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Docker Portainer如何通过命令来安装项目</title>
    <url>/2022/08/26/Docker-Portainer%E5%A6%82%E4%BD%95%E9%80%9A%E8%BF%87%E5%91%BD%E4%BB%A4%E6%9D%A5%E5%AE%89%E8%A3%85%E9%A1%B9%E7%9B%AE/</url>
    <content><![CDATA[<h1 id="Docker-Portainer如何通过命令来安装navidrome项目"><a href="#Docker-Portainer如何通过命令来安装navidrome项目" class="headerlink" title="Docker Portainer如何通过命令来安装navidrome项目"></a>Docker Portainer如何通过命令来安装navidrome项目</h1><p>1.安装配置好Docker Portainer</p>
<p>这次以安装<strong>navidrome</strong>为例</p>
<p>2.然后输入</p>
<p><a href="https://127.0.0.1:9443/">https://127.0.0.1:9443</a></p>
<p>访问</p>
<p>Portainer界面</p>
<p>3.依次点击</p>
<p>Stacks➡Add stack</p>
<p>Name填一个navidrome</p>
<p>Web editor填写安装命令</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">version: <span class="token string">"3"</span>
services:
  navidrome:
    image: deluan/navidrome:latest
    user: <span class="token number">0</span>:0 <span class="token comment"># 以root用户运行should be owner of root</span>
    ports:
      - <span class="token string">"4533:4533"</span>  <span class="token comment">#自定义设置端口映射</span>
    restart: unless-stopped
    environment:
      <span class="token comment"># Optional: put your config options customization here. Examples:</span>
      ND_SCANSCHEDULE: 1h
      ND_LOGLEVEL: info  
      ND_SESSIONTIMEOUT: 24h
      ND_BASEURL: <span class="token string">""</span>
    volumes:
      - <span class="token string">"/home/tutu/data:/data"</span>   <span class="token comment">#目录影射/path/to/data为主机目录/data为容器目录，主要存放服务产生的数据</span>
      - <span class="token string">"/home/tutu/music:/music:ro"</span>   <span class="token comment">#目录影射/path/to/music此目录主要存放音乐文件 /music:ro为容器内的相应目录</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>在/home/tutu/创建data文件来存放数据</p>
<p>在/home/tutu/music创建music文件来存放自己的音乐</p>
<p>最后只需要点击</p>
<p>Deploy the stack</p>
<p>理论上就能跑起来！</p>
<p><img src="/images/20220826/ubuntu/6.png"></p>
]]></content>
      <categories>
        <category>服务器</category>
        <category>Linux</category>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>教程</tag>
        <tag>Ubuntu</tag>
        <tag>Portainer</tag>
        <tag>navidrome</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo + GitHub 博客从 Windows 迁移到 macOS</title>
    <url>/2022/08/12/Hexo-GitHub-%E5%8D%9A%E5%AE%A2%E4%BB%8E-Windows-%E8%BF%81%E7%A7%BB%E5%88%B0-macOS/</url>
    <content><![CDATA[<h2 id="一、Mac-环境配置"><a href="#一、Mac-环境配置" class="headerlink" title="一、Mac 环境配置"></a>一、Mac 环境配置</h2><ol>
<li><p>在 Mac 安装 git 和 node.js<br>使用 brew 进行安装</p>
<pre class="line-numbers language-none"><code class="language-none">brew install git
brew install node<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
</li>
<li><p>安装 hexo</p>
<pre class="line-numbers language-none"><code class="language-none">npm install hexo g<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
</ol>
<p>这条命令不行（用的时候会出现 hexo: COMMAND NOT FOUND 问题）就执行下面这条：</p>
<pre class="line-numbers language-none"><code class="language-none">npm install hexo-cli -g<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ol start="3">
<li><p>初始化 hexo 目录</p>
<pre class="line-numbers language-none"><code class="language-none">mkdir blog
cd blog<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
</li>
<li><p>新建 hexo 服务</p>
<pre class="line-numbers language-none"><code class="language-none">hexo init
hexo s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li>
</ol>
<p>打开 localhost:4000 查看是否成功。<br>5. 生成 SSH 密钥<br>先查看本地的 SSH Key：</p>
<pre class="line-numbers language-cd" data-language="cd"><div class="caption"><span>~/.ssh</span></div><code class="language-cd">
如果没有，生成一个SSH Key：<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>ssh-keygen -t rsa -C “<a href="mailto:example@example.com">example@example.com</a>“</p>
<p>最后那个是注册邮箱。<br>6. 关联 GitHub<br>进入 .ssh 文件夹：</p>
<pre class="line-numbers language-none"><code class="language-none">cd ~/.ssh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>然后打开里面的 id_rsa.pub 文件，里面的内容就是 SSH key，复制全部内容。<br>网页打开 GitHub 的设置：Settings -&gt; SSH and GPG keys，点击绿色的按钮New SSH key，然后在输入框中输入刚才复制的内容。保存后，GitHub 可能会向你的邮箱发送一个验证链接（如果有记得去邮箱验证，不然之后的 hexo 部署会一直不成功的）。<br>测试一下是否成功：</p>
<pre class="line-numbers language-none"><code class="language-none">ssh git@github.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>看到下面的即成功：</p>
<p><img src="/images/111.png"></p>
<h2 id="二、配置文件转移"><a href="#二、配置文件转移" class="headerlink" title="二、配置文件转移"></a>二、配置文件转移</h2><p>先找到 Windows 下的博客根目录 hexo，复制该目录下的：_config.yml、scaffolds、source、themes、public。<br>再找到 Mac 下的博客根目录 hexo，把刚才复制的内容，直接覆盖替换相同的文件以及文件夹。</p>
<h2 id="三、设置个人信息"><a href="#三、设置个人信息" class="headerlink" title="三、设置个人信息"></a>三、设置个人信息</h2><pre class="line-numbers language-none"><code class="language-none">git config --global user.name "yourname”git config --global user.email youremail@example.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h2 id="四、发布文章"><a href="#四、发布文章" class="headerlink" title="四、发布文章"></a>四、发布文章</h2><p>运行以下命令，查看是否可以成功发布博客：</p>
<pre class="line-numbers language-none"><code class="language-none">hexo d -g<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>发现报错：</p>
<pre class="line-numbers language-none"><code class="language-none">ERROR Deployer not found: git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>只需要安装：</p>
<pre class="line-numbers language-none"><code class="language-none">npm install hexo-deployer-git --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h2 id="五、参考"><a href="#五、参考" class="headerlink" title="五、参考"></a>五、参考</h2><p>作者：Wonz<br>链接：<a href="https://juejin.cn/post/7016661862448103460">https://juejin.cn/post/7016661862448103460</a></p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Blog</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo + GitHub Pagesでブログを作成する方法</title>
    <url>/2022/05/26/Hexo%20+%20GitHub%20Pages%E3%81%A7%E3%83%96%E3%83%AD%E3%82%B0%E3%82%92%E4%BD%9C%E6%88%90%E3%81%99%E3%82%8B%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p>本記事では、Hexo + GitHub Pagesの組み合わせでブログ環境を構築する方法について説明します。<br>上から順番に読んでいただくと、ブログを作成できるような流れになっています。</p>
<p>本記事の内容です。</p>
<ol>
<li>前提条件</li>
<li>インストール</li>
<li>ブログを作成</li>
<li>記事を作成</li>
<li>テーマを適用</li>
<li>ローカルでサーバ起動</li>
<li>GitHub Pagesへデプロイ</li>
<li>ゴール</li>
<li>GitHub上でブログ用のリポジトリを作成</li>
<li>_config.ymlを編集</li>
<li>GitHub Pagesの設定</li>
<li>デプロイ</li>
<li>参考にしたページ</li>
</ol>
<h2 id="前提条件"><a href="#前提条件" class="headerlink" title="前提条件"></a>前提条件</h2><ul>
<li>GitHubアカウント作成済み</li>
<li>Node.jsインストール済み</li>
<li>Gitインストール済み</li>
</ul>
<h2 id="インストール"><a href="#インストール" class="headerlink" title="インストール"></a>インストール</h2><p>下記コマンドを実行します。コマンドを実行するディレクトリはどこでも良いです。</p>
<pre class="line-numbers language-none"><code class="language-none">npm install -g hexo-cli<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h2 id="ブログを作成"><a href="#ブログを作成" class="headerlink" title="ブログを作成"></a>ブログを作成</h2><p>ブログを作成したいディレクトリで下記コマンドを実行します。<br>[Webサイト名]には、好きな名前を入力してください。</p>
<pre class="line-numbers language-none"><code class="language-none">hexo init [Webサイト名]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>その後、作成したWebサイトのディレクトリへ移動し、下記コマンドを実行します。</p>
<pre class="line-numbers language-none"><code class="language-none">npm install<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h2 id="記事を作成"><a href="#記事を作成" class="headerlink" title="記事を作成"></a>記事を作成</h2><p>記事を作成するには、作成したWebサイトディレクトリのルートで下記コマンドを実行します。 [記事名]は、好きな記事名を入力してください。<br>また、この時に拡張子は指定しないように注意です。</p>
<pre class="line-numbers language-none"><code class="language-none">hexo new [記事名]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>すると、source/_posts下に記事のMarkdownファイルが作成されますので、後は自由に編集します。</p>
<h2 id="テーマを適用"><a href="#テーマを適用" class="headerlink" title="テーマを適用"></a>テーマを適用</h2><p>本記事内では、hexo-theme-materyを適用します。<br>最初に作成したWebサイトディレクトリのルートで下記のコマンドを実行し、GitHubからthemesディレクトリへテーマをダウンロードします。</p>
<pre class="line-numbers language-none"><code class="language-none">git clone https://github.com/ppoffice/hexo-theme-icarus themes/hexo-theme-matery<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>テーマのダウンロード後、_config.ymlの</p>
<pre class="line-numbers language-none"><code class="language-none">theme: landscape<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>の右側をダウンロードしたテーマ名に変更します。<br>今回はhexo-theme-icarusを適用するので、下記の通り変更します。</p>
<pre class="line-numbers language-none"><code class="language-none">theme: hexo-theme-icarus<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>テーマの一覧を確認できるページや個人的におススメしたいテーマについては、本記事最後に記述します。</p>
<p>config.ymlの設定が終わったら上書き保存し、後述する方法でサーバを起動します。<br>初回時はテーマのディレクトリ内でconfig.ymlが作成されるだけでサーバが起動しない事があるので、その場合は再度サーバを起動してください。</p>
<h2 id="ローカルでサーバ起動"><a href="#ローカルでサーバ起動" class="headerlink" title="ローカルでサーバ起動"></a>ローカルでサーバ起動</h2><p>作成したWebサイトディレクトリのルートで下記コマンドを実行します。</p>
<pre class="line-numbers language-none"><code class="language-none">hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>また、下記のように「-p [ポート番号]」とオプションを付けると、そのポート番号で起動することが可能です。</p>
<pre class="line-numbers language-none"><code class="language-none">hexo server -p 12345<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>ローカルで公開されているページへアクセスするには、上記コマンド実行時に表示される下記urlへアクセスしましょう。</p>
<pre class="line-numbers language-none"><code class="language-none">INFO  Hexo is running at http://localhost:4000 . Press Ctrl+C to stop.<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h2 id="GitHub-Pagesへデプロイ"><a href="#GitHub-Pagesへデプロイ" class="headerlink" title="GitHub Pagesへデプロイ"></a>GitHub Pagesへデプロイ</h2><h2 id="ゴール"><a href="#ゴール" class="headerlink" title="ゴール"></a>ゴール</h2><p>今回は、GitHub Pagesのサブディレクトリで公開する。<br>例:下記URLにてブログを公開。<br><a href="https://github.com/Aihuu08/Aihuu08.github.io">https://github.com/Aihuu08/Aihuu08.github.io</a></p>
<h2 id="GitHub上でブログ用のリポジトリを作成"><a href="#GitHub上でブログ用のリポジトリを作成" class="headerlink" title="GitHub上でブログ用のリポジトリを作成"></a>GitHub上でブログ用のリポジトリを作成</h2><p>静的ファイルを公開するためのリポジトリを作成します。<br>今回は「test-hexo-blog」という名前のリポジトリを作成します。</p>
<h2 id="config-ymlを編集"><a href="#config-ymlを編集" class="headerlink" title="config.ymlを編集"></a>config.ymlを編集</h2><p>config.ymlに存在する下記項目を編集します。<br>type、repoおよびbranchは、下記のように<br>typeはgitを、<br>repoは「GitHub上でブログ用のリポジトリを作成」で作成したリポジトリを、<br>branchは使用するbranch (大体の場合はmasterで良いと思います。) を、それぞれ指定してください。</p>
<pre class="line-numbers language-none"><code class="language-none">deploy:
  type: 'git'
  repo: https://github.com/Aihuu08/Aihuu08.github.io.git
  branch: master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="GitHub-Pagesの設定"><a href="#GitHub-Pagesの設定" class="headerlink" title="GitHub Pagesの設定"></a>GitHub Pagesの設定</h2><p>「GitHub上でブログ用のリポジトリを作成」で作成したリポジトリのページを開き、下記の設定を行います。<br>Settings -&gt; GitHub PagesのSourceでmaster branchを選択 (大体の場合はmaster branchだと思います。)<br>実際の画面を確認しながら作業を行いたい方は、下記ページを参考にするとわかりやすいです。<br><a href="https://tech.qookie.jp/posts/hexo-deploy-github-pages-fast/">https://tech.qookie.jp/posts/hexo-deploy-github-pages-fast/</a></p>
<h2 id="デプロイ"><a href="#デプロイ" class="headerlink" title="デプロイ"></a>デプロイ</h2><p>これで最後です。<br>作成したWebサイトディレクトリのルートで下記コマンドを実行し、Hexoで作成したWebページをデプロイします。</p>
<pre class="line-numbers language-none"><code class="language-none">hexo deploy -g<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>オプションに「-g」を付けているのは、デプロイ時に静的ファイルの生成も一緒に行いたいためです。</p>
<p>ここまで作業が終わったら、実際に作成したurlへアクセスし、Hexoで作成したものが表示されるかを確認してみましょう。</p>
<h2 id="参考にしたページ"><a href="#参考にしたページ" class="headerlink" title="参考にしたページ"></a>参考にしたページ</h2><p><a href="https://j-levia.hatenablog.jp/entry/2019/09/05/152908#%E8%A8%98%E4%BA%8B%E3%82%92%E4%BD%9C%E6%88%90">https://j-levia.hatenablog.jp/entry/2019/09/05/152908#%E8%A8%98%E4%BA%8B%E3%82%92%E4%BD%9C%E6%88%90</a></p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Blog</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo博客搭建之在文章中插入图片</title>
    <url>/2022/08/12/Hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E4%B9%8B%E5%9C%A8%E6%96%87%E7%AB%A0%E4%B8%AD%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87/</url>
    <content><![CDATA[<h1 id="Hexo博客搭建之在文章中插入图片"><a href="#Hexo博客搭建之在文章中插入图片" class="headerlink" title="Hexo博客搭建之在文章中插入图片"></a>Hexo博客搭建之在文章中插入图片</h1><p>在写文章时，常常有配图说明的需求。Hexo有多种图片插入方式，可以将图片存放在本地引用或者将图片放在CDN上引用。</p>
<h3 id="本地引用"><a href="#本地引用" class="headerlink" title="本地引用"></a>本地引用</h3><h4 id="绝对路径"><a href="#绝对路径" class="headerlink" title="绝对路径"></a>绝对路径</h4><p>当Hexo项目中只用到少量图片时，可以将图片统一放在<code>source/images</code>文件夹中，通过markdown语法访问它们。</p>
<pre class="line-numbers language-none"><code class="language-none">source/images/image.jpg![](/images/image.jpg)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>图片既可以在首页内容中访问到，也可以在文章正文中访问到。</p>
<h4 id="相对路径"><a href="#相对路径" class="headerlink" title="相对路径"></a>相对路径</h4><p>图片除了可以放在统一的<code>images</code>文件夹中，还可以放在文章自己的目录中。文章的目录可以通过配置<code>_config.yml</code>来生成。</p>
<pre class="line-numbers language-none"><code class="language-none">_config.ymlpost_asset_folder: true<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>将<code>_config.yml</code>文件中的配置项<code>post_asset_folder</code>设为<code>true</code>后，执行命令<code>$ hexo new post_name</code>，在<code>source/_posts</code>中会生成文章<code>post_name.md</code>和同名文件夹<code>post_name</code>。将图片资源放在<code>post_name</code>中，文章就可以使用相对路径引用图片资源了。</p>
<pre class="line-numbers language-none"><code class="language-none">_posts/post_name/image.jpg![](image.jpg)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>上述是markdown的引用方式，图片只能在文章中显示，但无法在首页中正常显示。</p>
<p>如果希望图片在文章和首页中同时显示，可以使用标签插件语法。</p>
<pre class="line-numbers language-none"><code class="language-none">_posts/post_name/image.jpg{% asset_img image.jpg This is an image %}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="CDN引用"><a href="#CDN引用" class="headerlink" title="CDN引用"></a>CDN引用</h3><p>除了在本地存储图片，还可以将图片上传到一些免费的CDN服务中。比如<a href="http://cloudinary.com/">Cloudinary</a>提供的图片CDN服务，在Cloudinary中上传图片后，会生成对应的url地址，将地址直接拿来引用即可。</p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Blog</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx配置SSL证书（Https）给WordPress网站</title>
    <url>/2022/08/28/Nginx%E9%85%8D%E7%BD%AESSL%E8%AF%81%E4%B9%A6%EF%BC%88Https%EF%BC%89%E7%BB%99WordPress%E7%BD%91%E7%AB%99/</url>
    <content><![CDATA[<h1 id="Nginx配置SSL证书（Https）给WordPress网站"><a href="#Nginx配置SSL证书（Https）给WordPress网站" class="headerlink" title="Nginx配置SSL证书（Https）给WordPress网站"></a>Nginx配置SSL证书（Https）给WordPress网站</h1><p>前置条件：</p>
<p>服务器已经安装nginx和WordPress网站并且通过http可以正常访问。</p>
<h2 id="1-去免费申请一个SSl证书"><a href="#1-去免费申请一个SSl证书" class="headerlink" title="1.去免费申请一个SSl证书"></a>1.去免费申请一个SSl证书</h2><p>推荐一个SSL For Free网站:</p>
<p>网站地址：<a href="https://www.sslforfree.com/">https://www.sslforfree.com</a></p>
<p><img src="https://tutujanjan.world/wp-content/uploads/2022/08/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE-2022-08-28-022222-1024x380.png" alt="img"></p>
<p>添加自己需要应用SSL证书的域名,比如我的WordPress网站域名*（tutujanjan.world）,然后点击Create Free SSL Certificate按钮，系统会自动补齐www域名或者不带www域名。</p>
<p>1.然后我们选择90天证书</p>
<p>2.然后取消自动生成 CSR进行手动配置</p>
<p>3.输入邮件地址 城市 国家点击下一步</p>
<p>4.接着就可以下载一个TXT文件保存到本地</p>
<h2 id="2-验证域名所有权"><a href="#2-验证域名所有权" class="headerlink" title="2.验证域名所有权"></a>2.验证域名所有权</h2><p>1.根据网站的提示到我们的服务器网站根目录添加文件夹</p>
<p>列如我的情况</p>
<p>/home/wwwroot/wordpress/.well-known/pki-validation</p>
<p>网站根目录为wordpress在下面创建</p>
<p>.well-known/pki-validation</p>
<p>2.把下载下来的TXT文件导入进去。</p>
<p>然后网站点击验证域名。验证成功就可以下载一个证书的安装包</p>
<p>分别是certificate.crt、ca_bundle.crt，以及private.key。</p>
<p><img src="https://tutujanjan.world/wp-content/uploads/2022/08/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE-2022-08-28-023609.png" alt="img"></p>
<h2 id="3-免费SSL证书部署网站"><a href="#3-免费SSL证书部署网站" class="headerlink" title="3.免费SSL证书部署网站"></a>3.免费SSL证书部署网站</h2><ol>
<li>合并certificate.crt、ca_bundle.crt（其实就是用文本编辑器打开，然后把里面的代码复制到一起。）</li>
<li>把合并好的.crt文件改名为自己喜欢的名字，比如tutu.crt</li>
<li>然后在服务器中创建了一个SSL目录”/usr/local/nginx/conf/ssl/”，然后将合并的文件（laobuluo.crt）以及private.key，一并上传进去。</li>
</ol>
<h2 id="4-配置Nginx文件启动SSL证书"><a href="#4-配置Nginx文件启动SSL证书" class="headerlink" title="4.配置Nginx文件启动SSL证书"></a>4.配置Nginx文件启动SSL证书</h2><p>这一步我折腾了好久，格式一定要填对，网上找的教程很多和现在格式都不正确。</p>
<p>1.修改nginx.conf配置</p>
<p>首先进入nginx的安装目录</p>
<p>一般在/usr/local/nginx/conf里面</p>
<p>打开它或者使用命令</p>
<pre class="line-numbers language-none"><code class="language-none">cd /usr/locla/nginx/conf
#修改nginx.conf文件
vim nginx.conf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>2.找到server这一行进行修改</p>
<p>格式一定要对。</p>
<p><img src="https://tutujanjan.world/wp-content/uploads/2022/08/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE-2022-08-28-024559.png" alt="img"></p>
<p>简单说明以下</p>
<pre class="line-numbers language-none"><code class="language-none">server
    {
        listen 443;                 #监听443端口
        #listen [::]:80 default_server ipv6only=on;
        server_name tutujanjan.world;           #你的域名
        index index.html index.htm index.php;
        root  /home/wwwroot/wordpress;        #站点目录。
	ssl on;   #开启ssl
	ssl_certificate     /usr/local/nginx/conf/ssl/tutu.crt;        #ssl证书的crt文件路径
	ssl_certificate_key /usr/local/nginx/conf/ssl/private.key;         #ssl证书的key文件路径
        #error_page   404   /404.html;

        # Deny access to PHP files in specific directory
        #location ~ /(wp-content|uploads|wp-includes|images)/.*\.php$ { deny all; }

        include enable-php.conf;

        location /nginx_status
        {
            stub_status on;
            access_log   off;
        }

        location ~ .*\.(gif|jpg|jpeg|png|bmp|swf)$
        {
            expires      30d;
        }

        location ~ .*\.(js|css)?$
        {
            expires      12h;
        }

        location ~ /.well-known {
            allow all;
        }

        location ~ /\.
        {
            deny all;
        }

        access_log  /home/wwwlogs/access.log;
    }
include vhost/*.conf;
}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>3.配置完成后，检查一下nginx配置文件是否可用，有successful表示可用。</p>
<pre class="line-numbers language-none"><code class="language-none">$ nginx -t // 检查nginx配置文件<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>4.配置正确后，重新加载配置文件使配置生效：</p>
<pre class="line-numbers language-none"><code class="language-none">nginx -s reload // 使配置生效<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>5.如需重启nginx，用以下命令：</p>
<pre class="line-numbers language-none"><code class="language-none">$ service nginx stop // 停止
$ service nginx start // 启动
$ service nginx restart // 重启<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h2 id="5-测试是否成功"><a href="#5-测试是否成功" class="headerlink" title="5.测试是否成功"></a>5.测试是否成功</h2><p>输入<a href="https://tutujanjan.world/">https://tutujanjan.world</a> 看看能否成功访问。</p>
<h2 id="6-重定向到-443-端口"><a href="#6-重定向到-443-端口" class="headerlink" title="6.重定向到 443 端口"></a>6.重定向到 443 端口</h2><p>本来以为就结束了，然后我最后发现一个问题，就是必须手动输入https://在浏览器才能访问。</p>
<p>我们需要把80端口的http://重定向到443端口。</p>
<p>打开nginx.conf配置文件</p>
<p>在server上面再添加一行</p>
<pre class="line-numbers language-none"><code class="language-none">server
    {
        listen 443;                 #监听443端口
        #listen [::]:80 default_server ipv6only=on;
        server_name tutujanjan.world;           #你的域名
        index index.html index.htm index.php;
        root  /home/wwwroot/wordpress;        #站点目录。
	ssl on;   #开启ssl<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>相关配置：</p>
<pre class="line-numbers language-none"><code class="language-none">server {
    listen 80;
    server_name YOUR_DOMAIN;
    rewrite ^(.*)$ https://${server_name}$1 permanent;     
}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>比如我的就是这样的</p>
<p><img src="https://tutujanjan.world/wp-content/uploads/2022/08/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE-2022-08-28-173954.png" alt="img"></p>
<p>搞定，只需要输入域名都能访问https://而不需要手动输入了。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>对于小白用户，前面步骤都挺轻松的，后面的配置信息因为格式不对，导致我一直没成功，折腾了半天。</p>
<p>建议配置nginx.conf的时候对它先进行一次备份。</p>
]]></content>
      <categories>
        <category>服务器</category>
        <category>Linux</category>
        <category>网站</category>
      </categories>
      <tags>
        <tag>教程</tag>
        <tag>Ubuntu</tag>
        <tag>WordPress</tag>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu Server ARM 22.04从英文切换到中文环境</title>
    <url>/2022/08/31/Ubuntu-Server-ARM-22-04%E4%BB%8E%E8%8B%B1%E6%96%87%E5%88%87%E6%8D%A2%E5%88%B0%E4%B8%AD%E6%96%87%E7%8E%AF%E5%A2%83/</url>
    <content><![CDATA[<h1 id="Ubuntu-Server-ARM-22-04从英文切换到中文环境"><a href="#Ubuntu-Server-ARM-22-04从英文切换到中文环境" class="headerlink" title="Ubuntu Server ARM 22.04从英文切换到中文环境"></a>Ubuntu Server ARM 22.04从英文切换到中文环境</h1><h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1.前言"></a>1.前言</h2><p>安装好了Ubuntu Server ARM 22.04的图形化虚拟机，发现设置里面不能切换语言，安装了中文语言包依然没用，甚至选项都没有，瞬间昏了过去<img src="https://s.w.org/images/core/emoji/14.0.0/svg/1f605.svg" alt="😅">。最后还是配置好了中文环境，分享一下经验。</p>
<h2 id="2-开始配置"><a href="#2-开始配置" class="headerlink" title="2.开始配置"></a>2.开始配置</h2><h3 id="2-1-更新软件列表和安装包。"><a href="#2-1-更新软件列表和安装包。" class="headerlink" title="2.1 更新软件列表和安装包。"></a>2.1 更新软件列表和安装包。</h3><pre class="line-numbers language-none"><code class="language-none">sudo apt-get update
sudo apt-get upgrade<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h3 id="2-2-安装相关组件："><a href="#2-2-安装相关组件：" class="headerlink" title="2.2 安装相关组件："></a>2.2 安装相关组件：</h3><pre class="line-numbers language-none"><code class="language-none">sudo apt install -y language-pack-zh-hans<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="2-3-编辑配置文件"><a href="#2-3-编辑配置文件" class="headerlink" title="2.3 编辑配置文件"></a>2.3 编辑配置文件</h3><pre class="line-numbers language-none"><code class="language-none">sudo vim /etc/default/locale<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>如果提示没有vim输入：</p>
<pre class="line-numbers language-none"><code class="language-none">sudo apt install vim<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>安装即可</p>
<p>修改为以下内容：</p>
<p><img src="https://tutujanjan.world/wp-content/uploads/2022/08/%E6%88%AA%E5%B1%8F2022-08-31-5.26.44.png" alt="img"></p>
<p>然后重启服务器即可。</p>
<p>*补充</p>
<p>执行以下命令安装字体和输入法。</p>
<pre class="line-numbers language-none"><code class="language-none">sudo apt install $(check-language-support) -y<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
]]></content>
      <categories>
        <category>服务器</category>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>教程</tag>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu防火墙的开启，关闭，端口的打开，查看</title>
    <url>/2022/08/26/Ubuntu%E9%98%B2%E7%81%AB%E5%A2%99%E7%9A%84%E5%BC%80%E5%90%AF%EF%BC%8C%E5%85%B3%E9%97%AD%EF%BC%8C%E7%AB%AF%E5%8F%A3%E7%9A%84%E6%89%93%E5%BC%80%EF%BC%8C%E6%9F%A5%E7%9C%8B/</url>
    <content><![CDATA[<h1 id="Ubuntu防火墙的开启，关闭，端口的打开，查看"><a href="#Ubuntu防火墙的开启，关闭，端口的打开，查看" class="headerlink" title="Ubuntu防火墙的开启，关闭，端口的打开，查看"></a>Ubuntu防火墙的开启，关闭，端口的打开，查看</h1><h2 id="1-防火墙的打开"><a href="#1-防火墙的打开" class="headerlink" title="1.防火墙的打开"></a>1.防火墙的打开</h2><p><strong>sudo ufw enable</strong></p>
<h2 id="2-防火墙的重启"><a href="#2-防火墙的重启" class="headerlink" title="2.防火墙的重启"></a><strong>2.防火墙的重启</strong></h2><p><strong>sudo ufw reload</strong></p>
<h2 id="3-打开想要的端口（以9000为例）"><a href="#3-打开想要的端口（以9000为例）" class="headerlink" title="3.打开想要的端口（以9000为例）"></a><strong>3.打开想要的端口（以9000为例）</strong></h2><p><strong>ufw allow 9000</strong></p>
<h2 id="4-查看本机端口使用情况"><a href="#4-查看本机端口使用情况" class="headerlink" title="4.查看本机端口使用情况"></a><strong>4.查看本机端口使用情况</strong></h2><p><strong>ufw status</strong></p>
]]></content>
      <categories>
        <category>服务器</category>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>教程</tag>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows 11 免费激活教程</title>
    <url>/2022/08/19/Windows%2011%20%E5%85%8D%E8%B4%B9%E6%BF%80%E6%B4%BB%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<h1 id="Windows-11-免费激活教程"><a href="#Windows-11-免费激活教程" class="headerlink" title="Windows 11 免费激活教程"></a>Windows 11 免费激活教程</h1><p>安装好Windows11 以后，之前一直都是用淘宝买激活码来激活系统的，其实只需要三行命令就可以免费激活。</p>
<p>Windows内搜索「cmd」 打开命令窗口依次输入这三条命令：</p>
<pre class="line-numbers language-none"><code class="language-none">slmgr /ipk W269N-WFGWX-YVC9B-4J6C9-T83GX

slmgr /skms kms.loli.best

slmgr /ato<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>看到成功激活，点击确定就OK。</p>
<p>搞定！(≧▽≦)</p>
]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>教程</tag>
        <tag>windows</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2022/05/19/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>hexo常用命令笔记</title>
    <url>/2022/08/12/hexo%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="hexo常用命令笔记"><a href="#hexo常用命令笔记" class="headerlink" title="hexo常用命令笔记"></a>hexo常用命令笔记</h1><h2 id="hexo"><a href="#hexo" class="headerlink" title="hexo"></a>hexo</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo <span class="token parameter variable">-g</span> <span class="token comment">#安装  </span>
<span class="token function">npm</span> update hexo <span class="token parameter variable">-g</span> <span class="token comment">#升级  </span>
hexo init <span class="token comment">#初始化</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h2 id="简写"><a href="#简写" class="headerlink" title="简写"></a>简写</h2><p><code>hexo n "我的博客"</code> == <code>hexo new "我的博客"</code> #新建文章<br><code>hexo p</code> == <code>hexo publish</code><br><code>hexo g</code> == <code>hexo generate</code>#生成<br><code>hexo s</code> == <code>hexo server</code> #启动服务预览<br><code>hexo d</code> == <code>hexo deploy</code>#部署</p>
<h2 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h2><p><code>hexo server</code> #Hexo 会监视文件变动并自动更新，您无须重启服务器。<br><code>hexo server -s</code> #静态模式<br><code>hexo server -p 5000</code> #更改端口<br><code>hexo server -i 192.168.1.1</code> #自定义 IP</p>
<p><code>hexo clean</code> #清除缓存 网页正常情况下可以忽略此条命令<br><code>hexo g</code> #生成静态网页<br><code>hexo d</code> #开始部署</p>
<h3 id="监视文件变动"><a href="#监视文件变动" class="headerlink" title="监视文件变动"></a>监视文件变动</h3><p><code>hexo generate</code> #使用 Hexo 生成静态文件快速而且简单<br><code>hexo generate --watch</code> #监视文件变动</p>
<h3 id="完成后部署"><a href="#完成后部署" class="headerlink" title="完成后部署"></a>完成后部署</h3><blockquote>
<p>两个命令的作用是相同的<br><code>hexo generate --deploy</code><br><code>hexo deploy --generate</code></p>
</blockquote>
<pre class="line-numbers language-none"><code class="language-none">hexo deploy -g`
`hexo server -g<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h2 id="草稿"><a href="#草稿" class="headerlink" title="草稿"></a>草稿</h2><pre class="line-numbers language-none"><code class="language-none">hexo publish [layout] &lt;title&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h2 id="模版"><a href="#模版" class="headerlink" title="模版"></a>模版</h2><p><code>hexo new "postName"</code> #新建文章<br><code>hexo new page "pageName"</code> #新建页面<br><code>hexo generate</code> #生成静态页面至public目录<br><code>hexo server</code> #开启预览访问端口（默认端口4000，’ctrl + c’关闭server）<br><code>hexo deploy</code> #将.deploy目录部署到GitHub</p>
<pre class="line-numbers language-none"><code class="language-none">hexo new [layout] &lt;title&gt;`
`hexo new photo "My Gallery"`
`hexo new "Hello World" --lang tw<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<table>
<thead>
<tr>
<th>变量</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>layout</td>
<td>布局</td>
</tr>
<tr>
<td>title</td>
<td>标题</td>
</tr>
<tr>
<td>date</td>
<td>文件建立日期</td>
</tr>
</tbody></table>
<pre class="line-numbers language-subunit" data-language="subunit"><code class="language-subunit">title: 使用Hexo搭建个人博客
layout: post
date: 2014-03-03 19:07:43
comments: true
categories: Blog
tags: [Hexo]
keywords: Hexo, Blog
description: 生命在于折腾，又把博客折腾到Hexo了。给Hexo点赞。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="模版（Scaffold）"><a href="#模版（Scaffold）" class="headerlink" title="模版（Scaffold）"></a>模版（Scaffold）</h2><pre class="line-numbers language-none"><code class="language-none">hexo new photo "My Gallery"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<table>
<thead>
<tr>
<th>变量</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>layout</td>
<td>布局</td>
</tr>
<tr>
<td>title</td>
<td>标题</td>
</tr>
<tr>
<td>date</td>
<td>文件建立日期</td>
</tr>
</tbody></table>
<h2 id="设置文章摘要"><a href="#设置文章摘要" class="headerlink" title="设置文章摘要"></a>设置文章摘要</h2><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">以上是文章摘要 <span class="token comment">&lt;!--more--&gt;</span> 以下是余下全文 <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h2 id="写作"><a href="#写作" class="headerlink" title="写作"></a>写作</h2><pre class="line-numbers language-none"><code class="language-none">hexo new page &lt;title&gt;`
`hexo new post &lt;title&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<table>
<thead>
<tr>
<th>变量</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>:title</td>
<td>标题</td>
</tr>
<tr>
<td>:year</td>
<td>建立的年份（4 位数）</td>
</tr>
<tr>
<td>:month</td>
<td>建立的月份（2 位数）</td>
</tr>
<tr>
<td>:i_month</td>
<td>建立的月份（去掉开头的零）</td>
</tr>
<tr>
<td>:day</td>
<td>建立的日期（2 位数）</td>
</tr>
<tr>
<td>:i_day</td>
<td>建立的日期（去掉开头的零）</td>
</tr>
</tbody></table>
<h3 id="推送到服务器上"><a href="#推送到服务器上" class="headerlink" title="推送到服务器上"></a>推送到服务器上</h3><pre class="line-numbers language-none"><code class="language-none">hexo n` #写文章
`hexo g` #生成
`hexo d` #部署 #可与`hexo g`合并为 `hexo d -g<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h2 id="报错"><a href="#报错" class="headerlink" title="报错"></a>报错</h2><h3 id="1-找不到git部署"><a href="#1-找不到git部署" class="headerlink" title="1.找不到git部署"></a>1.找不到git部署</h3><pre class="line-numbers language-subunit" data-language="subunit"><code class="language-subunit">ERROR Deployer not found: git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><strong>解决方法</strong></p>
<pre class="line-numbers language-none"><code class="language-none">npm install hexo-deployer-git --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="3-部署类型设置git"><a href="#3-部署类型设置git" class="headerlink" title="3.部署类型设置git"></a>3.部署类型设置git</h3><p>hexo 3.0 部署类型不再是<code>github</code>，<code>_config.yml</code> 中修改</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># Deployment</span>
<span class="token comment">## Docs: http://hexo.io/docs/deployment.html</span>
deploy:
  type: <span class="token function">git</span>
  repository: git@***.github.com:***/***.github.io.git
  branch: master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="4-xcodebuild"><a href="#4-xcodebuild" class="headerlink" title="4. xcodebuild"></a>4. xcodebuild</h3><p>xcode-select: error: tool ‘xcodebuild’ requires Xcode, but active developer directory ‘/Library/Developer/CommandLineTools’ is a command line tools instance</p>
<pre class="line-numbers language-none"><code class="language-none">npm install bcrypt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="5-RSS不显示"><a href="#5-RSS不显示" class="headerlink" title="5. RSS不显示"></a>5. RSS不显示</h3><h4 id="安装RSS插件"><a href="#安装RSS插件" class="headerlink" title="安装RSS插件"></a>安装RSS插件</h4><pre class="line-numbers language-none"><code class="language-none">npm install hexo-generator-feed --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h4 id="开启RSS功能"><a href="#开启RSS功能" class="headerlink" title="开启RSS功能"></a>开启RSS功能</h4><p>编辑hexo/_config.yml，添加如下代码：</p>
<pre class="line-numbers language-crmsh" data-language="crmsh"><code class="language-crmsh">rss: /atom.xml #rss地址  默认即可<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h4 id="开启评论"><a href="#开启评论" class="headerlink" title="开启评论"></a>开启评论</h4><p>1.我使用多说代替自带的评论，在<a href="http://duoshuo.com/">多说</a> 网站注册 &gt; 后台管理 &gt; 添加新站点 &gt; 工具 === 复制通用代码 里面有 short_name</p>
<ol>
<li>在根目录 <code>_config.yml</code> 添加一行 <code>disqus_shortname: jslite</code> 是在多说注册时产生的</li>
<li>复制到 <code>themes\landscape\layout\_partial\article.ejs</code><br>把</li>
</ol>
<pre class="line-numbers language-mojolicious" data-language="mojolicious"><code class="language-mojolicious">&lt;% if (!index &amp;&amp; post.comments &amp;&amp; config.disqus_shortname){ %&gt;
&lt;section id="comments"&gt;
&lt;div id="disqus_thread"&gt;
  &lt;noscript&gt;Please enable JavaScript to view the &lt;a href="//disqus.com/?ref_noscript"&gt;comments powered by Disqus.&lt;/a&gt;&lt;/noscript&gt;
&lt;/div&gt;
&lt;/section&gt;
&lt;% } %&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>改为</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">&lt;% if (!index &amp;&amp; post.comments &amp;&amp; config.disqus_shortname){ %&gt;
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>section</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>comments<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token comment">&lt;!-- 多说评论框 start --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ds-thread<span class="token punctuation">"</span></span> <span class="token attr-name">data-thread-key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&lt;%= post.layout %&gt;-&lt;%= post.slug %&gt;<span class="token punctuation">"</span></span> <span class="token attr-name">data-title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&lt;%= post.title %&gt;<span class="token punctuation">"</span></span> <span class="token attr-name">data-url</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&lt;%= page.permalink %&gt;<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token comment">&lt;!-- 多说评论框 end --&gt;</span>
    <span class="token comment">&lt;!-- 多说公共JS代码 start (一个网页只需插入一次) --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
    <span class="token keyword">var</span> duoshuoQuery <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">short_name</span><span class="token operator">:</span><span class="token string">'&lt;%= config.disqus_shortname %&gt;'</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
      <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">var</span> ds <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'script'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        ds<span class="token punctuation">.</span>type <span class="token operator">=</span> <span class="token string">'text/javascript'</span><span class="token punctuation">;</span>ds<span class="token punctuation">.</span>async <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        ds<span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token punctuation">(</span>document<span class="token punctuation">.</span>location<span class="token punctuation">.</span>protocol <span class="token operator">==</span> <span class="token string">'https:'</span> <span class="token operator">?</span> <span class="token string">'https:'</span> <span class="token operator">:</span> <span class="token string">'http:'</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'//static.duoshuo.com/embed.js'</span><span class="token punctuation">;</span>
        ds<span class="token punctuation">.</span>charset <span class="token operator">=</span> <span class="token string">'UTF-8'</span><span class="token punctuation">;</span>
        <span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">'head'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> 
         <span class="token operator">||</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">'body'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>ds<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
    <span class="token comment">&lt;!-- 多说公共JS代码 end --&gt;</span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>section</span><span class="token punctuation">&gt;</span></span>
&lt;% } %&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Blog</tag>
      </tags>
  </entry>
  <entry>
    <title>万能的格式转换工具File Converter</title>
    <url>/2022/08/28/%E4%B8%87%E8%83%BD%E7%9A%84%E6%A0%BC%E5%BC%8F%E8%BD%AC%E6%8D%A2%E5%B7%A5%E5%85%B7File%20Converter/</url>
    <content><![CDATA[<h1 id="万能的格式转换工具File-Converter"><a href="#万能的格式转换工具File-Converter" class="headerlink" title="万能的格式转换工具File Converter"></a>万能的格式转换工具File Converter</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>今天想把MP4转换成MP3,去找了以下工具，结果被我找到宝了！</p>
<p>很多很多很多格式的文件。只需要鼠标右键就可以直接转换！非常简单粗暴。</p>
<p>重要的还是免费开源！</p>
<h2 id="支持的格式"><a href="#支持的格式" class="headerlink" title="支持的格式"></a>支持的格式</h2><table>
<thead>
<tr>
<th>支持的输出格式</th>
<th>兼容的输入格式</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>声音的</td>
<td>flac、aac、ogg、mp3、wav</td>
<td>3gp, aiff, 猿, avi, bik, cda, flac, flv, m4a, mkv, mov, mp3, mp4, oga, ogg, wav, webm, wma, wmv</td>
</tr>
<tr>
<td>视频</td>
<td>webm, mkv, mp4, ogv, avi, gif</td>
<td>3gp、avi、bik、flv、gif、m4v、mkv、mp4、mpeg、mov、ogv、webm、wmv</td>
</tr>
<tr>
<td>图片</td>
<td>png, jpg, ico, webp</td>
<td>bmp、exr、ico、jpg、jpeg、png、psd、svg、tiff、tga、webp、pdf、doc<em>、docx</em>、odt<em>、odp</em>、ods<em>、ppt</em>、pptx<em>、xls</em>、xlsx*</td>
</tr>
<tr>
<td>文档</td>
<td>pdf</td>
<td>doc<em>、docx</em>、odt<em>、odp</em>、ods<em>、ppt</em>、pptx<em>、xls</em>、xlsx*、bmp、exr、ico、jpg、jpeg、png、psd、svg、tiff、tga</td>
</tr>
</tbody></table>
<h2 id="下载地址"><a href="#下载地址" class="headerlink" title="下载地址"></a>下载地址</h2><p>File Converter <a href="https://file-converter.org/">点击下载</a></p>
]]></content>
      <categories>
        <category>好用的软件</category>
      </categories>
      <tags>
        <tag>软件</tag>
      </tags>
  </entry>
  <entry>
    <title>修改Android模拟器RAM大小的方法</title>
    <url>/2022/05/20/%E4%BF%AE%E6%94%B9Android%E6%A8%A1%E6%8B%9F%E5%99%A8RAM%E5%A4%A7%E5%B0%8F%E7%9A%84%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p>想在在Mca上玩ウマ娘，安装Android studio 发现内存不太够很卡<br>用以下方法可以改善</p>
<h2 id="修改Android模拟器RAM大小的方法"><a href="#修改Android模拟器RAM大小的方法" class="headerlink" title="修改Android模拟器RAM大小的方法"></a>修改Android模拟器RAM大小的方法</h2><p>安卓开发时候会遇到这种问题：Warning: requested ram_size 2048M too big, reduced to 1024M，这时候可以通过修改Android模拟器的RAM大小来解决（Android模拟器启动速度慢，运行也很缓慢，也可以用这个方法来加速）。</p>
<p>1.找到AVD的安装路径：.android\avd\AVD的名字.avd（如：D:\AVD.android\avd\PHONE.avd）</p>
<p>2.xxx.avd目录下的congfig.ini就是模拟器设备的配置文件：</p>
<p>   用记事本打开xxx.avd目录下的congfig.ini</p>
<p>   找到 hw.ramSize=2048 这句 ，把后面的2048修改得小一点就行（1024或512）    </p>
<p>另外，附上网上找到的congfig.ini内容介绍：</p>
<pre class="line-numbers language-none"><code class="language-none">avd.ini.encoding=ISO-8859-1  #字符编码
hw.dPad=no                            #是否要让手机支持DPad键，默认为yes，表示支持。DPad键就是手机上的那些Home键、返回键、电话键、电源键。
hw.lcd.density=240                 #是屏幕的密度

sdcard.size=16M                    #SD卡的大小
hw.cpu.arch=arm                   #CPU的结构类型
hw.device.hash=-1812631727          #硬件的某种值，可能是设备码之类的

hw.camera.front=none
hw.camera.back=none         #背部相机，还有相关的一系列设置
disk.dataPartition.size=200M   #隔离缓存设置
skin.path=480×800                  #模拟器皮肤路径
skin.dynamic=yes                    #模拟器皮肤是否动态设置
hw.keyboard=yes                    #使用按键输入
hw.ramSize=512                    # 模拟器的RAM运行内存大小
hw.device.manufacturer=Google    #设备厂商（所有人）
hw.sdCard=yes                       #是否使用sd卡
hw.mainKeys=yes                  #是否虚拟键完全隐藏 1：隐藏；0：不
hw.accelerometer=yes           #是否使用加速计等相关设置
skin.name=480×800               #分辨率
abi.type=armeabi
hw.trackBall=yes                    #是否使用跟踪球
hw.device.name=Nexus One   #设备名称
hw.battery=no                          #是否使用电池
image.sysdir.1=platforms\android-10\images\             # 模拟器的映像文件路径

hw.sensors.proximity=yes       #是否使用接近传感器
hw.sensors.orientation=no
hw.audioInput=yes                   #是否记入默认值，然后输入

hw.gps=yes                              #是否使用全球定位
vm.heapSize=512                    # 虚拟机默认堆大小<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>————————————————<br>版权声明：本文为CSDN博主「caide_huang」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href="https://blog.csdn.net/qq_33701857/article/details/50978613">https://blog.csdn.net/qq_33701857/article/details/50978613</a></p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>模拟器</tag>
      </tags>
  </entry>
  <entry>
    <title>创建Ubuntu云服务器以及配置Windows访问远程桌面的方法</title>
    <url>/2022/08/26/%E5%88%9B%E5%BB%BAUbuntu%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%BB%A5%E5%8F%8A%E9%85%8D%E7%BD%AEWindows%E8%AE%BF%E9%97%AE%E8%BF%9C%E7%A8%8B%E6%A1%8C%E9%9D%A2%E7%9A%84%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h1 id="创建Ubuntu云服务器以及配置Windows访问远程桌面的方法"><a href="#创建Ubuntu云服务器以及配置Windows访问远程桌面的方法" class="headerlink" title="创建Ubuntu云服务器以及配置Windows访问远程桌面的方法"></a>创建Ubuntu云服务器以及配置Windows访问远程桌面的方法</h1><p>WINDOWS电脑用XRDP远程连接甲骨文云服务器 - UBUNTU可视化图形界面</p>
<p>有了可视化界面操作更加方便直观，分享以下我的方法。</p>
<h2 id="1-准备工作"><a href="#1-准备工作" class="headerlink" title="1.准备工作"></a>1.准备工作</h2><p>下载安装几款SSH工具。</p>
<p>前几天推荐了FinalShell，但是不知道为什么始终连接不到云服务器，索性换工具。</p>
<p>1.下载安装 WinSCP <a href="https://winscp.net/eng/download.php">点击下载</a></p>
<p>2.下载安装 PuTTY <a href="https://www.putty.org/">点击下载</a></p>
<h2 id="2-连接配置"><a href="#2-连接配置" class="headerlink" title="2.连接配置"></a>2.连接配置</h2><h3 id="2-1-WinSCP配置"><a href="#2-1-WinSCP配置" class="headerlink" title="2-1.WinSCP配置"></a>2-1.WinSCP配置</h3><p>WinSCP安装好了之后新建站点，</p>
<p>协议选择SFTP</p>
<p>主机名填入公网IP地址</p>
<p>用户名: ubuntu</p>
<p>端口:22</p>
<p>密码不用填</p>
<p>然后点击高级</p>
<p>Shell 选择 sudo su -</p>
<p>然后点击SSh下面的验证➡密匙文件，选择自己的SSh密匙，然后进行ppk的转换，保存到自己知道的地方。最后确定即可</p>
<h5 id="在WinSCP上修改登录信息"><a href="#在WinSCP上修改登录信息" class="headerlink" title="在WinSCP上修改登录信息"></a>在WinSCP上修改登录信息</h5><p>在登录信息中选择 <strong>编辑 –&gt; 高级 –&gt; SFTP</strong> 修改如标注所示</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> /usr/lib/openssh/sftp-server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="2-2-PuTTY配置"><a href="#2-2-PuTTY配置" class="headerlink" title="2-2.PuTTY配置"></a>2-2.PuTTY配置</h3><p>1.首先在Session里面配置好公网IP</p>
<p><img src="/images/20220826/ubuntu/2.png"></p>
<p>2.然后选择SSH➡Auth选择好转换过后的ppk密匙</p>
<p><img src="/images/20220826/ubuntu/3.png"></p>
<p>3.配置好之后点击Open接着选择Accept</p>
<p>命令窗口会显示登录用户</p>
<p>输入：ubuntu</p>
<p>成功连接!</p>
<h2 id="3-安装配置Ubuntu桌面系统"><a href="#3-安装配置Ubuntu桌面系统" class="headerlink" title="3.安装配置Ubuntu桌面系统"></a>3.安装配置Ubuntu桌面系统</h2><h3 id="1-更新服务器，并安装Ubuntu桌面系统-GNOME"><a href="#1-更新服务器，并安装Ubuntu桌面系统-GNOME" class="headerlink" title="1.更新服务器，并安装Ubuntu桌面系统(GNOME):"></a>1.更新服务器，并安装Ubuntu桌面系统(GNOME):</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> update
<span class="token function">sudo</span> <span class="token function">apt-get</span> upgrade
<span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> tasksel <span class="token comment">#选择GNOME Flashback</span>
<span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> ubuntu-desktop<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="2-安装并打开xrdp服务"><a href="#2-安装并打开xrdp服务" class="headerlink" title="2.安装并打开xrdp服务"></a>2.安装并打开xrdp服务</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> xrdp 

<span class="token function">sudo</span> systemctl <span class="token builtin class-name">enable</span> xrdp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h3 id="3-添加3389端口"><a href="#3-添加3389端口" class="headerlink" title="3.添加3389端口"></a>3.添加3389端口</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> iptables <span class="token parameter variable">-I</span> INPUT <span class="token parameter variable">-p</span> tcp <span class="token parameter variable">--dport</span> <span class="token number">3389</span> <span class="token parameter variable">-j</span> ACCEPT 

<span class="token function">sudo</span> netfilter-persistent save<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>接着我们在甲骨云添加安全规则#3389</p>
<h3 id="4-为xdrp创建一个用户"><a href="#4-为xdrp创建一个用户" class="headerlink" title="4.为xdrp创建一个用户"></a>4.为xdrp创建一个用户</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> adduser tutu <span class="token comment">#这一步最后一个单词是自己用户名，然后输入密码。后面的名字都可以回车跳过</span>

<span class="token function">sudo</span> <span class="token function">usermod</span> <span class="token parameter variable">-G</span> xrdp tutu <span class="token comment">#最后一个单词是自己用户名，保持一致</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h3 id="5-重启服务器"><a href="#5-重启服务器" class="headerlink" title="5.重启服务器"></a>5.重启服务器</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">reboot</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>最后修复一个启动需要输入密码的bug</p>
<p>—BUG修复： 第一个命令，打开文本编辑器：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">nano</span> /etc/polkit-1/localauthority.conf.d/02-allow-colord.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>输入atrl+x 保存</p>
<h3 id="6-连接到桌面系统"><a href="#6-连接到桌面系统" class="headerlink" title="6.连接到桌面系统"></a>6.连接到桌面系统</h3><h4 id="3-6-1先打开PuTTY配置好2-2的内容，重点来了"><a href="#3-6-1先打开PuTTY配置好2-2的内容，重点来了" class="headerlink" title="3-6-1先打开PuTTY配置好2-2的内容，重点来了"></a>3-6-1先打开PuTTY配置好2-2的内容，重点来了</h4><p>最后需要增加一条隧道</p>
<p>点击Tunnel</p>
<p>添加本机</p>
<p>127.0.0.1:3399</p>
<p>然后公网IP</p>
<p>xxx.xxx.xxx.xx:3389</p>
<p>然后点击Add</p>
<p>最后就能点击连接进主机了。</p>
<p>登录ubuntu</p>
<p><img src="/images/20220826/ubuntu/4.png"></p>
<h4 id="3-6-2"><a href="#3-6-2" class="headerlink" title="3-6-2"></a>3-6-2</h4><p>Windows打开远程连接</p>
<p>输入</p>
<p>127.0.0.1:3399</p>
<p>连接就能成功</p>
<p>然后输入开始3-4步骤设置的用户名和密码然后就完成了。</p>
<h2 id="踩坑和解决方法"><a href="#踩坑和解决方法" class="headerlink" title="踩坑和解决方法"></a>踩坑和解决方法</h2><ul>
<li>在安装<a href="https://so.csdn.net/so/search?q=Ubuntu&amp;spm=1001.2101.3001.7020">Ubuntu</a>系统时，第一次没有设置root用户密码，此时进入root用户需要重新设置密码，才能进入root用户。</li>
</ul>
<p>方法：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">passwd</span> root<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>然后修改密码即可，这样就能重新进入root用户了。</p>
<ul>
<li><p>解决linux下sudo更改文件权限报错xxxis not in the sudoers file. This incident will be reported.</p>
<p>Linux中普通用户用sudo执行命令时报”xxx is not in the sudoers file.This incident will be reported”错误，解决方法就是在/etc/sudoers文件里给该用户添加权限。如下：</p>
<p>1.切换到root用户下<br>方法为直接在命令行输入：su，然后输入密码（即你的登录密码，且密码默认不可见）。</p>
<p>2./etc/sudoers文件默认是只读的，对root来说也是，因此需先添加sudoers文件的写权限,命令是:<br>即执行操作：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">chmod</span> u+w /etc/sudoers<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>3.编辑sudoers文件<br>即执行：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vi</span> /etc/sudoers<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>找到这行 </p>
<p>root ALL=(ALL) ALL</p>
<p>在他下面添加</p>
<p>xxx ALL=(ALL) ALL (这里的xxx是你的用户名)</p>
<p>ps:这里说下你可以sudoers添加下面四行中任意一条<br>youuser ALL=(ALL) ALL<br>%youuser ALL=(ALL) ALL<br>youuser ALL=(ALL) NOPASSWD: ALL<br>%youuser ALL=(ALL) NOPASSWD: ALL</p>
<p>第一行:允许用户youuser执行sudo命令(需要输入密码).<br>第二行:允许用户组youuser里面的用户执行sudo命令(需要输入密码).<br>第三行:允许用户youuser执行sudo命令,并且在执行的时候不输入密码.<br>第四行:允许用户组youuser里面的用户执行sudo命令,并且在执行的时候不输入密码.</p>
<p>4.撤销sudoers文件写权限,命令:</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">chmod</span> u-w /etc/sudoers<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
</ul>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://ja.linuxcapable.com/how-to-install-tasksel-on-ubuntu-22-04-lts/#How_to_Launch_TaskSel_in_Terminal">Ubuntu22.04LTSにTaskselをインストールする方法</a></p>
<p><a href="https://blog.csdn.net/sinat_36118270/article/details/62899093">解决linux下sudo更改文件权限报错xxxis not in the sudoers file. This incident will be reported.</a></p>
]]></content>
      <categories>
        <category>服务器</category>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>教程</tag>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>周末约会去哪里,到池袋去逛逛?</title>
    <url>/2022/08/24/%E5%91%A8%E6%9C%AB%E7%BA%A6%E4%BC%9A%E5%8E%BB%E5%93%AA%E9%87%8C%EF%BC%9F%E5%88%B0%E6%B1%A0%E8%A2%8B%E5%8E%BB%E9%80%9B%E9%80%9B%EF%BC%9F/</url>
    <content><![CDATA[<h1 id="周末约会去哪里？到池袋去逛逛？"><a href="#周末约会去哪里？到池袋去逛逛？" class="headerlink" title="周末约会去哪里？到池袋去逛逛？"></a>周末约会去哪里？到池袋去逛逛？</h1><p>日本 东京都内有一个 叫池袋的地方。</p>
<p> 有很多地大型设施和购物中心。以前刚来日本在池袋打了3年工，还是比较熟悉(<em>/ω＼</em>)</p>
<p>治安差也是我对池袋的印象之一。</p>
<p>每个月22日我都会和我们家那位去玩，这次就一起去了池袋的サンシャイン水族館。</p>
<h2 id="1-サンシャイン水族館（阳光水族馆）"><a href="#1-サンシャイン水族館（阳光水族馆）" class="headerlink" title="1.サンシャイン水族館（阳光水族馆）"></a>1.サンシャイン水族館（阳光水族馆）</h2><p>阳光水族馆共两层，室内设有多个水族箱，另有名为”海洋花园”的室外展区。</p>
<p>一层是来自世界各地的海洋生物。在这片湛蓝的海水之中，您几乎会忘记自己正身处东京。穿过幽暗的隧道，充分感受奇妙的氛围，耳边传来的深海音效更增添了置身海底的真实感。</p>
<p>二层以湖泊和河流为主题，同样令人叹为观止，展示了包括乌龟、青蛙和各种鱼群等淡水生物。</p>
<p>水族馆充分利用大厦楼顶的地理位置，设置了一个户外环形水槽。拾步户外时可以看到海狮和企鹅等生物。</p>
<p>之前也只是被朋友推荐过具体怎么样这次决定去看看！</p>
<p>从家到池袋电车一小时，从东口出发还需要走10分钟左右。</p>
<p>我们家那位用了会社的优待只花了1900円一个人的门票，还是值得表扬以下哈哈╰(<em>°▽°</em>)╯</p>
<p>进去之后先是一个类似花园的走廊。</p>
<p><img src="/images/20220823/jinianri/IMG_6741.jpg"></p>
<p><img src="/images/20220823/jinianri/IMG_6749.jpg"></p>
<p>平日人不多，中间还有一个小姐姐在和鱼玩。</p>
<p><img src="/images/20220823/jinianri/IMG_6768.jpg"></p>
<p>亚马逊地区我最喜欢。</p>
<p><img src="/images/20220823/jinianri/IMG_6787.jpg"></p>
<p>最近我是不是照相技术渐长？</p>
<p><img src="/images/20220823/jinianri/IMG_6808.jpg"></p>
<p>其实在里面就只逛了10来分钟顺路就来到庭院了。</p>
<p>然后这里有这个水族馆比较有名的企鹅？*好像是</p>
<p>然而我就看到一只在那里游。</p>
<p>在都市高楼游泳的企鹅别具一番。</p>
<p><img src="/images/20220823/jinianri/IMG_6826.jpg"></p>
<p>然后就，没了？</p>
<p>好吧，我以为很大的水族馆可能加起来特就20分钟不到就没了，应该是我来日本见过最小的水族馆了。本来还有表演，最近好像也终止了，只能说很遗憾。</p>
<h2 id="2-コニカミノルタ-プラネタリウム満天-池袋"><a href="#2-コニカミノルタ-プラネタリウム満天-池袋" class="headerlink" title="2.コニカミノルタ - プラネタリウム満天(池袋)"></a>2.コニカミノルタ - プラネタリウム満天(池袋)</h2><p>如果你有水族馆的门票其实可以享受20%的折扣来体验这个设施，就在水族馆的旁边。</p>
<p>打算去试一试，进去有一个圆顶，可以看星星，大概是40分钟左右，想放松的可以来试试，我们家那位进去10分钟就开始呼呼大睡了，结束才起来ಠ_ಠ</p>
<p>有沙发床但是只有5个位置，根本就抢不到。 一般的座位一个人1400円左右。</p>
<h2 id="3-逛街，吃饭"><a href="#3-逛街，吃饭" class="headerlink" title="3.逛街，吃饭"></a>3.逛街，吃饭</h2><p>都结束之后，楼下喜欢宝可梦的可以去一下，有宝可梦中心，甚至还能和火箭队对战w</p>
<p><img src="/images/20220823/jinianri/IMG_6850.jpg"></p>
<p>好家伙，4个人在那里搓手机，应该是宝可梦GO</p>
<p><img src="/images/20220823/jinianri/IMG_6842.jpg"></p>
<p>最后这个里面还有一个万代的 扭蛋店，大的离谱。我也是第一次见到这么大的扭蛋店。感觉什么都有。扭了一个最近喜欢的动漫，「夏日重现」感觉挺火的，只剩下一个了。出来了一个妹妹，哎。我只想要潮。(╯▽╰ )</p>
<p>池袋，感觉就是中国人的聚集地，在北口，有很多中华料理店，这次去了一个叫四季香的店，感觉还行，量很大。导致根本就没吃饭。</p>
<p><img src="/images/20220823/jinianri/IMG_6858.jpg"></p>
<p>鳕鱼</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>池袋还是挺适合约会和购物的。但是如果让我打个分。</p>
<p>1.サンシャイン水族館（阳光水族馆）</p>
<p>★★★☆☆</p>
<p>2.コニカミノルタ - プラネタリウム満天(池袋)</p>
<p>★★★☆☆</p>
<p>原因就是我觉得很小。很一般吧。</p>
<p>不过没去过的还是推荐去玩玩。</p>
<p>希望以后能坚持写下去日常博文吧，因为我比较懒（；´д｀）ゞ</p>
]]></content>
      <categories>
        <category>旅行</category>
        <category>日常生活记录</category>
      </categories>
      <tags>
        <tag>日本</tag>
        <tag>记录</tag>
      </tags>
  </entry>
  <entry>
    <title>如何利用Hexo如何写文章</title>
    <url>/2022/08/19/%E5%A6%82%E4%BD%95%E5%88%A9%E7%94%A8Hexo%E5%A6%82%E4%BD%95%E5%86%99%E6%96%87%E7%AB%A0/</url>
    <content><![CDATA[<h1 id="如何利用Hexo如何写文章"><a href="#如何利用Hexo如何写文章" class="headerlink" title="如何利用Hexo如何写文章"></a>如何利用Hexo如何写文章</h1><p>记录一下怎么开始用Hexo写文章。</p>
<p>一般Markdown文章都放在博客目录下的 `「\source _posts」里面</p>
<p><strong>新建新文章</strong></p>
<pre class="line-numbers language-none"><code class="language-none">hexo n ""文章题名""<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>然后配置选项和分类之类的参数。</p>
<h3 id="Front-matter-选项详解"><a href="#Front-matter-选项详解" class="headerlink" title="Front-matter 选项详解"></a>Front-matter 选项详解</h3><p><code>Front-matter</code> 选项中的所有内容均为<strong>非必填</strong>的。但仍然建议至少填写 <code>title</code> 和 <code>date</code> 的值。</p>
<table>
<thead>
<tr>
<th align="left">配置选项</th>
<th align="left">默认值</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">title</td>
<td align="left"><code>Markdown</code> 的文件标题</td>
<td align="left">文章标题，强烈建议填写此选项</td>
</tr>
<tr>
<td align="left">date</td>
<td align="left">文件创建时的日期时间</td>
<td align="left">发布时间，强烈建议填写此选项，且最好保证全局唯一</td>
</tr>
<tr>
<td align="left">author</td>
<td align="left">根 <code>_config.yml</code> 中的 <code>author</code></td>
<td align="left">文章作者</td>
</tr>
<tr>
<td align="left">img</td>
<td align="left"><code>featureImages</code> 中的某个值</td>
<td align="left">文章特征图，推荐使用图床(腾讯云、七牛云、又拍云等)来做图片的路径.如: <code>http://xxx.com/xxx.jpg</code></td>
</tr>
<tr>
<td align="left">top</td>
<td align="left"><code>true</code></td>
<td align="left">推荐文章（文章是否置顶），如果 <code>top</code> 值为 <code>true</code>，则会作为首页推荐文章</td>
</tr>
<tr>
<td align="left">hide</td>
<td align="left"><code>false</code></td>
<td align="left">隐藏文章，如果<code>hide</code>值为<code>true</code>，则文章不会在首页显示</td>
</tr>
<tr>
<td align="left">cover</td>
<td align="left"><code>false</code></td>
<td align="left"><code>v1.0.2</code>版本新增，表示该文章是否需要加入到首页轮播封面中</td>
</tr>
<tr>
<td align="left">coverImg</td>
<td align="left">无</td>
<td align="left"><code>v1.0.2</code>版本新增，表示该文章在首页轮播封面需要显示的图片路径，如果没有，则默认使用文章的特色图片</td>
</tr>
<tr>
<td align="left">password</td>
<td align="left">无</td>
<td align="left">文章阅读密码，如果要对文章设置阅读验证密码的话，就可以设置 <code>password</code> 的值，该值必须是用 <code>SHA256</code> 加密后的密码，防止被他人识破。前提是在主题的 <code>config.yml</code> 中激活了 <code>verifyPassword</code> 选项</td>
</tr>
<tr>
<td align="left">toc</td>
<td align="left"><code>true</code></td>
<td align="left">是否开启 TOC，可以针对某篇文章单独关闭 TOC 的功能。前提是在主题的 <code>config.yml</code> 中激活了 <code>toc</code> 选项</td>
</tr>
<tr>
<td align="left">mathjax</td>
<td align="left"><code>false</code></td>
<td align="left">是否开启数学公式支持 ，本文章是否开启 <code>mathjax</code>，且需要在主题的 <code>_config.yml</code> 文件中也需要开启才行</td>
</tr>
<tr>
<td align="left">summary</td>
<td align="left">无</td>
<td align="left">文章摘要，自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要</td>
</tr>
<tr>
<td align="left">categories</td>
<td align="left">无</td>
<td align="left">文章分类，本主题的分类表示宏观上大的分类，只建议一篇文章一个分类</td>
</tr>
<tr>
<td align="left">tags</td>
<td align="left">无</td>
<td align="left">文章标签，一篇文章可以多个标签</td>
</tr>
<tr>
<td align="left">keywords</td>
<td align="left">文章标题</td>
<td align="left">文章关键字，SEO 时需要</td>
</tr>
<tr>
<td align="left">reprintPolicy</td>
<td align="left">cc_by</td>
<td align="left">文章转载规则， 可以是 cc_by, cc_by_nd, cc_by_sa, cc_by_nc, cc_by_nc_nd, cc_by_nc_sa, cc0, noreprint 或 pay 中的一个</td>
</tr>
</tbody></table>
<blockquote>
<p><strong>注意</strong>:</p>
<ol>
<li>如果 <code>img</code> 属性不填写的话，文章特色图会根据文章标题的 <code>hashcode</code> 的值取余，然后选取主题中对应的特色图片，从而达到让所有文章都的特色图<strong>各有特色</strong>。</li>
<li><code>date</code> 的值尽量保证每篇文章是唯一的，因为本主题中 <code>Gitalk</code> 和 <code>Gitment</code> 识别 <code>id</code> 是通过 <code>date</code> 的值来作为唯一标识的。</li>
<li>如果要对文章设置阅读验证密码的功能，不仅要在 Front-matter 中设置采用了 SHA256 加密的 password 的值，还需要在主题的 <code>_config.yml</code> 中激活了配置。有些在线的 SHA256 加密的地址，可供使用：<a href="http://tool.oschina.net/encrypt?type=2">开源中国在线工具</a>、<a href="http://encode.chahuo.com/">chahuo</a>、<a href="http://tool.chinaz.com/tools/hash.aspx">站长工具</a>。</li>
</ol>
</blockquote>
<p>以下为文章的 <code>Front-matter</code> 示例。</p>
<h3 id="最简示例"><a href="#最简示例" class="headerlink" title="最简示例"></a>最简示例</h3><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span>
<span class="token key atrule">title</span><span class="token punctuation">:</span> 基于Hexo的hexo<span class="token punctuation">-</span>theme<span class="token punctuation">-</span>matery主题搭建博客并优化
<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2019-10-03 14:25:00</span>
<span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="最全示例"><a href="#最全示例" class="headerlink" title="最全示例"></a>最全示例</h3><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span>
<span class="token key atrule">title</span><span class="token punctuation">:</span> 基于Hexo的hexo<span class="token punctuation">-</span>theme<span class="token punctuation">-</span>matery主题搭建博客并优化
<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2019-12-30 09:25:00</span>
<span class="token key atrule">author</span><span class="token punctuation">:</span> 17lai.site
<span class="token key atrule">img</span><span class="token punctuation">:</span> /medias/cover/hexo.jpg
<span class="token key atrule">top</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
<span class="token key atrule">cover</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
<span class="token key atrule">coverImg</span><span class="token punctuation">:</span> /medias/cover/hexo.jpg
<span class="token key atrule">password</span><span class="token punctuation">:</span> 8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92
<span class="token key atrule">toc</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>
<span class="token key atrule">mathjax</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>
<span class="token key atrule">summary</span><span class="token punctuation">:</span> 这是你自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要
<span class="token key atrule">categories</span><span class="token punctuation">:</span> Hexo
<span class="token key atrule">keywords</span><span class="token punctuation">:</span> Hexo GitHub blog
<span class="token key atrule">tags</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> Hexo
  <span class="token punctuation">-</span> Blog
  <span class="token punctuation">-</span> GitHub
<span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="新建文章模板修改"><a href="#新建文章模板修改" class="headerlink" title="新建文章模板修改"></a>新建文章模板修改</h3><p>首先为了新建文章方便，我们可以修改一下文章模板，建议将<code>/scaffolds/post.md</code>修改为如下代码：</p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span>
<span class="token key atrule">title</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">{</span> title <span class="token punctuation">}</span><span class="token punctuation">}</span>
<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">{</span> date <span class="token punctuation">}</span><span class="token punctuation">}</span>
<span class="token key atrule">author</span><span class="token punctuation">:</span> 
<span class="token key atrule">img</span><span class="token punctuation">:</span> 
<span class="token key atrule">coverImg</span><span class="token punctuation">:</span> 
<span class="token key atrule">top</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>
<span class="token key atrule">cover</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>
<span class="token key atrule">toc</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
<span class="token key atrule">mathjax</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>
<span class="token key atrule">password</span><span class="token punctuation">:</span>
<span class="token key atrule">summary</span><span class="token punctuation">:</span>
<span class="token key atrule">tags</span><span class="token punctuation">:</span>
<span class="token key atrule">categories</span><span class="token punctuation">:</span>
<span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>这样新建文章后 一些<code>Front-matter</code>参数不用你自己补充了，修改对应信息就可以了。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>来源: 夜法之书<br>文章作者: 夜法之书<br>文章链接: <a href="https://blog.17lai.site/posts/40300608/#%E6%96%B0%E5%BB%BA404%E9%A1%B5">https://blog.17lai.site/posts/40300608/#%E6%96%B0%E5%BB%BA404%E9%A1%B5</a></p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>教程</tag>
        <tag>hexo</tag>
        <tag>blog</tag>
      </tags>
  </entry>
  <entry>
    <title>如何在Ubuntu里安装Docker同时为 Docker 安装图形化操作界面</title>
    <url>/2022/08/26/%E5%A6%82%E4%BD%95%E5%9C%A8Ubuntu%E9%87%8C%E5%AE%89%E8%A3%85Docker/</url>
    <content><![CDATA[<h1 id="如何在Ubuntu里安装Docker同时为-Docker-安装图形化操作界面-Portainer"><a href="#如何在Ubuntu里安装Docker同时为-Docker-安装图形化操作界面-Portainer" class="headerlink" title="如何在Ubuntu里安装Docker同时为 Docker 安装图形化操作界面 Portainer"></a>如何在Ubuntu里安装Docker同时为 Docker 安装图形化操作界面 Portainer</h1><h2 id="安装Docker"><a href="#安装Docker" class="headerlink" title="安装Docker"></a>安装Docker</h2><h3 id="1-更新-apt-工具及索引，以支持-https-存储库"><a href="#1-更新-apt-工具及索引，以支持-https-存储库" class="headerlink" title="1.更新 apt 工具及索引，以支持 https 存储库"></a>1.<strong>更新 apt 工具及索引，以支持 https 存储库</strong></h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> update<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> <span class="token punctuation">\</span>
    ca-certificates <span class="token punctuation">\</span>
    <span class="token function">curl</span> <span class="token punctuation">\</span>
    gnupg <span class="token punctuation">\</span>
    lsb-release<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="2-添加-Docker-官方-GPG-密钥（用于签名-x2F-验证、加密-x2F-解密）"><a href="#2-添加-Docker-官方-GPG-密钥（用于签名-x2F-验证、加密-x2F-解密）" class="headerlink" title="2.添加 Docker 官方 GPG 密钥（用于签名/验证、加密/解密）"></a>2.<strong>添加 Docker 官方 GPG 密钥（用于签名/验证、加密/解密）</strong></h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> <span class="token parameter variable">-fsSL</span> https://download.docker.com/linux/ubuntu/gpg <span class="token operator">|</span> <span class="token function">sudo</span> gpg <span class="token parameter variable">--dearmor</span> <span class="token parameter variable">-o</span> /usr/share/keyrings/docker-archive-keyring.gpg<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>



<h3 id="3-设置-stable-版稳定存储库（区别于夜间版-x2F-测试版-nightly-x2F-test-）"><a href="#3-设置-stable-版稳定存储库（区别于夜间版-x2F-测试版-nightly-x2F-test-）" class="headerlink" title="3.设置 stable 版稳定存储库（区别于夜间版/测试版 nightly / test ）"></a>3.<strong>设置 stable 版稳定存储库（区别于夜间版/测试版 nightly / test ）</strong></h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token punctuation">\</span>
  <span class="token string">"deb [arch=<span class="token variable"><span class="token variable">$(</span>dpkg --print-architecture<span class="token variable">)</span></span> signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu \
  <span class="token variable"><span class="token variable">$(</span>lsb_release <span class="token parameter variable">-cs</span><span class="token variable">)</span></span> stable"</span> <span class="token operator">|</span> <span class="token function">sudo</span> <span class="token function">tee</span> /etc/apt/sources.list.d/docker.list <span class="token operator">&gt;</span> /dev/null<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>



<h3 id="4-更新-apt-工具及索引，并安装-Docker"><a href="#4-更新-apt-工具及索引，并安装-Docker" class="headerlink" title="4.更新 apt 工具及索引，并安装 Docker"></a>4.<strong>更新 apt 工具及索引，并安装 Docker</strong></h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> update

<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> docker-ce docker-ce-cli containerd.io<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p><strong>验证 Docker Engine 是否正确安装（显示 “Hello from Docker!” 即为成功安装）</strong></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">docker</span> run hello-world<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h2 id="安装Portainer"><a href="#安装Portainer" class="headerlink" title="安装Portainer"></a>安装Portainer</h2><h3 id="1-创建-Portainer-Server-存储数据库的卷"><a href="#1-创建-Portainer-Server-存储数据库的卷" class="headerlink" title="1.创建 Portainer Server 存储数据库的卷"></a>1.<strong>创建 Portainer Server 存储数据库的卷</strong></h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">docker</span> volume create portainer_data<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>​    </p>
<h3 id="2-下载并安装-Portainer-Server-容器"><a href="#2-下载并安装-Portainer-Server-容器" class="headerlink" title="2.下载并安装 Portainer Server 容器"></a><strong>2.下载并安装 Portainer Server 容器</strong></h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">-p</span> <span class="token number">8000</span>:8000 <span class="token parameter variable">-p</span> <span class="token number">9443</span>:9443 <span class="token parameter variable">--name</span> portainer <span class="token punctuation">\</span>
    <span class="token parameter variable">--restart</span><span class="token operator">=</span>always <span class="token punctuation">\</span>
    <span class="token parameter variable">-v</span> /var/run/docker.sock:/var/run/docker.sock <span class="token punctuation">\</span>
    <span class="token parameter variable">-v</span> portainer_data:/data <span class="token punctuation">\</span>
    portainer/portainer-ce:latest<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h3 id="3-查看-Docker-容器状态（NAMES-标签出现-portainer-x2F-portainer-ce-则成功运行）"><a href="#3-查看-Docker-容器状态（NAMES-标签出现-portainer-x2F-portainer-ce-则成功运行）" class="headerlink" title="3.查看 Docker 容器状态（NAMES 标签出现 portainer/portainer-ce 则成功运行）"></a>3.<strong>查看 Docker 容器状态（NAMES 标签出现 portainer/portainer-ce 则成功运行）</strong></h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">docker</span> <span class="token function">ps</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>



<h3 id="4-使用-Ubuntu-自带的火狐浏览器访问（https-127-0-0-1-9443-）"><a href="#4-使用-Ubuntu-自带的火狐浏览器访问（https-127-0-0-1-9443-）" class="headerlink" title="4.使用 Ubuntu 自带的火狐浏览器访问（https://127.0.0.1:9443/）"></a>4.<strong>使用 Ubuntu 自带的火狐浏览器访问（<a href="https://127.0.0.1:9443/%EF%BC%89">https://127.0.0.1:9443/）</a></strong></h3><p><strong>或使用局域网内另一台计算机/手机的浏览器访问（https://服务器的IP:9443/）</strong></p>
<h3 id="5-对-Portainer-初始设置"><a href="#5-对-Portainer-初始设置" class="headerlink" title="5.对 Portainer 初始设置"></a>5.<strong>对 Portainer 初始设置</strong></h3><p>设置用户名及密码（8位字符或数字），点击 Get Started，载入后点击 local 即可</p>
]]></content>
      <categories>
        <category>服务器</category>
        <category>Linux</category>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>教程</tag>
        <tag>Ubuntu</tag>
        <tag>Portainer</tag>
      </tags>
  </entry>
  <entry>
    <title>如何备份和恢复WordPress网站</title>
    <url>/2022/08/30/%E5%A6%82%E4%BD%95%E5%A4%87%E4%BB%BD%E5%92%8C%E6%81%A2%E5%A4%8DWordPress%E7%BD%91%E7%AB%99/</url>
    <content><![CDATA[<h1 id="如何备份和恢复WordPress网站"><a href="#如何备份和恢复WordPress网站" class="headerlink" title="如何备份和恢复WordPress网站"></a>如何备份和恢复WordPress网站</h1><p>介绍一个非常简单的迁移网站备份和恢复的方法。</p>
<p>直接在网站里安装一个插件WPvivid Backup</p>
<p>WPvivid Backup 插件提供备份、迁移和暂存站点等基本功能，并且正在集成越来越多的优雅功能，例如未用图像清理器等。</p>
<p>在子目录中创建一个过渡站点，用以安全地测试 WordPress、插件、主题和网站更改。</p>
<p>克隆WP站点并将其迁移到新主机（新域名），安排备份，将备份发送到领先的远程存储，在备份和迁移之前清理未使用的图像。一站式备份和迁移插件。</p>
<h2 id="WPvivid-Backup-for-MainWP"><a href="#WPvivid-Backup-for-MainWP" class="headerlink" title="WPvivid Backup for MainWP"></a>WPvivid Backup for MainWP</h2><p><a href="https://wpvivid.com/wpvivid-backup-for-mainwp">WPvivid Backup for MainWP</a>现已推出，可供下载<br>此插件允许您直接从 MainWP 仪表板为所有子站点设置和控制 WPvivid Backup Free 或 Pro。</p>
<p>点击下载**<a href="https://wordpress.org/plugins/wpvivid-backup-mainwp/">WPvivid Backup for MainWP</a>**</p>
<h2 id="具体使用"><a href="#具体使用" class="headerlink" title="具体使用"></a>具体使用</h2><p>安装后点击插件</p>
<p><img src="https://tutujanjan.world/wp-content/uploads/2022/08/image-1024x707.png" alt="img">本机储存目录会显示在上面</p>
<p>点击立即备份就会在目录生成备份文件</p>
<p>比我的情况备份好以后前往服务器上的/home/wwwroot/wordpress/wp-content/wpvividbackups</p>
<p><img src="https://tutujanjan.world/wp-content/uploads/2022/08/image-1.png" alt="img"></p>
<p>会看到有两个压缩包</p>
<p>迁移的情况下把这两个东西复制到本地电脑保存。</p>
<p>然后再复制到新服务器安装好wordpress安装好插件然后在相同的地方，进行恢复就OK了</p>
<p>是不是很简单！</p>
<p>还有就是迁移的时候记得备份好nginx/conf的nginx.conf配置文件</p>
<p>还有ssl证书。</p>
]]></content>
      <categories>
        <category>服务器</category>
        <category>Linux</category>
        <category>网站</category>
      </categories>
      <tags>
        <tag>教程</tag>
        <tag>Ubuntu</tag>
        <tag>WordPress</tag>
      </tags>
  </entry>
  <entry>
    <title>如何搭建一个wordpress网站</title>
    <url>/2022/08/30/%E5%A6%82%E4%BD%95%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AAwordpress%E7%BD%91%E7%AB%99/</url>
    <content><![CDATA[<h1 id="如何搭建一个wordpress网站"><a href="#如何搭建一个wordpress网站" class="headerlink" title="如何搭建一个wordpress网站"></a>如何搭建一个wordpress网站</h1><p>最近白嫖了一个云服务器。开始尝试自己搭建一个博客！</p>
<h2 id="1-准备工作"><a href="#1-准备工作" class="headerlink" title="1.准备工作"></a>1.准备工作</h2><ol>
<li>一台服务器（我用的 Ubuntu 22.04.1 LTS）</li>
<li>一个自己的域名（我用的<a href="https://account.godaddy.com/">godaddy</a> ）</li>
</ol>
<h2 id="2-开始部署"><a href="#2-开始部署" class="headerlink" title="2.开始部署"></a>2.开始部署</h2><h3 id="2-1部署LNMP一键安装包"><a href="#2-1部署LNMP一键安装包" class="headerlink" title="2.1部署LNMP一键安装包"></a>2.1部署LNMP一键安装包</h3><p><strong>LNMP一键安装包是什么?</strong></p>
<p>LNMP一键安装包是一个用Linux Shell编写的可以为CentOS/RHEL/Fedora/Debian/Ubuntu/Raspbian/Deepin/Alibaba/Amazon/Mint/Oracle/Rocky/Alma/Kali/UOS/银河麒麟/openEuler/Anolis OS Linux VPS或独立主机安装LNMP(Nginx/MySQL/PHP)、LNMPA(Nginx/MySQL/PHP/Apache)、LAMP(Apache/MySQL/PHP)生产环境的Shell程序。</p>
<p><strong>我们为什么需要它?</strong><br>编译安装需要输入大量的命令，如果是配置生产环境需要耗费大量的时间。<br>不会Linux的站长或Linux新手想使用Linux作为生产环境……</p>
<p>哎！简单说过来就是安装网站需要的环境吧！〒▽〒</p>
<p>直接访问网站找最新的安装代码</p>
<p><a href="https://lnmp.org/install.html">https://lnmp.org/install.html</a></p>
<p>比如；</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">wget</span> http://soft.vpser.net/lnmp/lnmp1.9.tar.gz <span class="token parameter variable">-cO</span> lnmp1.9.tar.gz <span class="token operator">&amp;&amp;</span> <span class="token function">tar</span> zxf lnmp1.9.tar.gz <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">cd</span> lnmp1.9 <span class="token operator">&amp;&amp;</span> ./install.sh lnmp<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>记得启动Root权限安装！</p>
<p>运行上述命令后，首先会提示安装 MySQL数据库。</p>
<p>我选择4.的5.7.22版本。</p>
<p>输入前面的序号，完成后会让你输入MySQL的密码。</p>
<p>如果不输入则会默认生成一个密码(形式如lnmp.org#随机数字)，如果输入有错误，可以按住Ctrl再按Backspace进行删除，输入后回车进入下一步。</p>
<p>询问是否需要启用MySQL InnoDB，InnoDB引擎默认为开启，一般建议开启，直接回车或输入 y ，如果确定确实不需要该引擎可以输入 n，(MySQL 5.7+版本无法关闭InnoDB),输入完成，回车进入下一步。</p>
<p>然后会询问我们安装PHP</p>
<p><img src="/%5Cimages%5Cwenzhangtu%5C20220830%5Clnmp1.9-install-4.png"></p>
<p>我会选择10的7.4.28</p>
<p>输入要选择的PHP版本的序号，回车进入下一步，选择是否安装内存优化：</p>
<p><img src="/%5Cimages%5Cwenzhangtu%5C20220830%5Clnmp1.9-install-5.png"></p>
<p>可以选择不安装、Jemalloc或TCmalloc，输入对应序号回车，直接回车为默认为不安装。</p>
<p>提示”Press any key to install…or Press Ctrl+c to cancel”后，按回车键确认开始安装。<br>LNMP脚本就会自动安装编译Nginx、MySQL、PHP、phpMyAdmin等软件及相关的组件。</p>
<p>安装时间可能会几十分钟到几个小时不等，主要是机器的配置网速等原因会造成影响。</p>
<p>安装完成后<br>如果显示Nginx: OK，MySQL: OK，PHP: OK</p>
<p>并且Nginx、MySQL、PHP都是running，80和3306端口都存在，并提示安装使用的时间及Install lnmp V1.9 completed! enjoy it.的话，说明已经安装成功。</p>
<p><img src="/%5Cimages%5Cwenzhangtu%5C20220830%5C6.png"></p>
<h3 id="2-2配置Nginx"><a href="#2-2配置Nginx" class="headerlink" title="2.2配置Nginx"></a>2.2配置Nginx</h3><p>安装好后</p>
<p>接下来可以用浏览器打开<code>http://ip</code>，就可以看到一个Nginx页面。说明安装成功！</p>
<h3 id="2-3安装WordPress"><a href="#2-3安装WordPress" class="headerlink" title="2.3安装WordPress"></a>2.3安装WordPress</h3><p>安装了LNMP，有了环境。就可以安装WordPress了。</p>
<p>方法很简单。</p>
<p><strong>第一步：将WordPress安装包下载并解压到<code>/home/wwwroot</code>中，使用以下命令即可。</strong></p>
<p>wget <a href="https://cn.wordpress.org/latest-zh_CN.zip">https://cn.wordpress.org/latest-zh_CN.zip</a> &amp;&amp; unzip latest-zh_CN.zip -d /home/wwwroot</p>
<p><strong>第二步：登录MySQL，密码是之前安装过程中你输入的，创建一个wordpress的表，完成后退出即可。</strong></p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql <span class="token operator">-</span>u root <span class="token operator">-</span>p
Enter password:
MySQL <span class="token operator">&gt;</span> <span class="token keyword">create</span> <span class="token keyword">database</span> wordpress<span class="token punctuation">;</span>
MySQL <span class="token operator">&gt;</span> <span class="token keyword">exit</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>第三步：使用vim来修改nginx配置文件，使用如下命令即可进入vim的编辑界面，然后先按i，进入编辑模式，然后编辑好了以后，按esc，再按shift+;，最后按wq即可。其中esc表示退出编辑模式，剩余操作是保存退出的意思。</strong></p>
<pre class="line-numbers language-none"><code class="language-none">vim /usr/local/nginx/conf/nginx.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>你会看到如下图显示的内容:</p>
<p><img src="/%5Cimages%5Cwenzhangtu%5C20220830%5C7.png"></p>
<p>上图说明安装好的nginx将网站的根目录设置为了/home/wwwroot/default，这个可以根据你的喜欢来进行更改。我更改成了 </p>
<p>/home/wwwroot/wordpress;</p>
<p>然后使用<code>nginx -t</code>来测试配置是否正确。如果出现ok或者successful字样，说明配置成功。</p>
<p>配置正确后，重新加载配置文件使配置生效：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nginx <span class="token parameter variable">-s</span> reload *// 使配置生效*<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>重启nginx，用以下命令：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">service</span> nginx restart // 重启<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>最后修改wordpress目录权限即可。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /home/wwwroot <span class="token operator">&amp;&amp;</span> <span class="token function">chown</span> <span class="token parameter variable">-R</span> www wordpress/ <span class="token operator">&amp;&amp;</span> <span class="token function">chgrp</span> <span class="token parameter variable">-R</span> www wordpress/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>用浏览器打开<code>http://ip/wp-admin/setup-config.php</code>，你就可以进行安装了。</p>
<p>数据库名 wordpress</p>
<p>用户名 root</p>
<p>`密码输入设置的数据库密码</p>
<p>主机 127.0.0.1</p>
<p>表前缀 wp_</p>
<p>然后提交就可以登录后台了。</p>
<p><img src="/%5Cimages%5Cwenzhangtu%5C20220830%5C8.png"></p>
<p>这个时候你可以在浏览器访问<code>http://ip</code>，就可以看到你搭建的网站了。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>创建好网站后，还有很多优化，安装插件，主题套用。</p>
<p>后面会先介绍怎么进行网站的迁移备份和恢复。</p>
]]></content>
      <categories>
        <category>服务器</category>
        <category>Linux</category>
        <category>网站</category>
      </categories>
      <tags>
        <tag>教程</tag>
        <tag>Ubuntu</tag>
        <tag>WordPress</tag>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>如何通过Linux云服务器来搭建Minecraft服务器</title>
    <url>/2022/08/23/%E5%A6%82%E4%BD%95%E9%80%9A%E8%BF%87Linux%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%9D%A5%E6%90%AD%E5%BB%BAMinecraft%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
    <content><![CDATA[<h1 id="如何通过Linux云服务器来搭建Minecraft服务器"><a href="#如何通过Linux云服务器来搭建Minecraft服务器" class="headerlink" title="如何通过Linux云服务器来搭建Minecraft服务器"></a>如何通过Linux云服务器来搭建Minecraft服务器</h1><p>最近开始折腾云服务器，开始学习一下Linux相关的知识，就尝试用Linux来搭建一个Minecraft的服务器。具体方法如下⬇</p>
<h2 id="1-准备工作"><a href="#1-准备工作" class="headerlink" title="1 准备工作"></a>1 准备工作</h2><p>Linux 系统，*这次是用Centos来做操作。</p>
<h3 id="1-1-安装文件传输工具"><a href="#1-1-安装文件传输工具" class="headerlink" title="1.1 安装文件传输工具"></a>1.1 安装文件传输工具</h3><p>为了方便传文件到服务器上，这里先装一个远程传输工具。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum <span class="token parameter variable">-y</span> <span class="token function">install</span> lrzsz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h2 id="1-2-安装java"><a href="#1-2-安装java" class="headerlink" title="1.2 安装java"></a>1.2 安装java</h2><p>Minecraft服务端也需要jre才能运行，这里有两个安装方法（选择一种）：</p>
<h3 id="1-2-1-官网下载"><a href="#1-2-1-官网下载" class="headerlink" title="1.2.1 官网下载"></a>1.2.1 官网下载</h3><p>去官网下载（<a href="https://www.oracle.com/java/technologies/javase/jdk17-archive-downloads.html">Java17</a>）Linux x64的gz包，得到jdk-17.0.4.1_linux-x64_bin.tar.gz文件（不知道为什么用Java18Minecraft服务端会报错所以用了Java17）。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">rz	<span class="token comment">#将下载好的gz文件上传到服务器</span>

<span class="token comment"># 创建安装目录</span>
<span class="token function">mkdir</span> /usr/local/java/

<span class="token comment"># 解压当前目录下的JDK压缩文件(版本不一样文件名也会不一样，善用tab自动补全)</span>
<span class="token function">tar</span> <span class="token parameter variable">-zxvf</span> jdk-17.0.4.1_linux-x64_bin.tar.gz <span class="token parameter variable">-C</span> /usr/local/java/

<span class="token comment"># 方便后面配置环境，改一下文件名</span>
<span class="token function">mv</span> /usr/usr/local/java/jdk-17.0.4.1_linux-x64_bin.tar.gz /usr/usr/local/java/jdk1.7.0

<span class="token comment"># 设置环境变量(安装 VIM 输入 yum -y install vim)</span>
<span class="token function">vim</span> /etc/profile
<span class="token comment"># 在末尾添加对应变量</span>
滚动光标到末尾 按下 键盘上的 I 键,切换至插入模式
输入这几串内容后 按ESC退出插入模式 
然后按下 ： 输入 wq 并回车保存

<span class="token builtin class-name">export</span> <span class="token assign-left variable">JAVA_HOME</span><span class="token operator">=</span>/usr/local/java/jdk1.7.0
<span class="token builtin class-name">export</span> <span class="token assign-left variable">JRE_HOME</span><span class="token operator">=</span><span class="token variable">${JAVA_HOME}</span>/jre
<span class="token builtin class-name">export</span> <span class="token assign-left variable">CLASSPATH</span><span class="token operator">=</span>.:<span class="token variable">${JAVA_HOME}</span>/lib:<span class="token variable">${JRE_HOME}</span>/lib
<span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token variable">${JAVA_HOME}</span>/bin:<span class="token environment constant">$PATH</span>

<span class="token comment"># 应用修改后的环境变量</span>
<span class="token builtin class-name">source</span> /etc/profile

<span class="token comment"># 软链接程序到环境变量中</span>
<span class="token function">ln</span> <span class="token parameter variable">-s</span> /usr/local/java/jdk1.8.0/bin/java /usr/bin/java

<span class="token comment"># 测试是否安装正常，显示 java version "17.0.4.1" 则为正常</span>
<span class="token function">java</span> <span class="token parameter variable">-version</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="1-2-2-或yum安装"><a href="#1-2-2-或yum安装" class="headerlink" title="1.2.2 或yum安装"></a>1.2.2 或yum安装</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> yum <span class="token function">install</span> java-1.8.0-openjdk<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>有询问输入y即可</p>
<h2 id="1-3-安装screen"><a href="#1-3-安装screen" class="headerlink" title="1.3 安装screen"></a>1.3 安装screen</h2><p>安装screen，后面开服时会用到。使用screen可以让服务器进程在后台运行，而不会因为远程连接的断开而停止进程。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># RedHat/CentOS</span>
yum <span class="token function">install</span> <span class="token parameter variable">-y</span> <span class="token function">screen</span>

<span class="token comment"># Ubuntu/Debian</span>
<span class="token function">apt</span> <span class="token function">install</span> <span class="token function">screen</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="1-4-配置防火墙"><a href="#1-4-配置防火墙" class="headerlink" title="1.4 配置防火墙"></a>1.4 配置防火墙</h2><p>一定要在root用户中操作。</p>
<p>这步很关键，开服之后连接不到服务器，很可能就是因为防火墙没配置好！</p>
<p>添加一个<strong>端口</strong>（25565默认）</p>
<pre class="line-numbers language-text" data-language="text"><code class="language-text">firewall-cmd --zone=public --add-port=25565/tcp --permanent<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>然后 重启防火墙</p>
<pre class="line-numbers language-text" data-language="text"><code class="language-text">firewall-cmd --reload<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>查看端口状态</p>
<pre class="line-numbers language-text" data-language="text"><code class="language-text">firewall-cmd --zone= public --query-port=25565/tcp<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>在网页端的管理控制台 安全 防火墙 右上添加规则</p>
<p>TCP 25565</p>
<h2 id="1-5-创建用户"><a href="#1-5-创建用户" class="headerlink" title="1.5 创建用户"></a>1.5 创建用户</h2><p>不建议使用root系统进行后面的操作，接下来为Minecraft创建一个专门的用户。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">useradd</span> <span class="token parameter variable">-m</span> Minecraft	<span class="token comment"># 新建一个名为Minecraft的用户</span>
<span class="token function">passwd</span> Minecraft		<span class="token comment"># 为用户Minecraft设置密码</span>
<span class="token function">su</span> - Minecraft			<span class="token comment"># 切换至新建的Minecraft用户。改成root，可以切换回root用户</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h1 id="2-Minecraft服务端"><a href="#2-Minecraft服务端" class="headerlink" title="2.Minecraft服务端"></a>2.Minecraft服务端</h1><p>给MC服务端创建一个文件夹</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> ~
<span class="token function">mkdir</span> MinecraftServer	<span class="token comment">#创建文件夹</span>
<span class="token builtin class-name">cd</span> MinecraftServer		<span class="token comment">#进入文件夹</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h2 id="2-1-获取服务端"><a href="#2-1-获取服务端" class="headerlink" title="2.1 获取服务端"></a>2.1 获取服务端</h2><p>MC目前主流的服务端分很多种，简单可以分为三类：</p>
<p>①原版纯净：官网直接下服务端，不能装mod不能装插件 <a href="https://www.minecraft.net/zh-hans/download/server">点击下载</a></p>
<p>②forge服务端：Mod服，只能装Mod，不能装插件</p>
<p>（<a href="http://files.minecraftforge.net/%EF%BC%89">http://files.minecraftforge.net/）</a></p>
<p>③Craftbukkit、Spigot服务端：插件服，只能装插件，不能装Mod</p>
<p>④CatSetver服务端：国人开发的，MOD+插件服，白火现在在用。</p>
<p>以上服务端，按需要选择一个，到对应官网下载。（或直接下载别人配置好的懒人服务端，别人配置好的服务端，可视情况跳至2.3步骤。）</p>
<p>你可以在自己的电脑上下载好服务端，然后利用Xshell等远程终端的lrzsz插件，传输到服务器上。</p>
<p>用cd MinecraftServer指令，进入刚才创建的MinecraftServer内。输入指令：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">rz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>下载好后执行下面这一句。这里分别以Forge和CatServer举例。不论你用那种服务端，你只需要把-jar后面的名字改成你服务端文件的名字即可。善用Tab补全代码，避免输错。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#Forge服</span>
<span class="token function">java</span> <span class="token parameter variable">-jar</span> forge-1.12.2-14.23.4.2705-installer.jar <span class="token parameter variable">-nogui</span> <span class="token parameter variable">-installServer</span>
<span class="token comment">#CatServer服</span>
<span class="token function">java</span> <span class="token parameter variable">-Xmx2G</span> <span class="token parameter variable">-jar</span> CatServer-2a9163f-universal.jar
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>这一步其实是在安装服务端，还要在下载一会服务端资源，网络比较慢。有意思的是，其中CatServer服端安装服务端的指令，和后面正真运行服务端的指令是一样的。（Forge则是不同的）</p>
<p>如果提示下载失败了，或部分资源下载超时了，就再重执行一次上面的forge-*-installer.jar</p>
<p>现在服务器资源都正确下载了，执行以下代码：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#Forge服</span>
<span class="token function">java</span> <span class="token parameter variable">-Xmx1G</span> <span class="token parameter variable">-jar</span> forge-1.12.2-14.23.4.2705-universal.jar
<span class="token comment">#CatServer服</span>
<span class="token function">java</span> <span class="token parameter variable">-Xmx2G</span> <span class="token parameter variable">-jar</span> CatServer-2a9163f-universal.jar
<span class="token comment">#官服（如果您想使用图形用户界面启动服务器，您可以省略“nogui”部分。）</span>
<span class="token function">java</span> <span class="token parameter variable">-Xmx1024M</span> <span class="token parameter variable">-Xms1024M</span> <span class="token parameter variable">-jar</span> minecraft_server.1.19.2.jar nogui<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="2-2-同意协议"><a href="#2-2-同意协议" class="headerlink" title="2.2 同意协议"></a>2.2 同意协议</h2><p>首次运行必定失败，会提示你需要同意协议。这时我们输入<code>ls</code>就能看到目录下多了一个eula.txt。我们需要修改eula文件同意协议，才能启动。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> eula.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>将eula=false改成eula=true即可。</p>
<p>然后按esc，输入<code>:wq</code>保存退出。</p>
<p>*其实官服这个时候就可以再次运行</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">java</span> <span class="token parameter variable">-Xmx1024M</span> <span class="token parameter variable">-Xms1024M</span> <span class="token parameter variable">-jar</span> minecraft_server.1.19.2.jar nogui<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>就可以成功开服了。</p>
<h2 id="2-3-配置文件"><a href="#2-3-配置文件" class="headerlink" title="2.3 配置文件"></a>2.3 配置文件</h2><p>为了方便以后开服，我们创建一个startServer.sh文件。（别人配置好的服务端可能已经创建过了）</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> startServer.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>然后i写入</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#Forge服</span>
<span class="token function">java</span> <span class="token parameter variable">-Xmx1G</span> <span class="token parameter variable">-jar</span> forge-1.12.2-14.23.4.2705-universal.jar
<span class="token comment">#CatServer服</span>
<span class="token function">java</span> <span class="token parameter variable">-Xmx2G</span> <span class="token parameter variable">-jar</span> CatServer-2a9163f-universal.jar
<span class="token comment">#官服（如果您想使用图形用户界面启动服务器，您可以省略“nogui”部分。）</span>
<span class="token function">java</span> <span class="token parameter variable">-Xmx1024M</span> <span class="token parameter variable">-Xms1024M</span> <span class="token parameter variable">-jar</span> minecraft_server.1.19.2.jar nogui<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>按esc，输入:wq保存退出。</p>
<p>其实就是把刚才我们运行服务器的指令，写进了shell中，以后省的敲指令了，直接运行这个shell即可。</p>
<p><em>这和windows的bat批处理性质相似，在windoes中开服，也是把开服的指令写进一个bat中，每次运行bat就省的敲指令了。</em></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 给start.sh执行权限</span>
<span class="token function">chmod</span> <span class="token number">777</span> startServer.sh

<span class="token comment"># 执行start.sh即可开服</span>
./startServer.sh	

<span class="token comment"># 控制台不再跳新的信息时，说明开服成功了</span>
<span class="token comment"># 我们先结束服务器，完成服务器配置</span>
stop<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>首次成功开服后，会产生一个server.properties文件，是服务器的配置文件。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> server.properties	<span class="token comment">#修改配置文件</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>其中online-mode=true是检测正版登录用户，true是只允许正版玩家进入可以使用，false则允许离线进入。</p>
<p>更多配置参考这个文件。</p>
<p><a href="https://minecraft-zh.gamepedia.com/index.php?title=Server.properties&amp;variant=zh">https://minecraft-zh.gamepedia.com/index.php?title=Server.properties&amp;variant=zh</a></p>
<h2 id="2-4-正式开服"><a href="#2-4-正式开服" class="headerlink" title="2.4 正式开服"></a>2.4 正式开服</h2><p>创建一个名为MinecraftServer的screen，可以让服务器在后台运行，断开远程连接也不终止进程。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">screen</span> <span class="token parameter variable">-S</span> MinecraftServer<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>启动服务器</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./start.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>最后你只要看到有Type “/help” for help，就说明你的服务器已经跑起来了。</p>
<p>然后按住Ctrl + A +D ，将screen加入后台运行</p>
<p>当你需要回到这个sreen页面时，使用如下指令。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">screen</span> <span class="token parameter variable">-ls</span>	<span class="token comment"># 查看screen，记下MinecraftServer的编号</span>
<span class="token function">screen</span> <span class="token parameter variable">-r</span> <span class="token operator">&lt;</span>MinecraftServer的编号<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>现在进游戏，输入自己服务器的ip加端口号25565就可以连上了。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>参考：</p>
<p><a href="https://zhuanlan.zhihu.com/p/55952581">MC云服务器搭建教程[非硬核]</a></p>
<p><a href="https://www.bilibili.com/read/cv1267747/">如何在Linux下搭建Minecraft服务器</a></p>
<p><a href="https://minecraft-zh.gamepedia.com/Server.properties?variant=zh">Minecraft Wiki:server.properties</a></p>
]]></content>
      <categories>
        <category>服务器</category>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>教程</tag>
        <tag>Minecraft</tag>
        <tag>游戏</tag>
      </tags>
  </entry>
  <entry>
    <title>如何通过docker-compose来安装WordPress</title>
    <url>/2022/09/01/%E5%A6%82%E4%BD%95%E9%80%9A%E8%BF%87docker-compose%E6%9D%A5%E5%AE%89%E8%A3%85WordPress/</url>
    <content><![CDATA[<h1 id="如何通过docker-compose来安装WordPress"><a href="#如何通过docker-compose来安装WordPress" class="headerlink" title="如何通过docker-compose来安装WordPress"></a>如何通过docker-compose来安装WordPress</h1><p>这次我在我的ARM64  22.04 Server Macbook虚拟机上进行了安装。</p>
<p>以下全在Root用户下操作。</p>
<h2 id="1-安装docker-compose"><a href="#1-安装docker-compose" class="headerlink" title="1.安装docker-compose"></a>1.安装docker-compose</h2><p>第一步更新库</p>
<pre class="line-numbers language-none"><code class="language-none">apt updata<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>第二步安装Python3</p>
<pre class="line-numbers language-none"><code class="language-none">apt install python3-pip -y<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>第三步安装docker-compose</p>
<pre class="line-numbers language-none"><code class="language-none">pip3 install docker-compose<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>第四步创建一个wordpress文件夹并进去目录并创建docker-compose.yml文件</p>
<pre class="line-numbers language-none"><code class="language-none">mkdir wordpress
cd wordpress
vi docker-compose.yml<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>第五步编辑docker-compose.yml输入以下配置</p>
<pre class="line-numbers language-none"><code class="language-none">version: '3.3'

services:
   db:
     image: mariadb:10.5.8                #Mac M1用db代替吧
     volumes:
       - db_data:/var/lib/mysql
     restart: always
     environment:
       MYSQL_ROOT_PASSWORD: somewordpress
       MYSQL_DATABASE: wordpress
       MYSQL_USER: wordpress
       MYSQL_PASSWORD: wordpress

   wordpress:
     depends_on:
       - db
     image: wordpress:latest
     ports:
       - "8082:80"              #端口我的会冲突所以映射到8082端口
     restart: always
     environment:
       WORDPRESS_DB_HOST: db:3306
       WORDPRESS_DB_USER: wordpress
       WORDPRESS_DB_PASSWORD: wordpress
       WORDPRESS_DB_NAME: wordpress

volumes:
  db_data: {}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>第六步开始部署</p>
<pre class="line-numbers language-none"><code class="language-none">docker-compose up<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>搞定，最后浏览器输入</p>
<p>localhost:8082</p>
<p>开始安装WordPress</p>
]]></content>
      <categories>
        <category>服务器</category>
        <category>Linux</category>
        <category>worepress</category>
      </categories>
      <tags>
        <tag>教程</tag>
        <tag>Ubuntu</tag>
        <tag>docker-compose</tag>
      </tags>
  </entry>
  <entry>
    <title>让Windows和Mac无缝共用一套键鼠和剪贴板的方法</title>
    <url>/2022/09/01/%E8%AE%A9Windows%E5%92%8CMac%E6%97%A0%E7%BC%9D%E5%85%B1%E7%94%A8%E4%B8%80%E5%A5%97%E9%94%AE%E9%BC%A0%E5%92%8C%E5%89%AA%E8%B4%B4%E6%9D%BF%E7%9A%84%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h1 id="让Windows和Mac无缝共用一套键鼠和剪贴板的方法"><a href="#让Windows和Mac无缝共用一套键鼠和剪贴板的方法" class="headerlink" title="让Windows和Mac无缝共用一套键鼠和剪贴板的方法"></a>让Windows和Mac无缝共用一套键鼠和剪贴板的方法</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>不知道大家又没有和我一样，同时拥有一台台式机Windows和Mac。每次我想同时操作两台电脑的时候，或者想把Mac当副屏幕的时候，我都需要单独操作两边的鼠标和键盘，感觉相当的麻烦。</p>
<p>虽然以前买了一个罗技的MX Master 3 可以满足需求，但是第一成本太高，还有一点就是你还得买个罗技的键盘，成本真的太高了，每次复制文件也是需要右键点击操作，非常的鸡肋。</p>
<p>有没有一个既免费，又方便好用的方案呢。</p>
<p>研究了半天，有了，而且非常流畅，体验下来也没什么延迟。直接感觉起飞(‘ω’)ノ</p>
<p>就是一个叫做<strong>ShareMouse</strong>的软件。听说Synergy也可以做到，但是需要付费直接PASS掉。</p>
<h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><h3 id="1-下载ShareMouse"><a href="#1-下载ShareMouse" class="headerlink" title="1.下载ShareMouse"></a>1.下载ShareMouse</h3><p><a href="https://www.sharemouse.com/download/">https://www.sharemouse.com/download/</a></p>
<p>这里分别在Windows和Mac上下载对应系统的软件</p>
<p><img src="https://tutujanjan.com/wp-content/uploads/2022/09/image-20220921214804615.png" alt="img"></p>
<h3 id="2-安装和设置"><a href="#2-安装和设置" class="headerlink" title="2.安装和设置"></a>2.安装和设置</h3><h4 id="2-1-Windows端设置"><a href="#2-1-Windows端设置" class="headerlink" title="2.1 Windows端设置"></a>2.1 Windows端设置</h4><p>分别在Windows和Mac上安装好了之后，Windows可以在右下角看到一个鼠标的图标</p>
<p><img src="https://tutujanjan.com/wp-content/uploads/2022/09/image-20220921214957796.png" alt="img"></p>
<p>然后右键它。</p>
<p><img src="https://tutujanjan.com/wp-content/uploads/2022/09/image-20220921215155806.png" alt="img"></p>
<p>选择Settings</p>
<p><img src="https://tutujanjan.com/wp-content/uploads/2022/09/image-20220921215720935.png" alt="img"></p>
<p>看到<img src="https://s.w.org/images/core/emoji/14.0.0/svg/2b06.svg" alt="⬆">图之后，选择Clients，这里我们配置一下Mac的IP地址</p>
<p>如果不知道是多少，可以在Mac相同的地方点击 Show local IP address进行查看</p>
<p>然后我们填入到②的位置。最后点击一下6555旁边的小电脑图标。</p>
<p>设置完成。</p>
<h3 id="2-2-Mac端设置"><a href="#2-2-Mac端设置" class="headerlink" title="2.2 Mac端设置"></a>2.2 Mac端设置</h3><p><img src="https://tutujanjan.com/wp-content/uploads/2022/09/%E6%88%AA%E5%B1%8F2022-09-21-22.01.02.png" alt="img"></p>
<p>还是一样上面任务栏我们可以看到一个鼠标的图标，点击它一下。</p>
<p>选择Settings</p>
<p><img src="https://tutujanjan.com/wp-content/uploads/2022/09/%E6%88%AA%E5%B1%8F2022-09-21-22.02.55-1024x945.png" alt="img"></p>
<p>然后一样点击选择Clients</p>
<p><img src="https://tutujanjan.com/wp-content/uploads/2022/09/%E6%88%AA%E5%B1%8F2022-09-21-22.04.40.png" alt="img"></p>
<p>这里我们填写Windows的IP地址</p>
<p>记住，是Windows的IP`地址不是Mac的。</p>
<p>和Windows的设置一样填入IP地址之后。最后点击一下6555旁边的小电脑图标。</p>
<h4 id="2-3配置桌面位置"><a href="#2-3配置桌面位置" class="headerlink" title="2.3配置桌面位置"></a>2.3配置桌面位置</h4><p><img src="https://tutujanjan.com/wp-content/uploads/2022/09/image-20220921221027583-1.png" alt="img"></p>
<p>右键任务栏的鼠标图标</p>
<p>选择 Monitor Manager</p>
<p><img src="https://tutujanjan.com/wp-content/uploads/2022/09/image-20220921221109897-1-1024x362.png" alt="img"></p>
<p>这里你可以配置对应的位置。</p>
<p>两台电脑一定要保持一致。</p>
<p><strong>好了，恭喜你完成了！撒花(‘ω’)ノ</strong></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>其实设置起来很简单，总结起来就是把各个端设置成对方的IP地址即可。</p>
<p>当然你还可以设置一个密码，在设置里的 Network里面 Security里打上勾然后输入密码。</p>
<p>两台电脑都要输入一样的密码设置。就可以了。</p>
<p>体验下来很流畅，拖动文件一步到位。很棒。嘿嘿嘿(;・∀・)</p>
]]></content>
      <categories>
        <category>教程</category>
        <category>好用的软件</category>
        <category>Windows</category>
      </categories>
      <tags>
        <tag>软件</tag>
        <tag>Mac</tag>
      </tags>
  </entry>
  <entry>
    <title>通过鼠标宏实现APEX抖枪压枪</title>
    <url>/2022/08/19/%E9%80%9A%E8%BF%87%E9%BC%A0%E6%A0%87%E5%AE%8F%E5%AE%9E%E7%8E%B0APEX%E6%8A%96%E6%9E%AA%E5%8E%8B%E6%9E%AA/</url>
    <content><![CDATA[<h1 id="通过鼠标宏实现APEX抖枪压枪"><a href="#通过鼠标宏实现APEX抖枪压枪" class="headerlink" title="通过鼠标宏实现APEX抖枪压枪"></a>通过鼠标宏实现APEX抖枪压枪</h1><p>我是一名APEX重度玩家，但是我很手残，压枪更是压不住。马枪都是家常便饭。其实APEX有一个机制，就是通过快速抖动鼠标可以做到压枪的效果，但是不可能一直抖吧，手根本就受不了。</p>
<p>有没有什么好的方法可以自动帮忙抖枪和压枪的吗，和朋友偶然在网上研究出来了一个方法。通过这个方法可以轻松抖枪和同时压枪，可以大大提高命中率，当然封号的话，后果自负。</p>
<h2 id="具体方法"><a href="#具体方法" class="headerlink" title="具体方法"></a>具体方法</h2><ol>
<li><p>下载 并打开 G HUB </p>
</li>
<li><p>打开软件➡点击激活配置文件➡随便点击一个应用➡设置成永久性配置</p>
</li>
<li><p>开始编辑脚本</p>
</li>
<li><p>输入以下</p>
<pre class="line-numbers language-lua" data-language="lua"><code class="language-lua"><span class="token keyword">function</span> <span class="token function">OnEvent</span><span class="token punctuation">(</span>event<span class="token punctuation">,</span> arg<span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>event <span class="token operator">==</span> <span class="token string">"PROFILE_ACTIVATED"</span><span class="token punctuation">)</span> <span class="token keyword">then</span>
        <span class="token function">EnablePrimaryMouseButtonEvents</span><span class="token punctuation">(</span><span class="token keyword">true</span><span class="token punctuation">)</span>
    <span class="token keyword">end</span>
    <span class="token keyword">if</span> <span class="token function">IsKeyLockOn</span><span class="token punctuation">(</span><span class="token string">"capslock"</span><span class="token punctuation">)</span><span class="token keyword">then</span> <span class="token operator">#</span>设置开启键位 我设置的切换为大写打开。
        <span class="token keyword">if</span> <span class="token punctuation">(</span>event <span class="token operator">==</span> <span class="token string">"MOUSE_BUTTON_PRESSED"</span> <span class="token keyword">and</span> arg <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">then</span>
          <span class="token keyword">if</span> <span class="token function">IsMouseButtonPressed</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token keyword">then</span>
            <span class="token keyword">repeat</span> 
            <span class="token function">MoveMouseRelative</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span>
            <span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>
            <span class="token function">MoveMouseRelative</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">)</span>
            <span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>
            <span class="token keyword">until</span> <span class="token keyword">not</span> <span class="token function">IsMouseButtonPressed</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
          <span class="token keyword">else</span>
            i<span class="token operator">=</span><span class="token number">0</span>
            <span class="token keyword">repeat</span>
            <span class="token function">MoveMouseRelative</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span>
            <span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>
            <span class="token function">MoveMouseRelative</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">4</span><span class="token operator">-</span>i<span class="token punctuation">)</span>
            <span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>
            i <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">3</span><span class="token operator">/</span><span class="token number">500</span>
            <span class="token keyword">until</span> <span class="token keyword">not</span> <span class="token function">IsMouseButtonPressed</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
            <span class="token keyword">end</span>
          <span class="token keyword">end</span>
        <span class="token keyword">end</span>

      <span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


</li>
<li><p>保存退出</p>
</li>
</ol>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>虽然可以大大提高命中率。但是缺点也非常多。比如有封号风险和没有了这个功能 以后玩游戏 会更马。还是建议自己动手练·(;・∀・)</p>
]]></content>
      <categories>
        <category>游戏</category>
      </categories>
      <tags>
        <tag>教程</tag>
        <tag>APEX</tag>
      </tags>
  </entry>
  <entry>
    <title>连接云端服务器的方法</title>
    <url>/2022/08/23/%E8%BF%9E%E6%8E%A5%E4%BA%91%E7%AB%AF%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h1 id="连接云端服务器的方法"><a href="#连接云端服务器的方法" class="headerlink" title="连接云端服务器的方法"></a>连接云端服务器的方法</h1><h2 id="1、创建虚拟云服务器"><a href="#1、创建虚拟云服务器" class="headerlink" title="1、创建虚拟云服务器"></a>1、创建虚拟云服务器</h2><p>这次用甲骨文云来作为例子，首先创建一个新的实例。保存好ssh密钥。</p>
<p><img src="/images/20220823/jiaguwen/1.png"></p>
<h2 id="2、下载远程连接工具FinalShell和配置"><a href="#2、下载远程连接工具FinalShell和配置" class="headerlink" title="2、下载远程连接工具FinalShell和配置"></a>2、下载远程连接工具FinalShell和配置</h2><h3 id="1-下载FinalShell"><a href="#1-下载FinalShell" class="headerlink" title="1.下载FinalShell"></a>1.下载FinalShell</h3><p>FinalShell是一体化的的服务器,网络管理软件,不仅是ssh客户端,还是功能强大的开发,运维工具,充分满足开发,运维需求.</p>
<p>特色功能:<br>云端同步,免费海外服务器远程桌面加速,ssh加速,本地化命令输入框,支持自动补全,命令历史,自定义命令参数</p>
<p>Windows版下载地址:<br><a href="http://www.hostbuf.com/downloads/finalshell_install.exe">http://www.hostbuf.com/downloads/finalshell_install.exe</a></p>
<p>macOS版下载地址:<br><a href="http://www.hostbuf.com/downloads/finalshell_install.pkg">http://www.hostbuf.com/downloads/finalshell_install.pkg</a></p>
<p>mac版安装路径 /Applications/FinalShell.app/<br>配置文件路径 /Users/$USER/Library/FinalShell/<br>mac版卸载<br>删除安装目录 /Applications/FinalShell.app/</p>
<p>Linux版安装及教程:<br><a href="http://www.hostbuf.com/t/1059.html">http://www.hostbuf.com/t/1059.html</a></p>
<h3 id="2-配置"><a href="#2-配置" class="headerlink" title="2.配置"></a>2.配置</h3><ul>
<li><p><input checked="" disabled="" type="checkbox"> 
下载安装好后启动到界面点击文件夹标签📂</p>
</li>
<li><p><input checked="" disabled="" type="checkbox"> 
点击第一个加号添加SSH连接</p>
</li>
</ul>
<table>
<thead>
<tr>
<th>常规</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>名称; 甲骨文  *(名称随意)</td>
<td></td>
</tr>
<tr>
<td>主机:服务器IP地址</td>
<td>端口:22</td>
</tr>
<tr>
<td>备注</td>
<td></td>
</tr>
<tr>
<td>认证</td>
<td></td>
</tr>
<tr>
<td>方法:公匙</td>
<td></td>
</tr>
<tr>
<td>用户名:opc</td>
<td></td>
</tr>
<tr>
<td>密匙：点击预览，然后选择1保存的密匙</td>
<td></td>
</tr>
</tbody></table>
<p>最后点击应用就可以连接到自己的云服务器</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>原来连接到云服务器这么简单，如果连不上，需要检查云服务器的防火墙配置。</p>
]]></content>
      <categories>
        <category>服务器</category>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>教程</tag>
      </tags>
  </entry>
  <entry>
    <title>电脑重装系统后如何配置以前的hexo</title>
    <url>/2022/09/27/%E7%94%B5%E8%84%91%E9%87%8D%E8%A3%85%E7%B3%BB%E7%BB%9F%E5%90%8E%E5%A6%82%E4%BD%95%E9%85%8D%E7%BD%AE%E4%BB%A5%E5%89%8D%E7%9A%84hexo/</url>
    <content><![CDATA[<h1 id="电脑重装系统后如何配置以前的Hexo"><a href="#电脑重装系统后如何配置以前的Hexo" class="headerlink" title="电脑重装系统后如何配置以前的Hexo"></a>电脑重装系统后如何配置以前的Hexo</h1><p>前阵子换了SSD重装了系统，发现hexo博客需要在新系统安装配置，找了一下教程，在这里记录一下具体操作。</p>
<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>首先，操作之前。<strong>最重要的一点：备份保存</strong> 硬盘里hexo博客文件夹（就是hexo博客存储的文件夹。） 因为不知道哪些文件需要用，所以我把整个文件夹都保存下来。或者打成一个压缩包。</p>
<h3 id="重装系统之后"><a href="#重装系统之后" class="headerlink" title="重装系统之后"></a>重装系统之后</h3><h3 id="1-安装软件-git-和-Node-js"><a href="#1-安装软件-git-和-Node-js" class="headerlink" title="1.安装软件 git 和 Node.js"></a>1.安装软件 git 和 Node.js</h3><p>git下载地址：<a href="https://link.zhihu.com/?target=https://git-scm.com/">git官网</a> Node.js下载地址：<a href="https://link.zhihu.com/?target=https://nodejs.org/en/">Node.js官网</a></p>
<h3 id="2-配置SSH-Key"><a href="#2-配置SSH-Key" class="headerlink" title="2.配置SSH Key"></a>2.配置SSH Key</h3><p>在 Git Bash 客户端，输入：</p>
<pre class="line-numbers language-text" data-language="text"><code class="language-text">git config --global user.name "这里输入在GitHub的账户名"
git config --global user.email "这里输入在GitHub的注册邮箱名"
ssh-keygen -t rsa -C "这里输入在 GitHub 的注册邮箱"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>接着在 Git Bash 客户端，输入命令行：</p>
<pre class="line-numbers language-none"><code class="language-none">cat id_ras.pub<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>这样会显示公钥文件内容，把它复制到剪贴板。</p>
<p>登录 GitHub 账户，点击右上角个人头像的下拉菜单，依次点击 Settings &gt; SSH and GPG Keys，在 SSH Keys 页面右上角有个<code>New SSH Key</code>按钮，点击该按钮后，粘贴上刚才复制的公钥内容。这样，SSH Key 就配置好了。</p>
<h3 id="3-安装hexo"><a href="#3-安装hexo" class="headerlink" title="3.安装hexo"></a>3.安装hexo</h3><p>在 Git Bash 客户端输入: <code>npm install hexo-cli -g</code></p>
<h3 id="4-删除hexo博客文件夹里的部分文件"><a href="#4-删除hexo博客文件夹里的部分文件" class="headerlink" title="4.删除hexo博客文件夹里的部分文件"></a>4.删除hexo博客文件夹里的部分文件</h3><p><strong>提示：为防止误操作，稳妥起见，执行本操作之前，还是在另外一个盘再存储一份hexo博客文件夹保存为好。</strong></p>
<p><strong>保留_config.yml, themes/, source/, scaffolds/, package.json, .gitignore 这些文件/文件夹，</strong> 其它可以删除。</p>
<h3 id="5-安装文件"><a href="#5-安装文件" class="headerlink" title="5.安装文件"></a>5.安装文件</h3><p>在Git Bash 客户端输入 <code>npm install</code></p>
<h3 id="6-安装部署"><a href="#6-安装部署" class="headerlink" title="6.安装部署"></a>6.安装部署</h3><p>在Git Bash 客户端输入： <code>npm install hexo-deployer-git --save</code></p>
<h3 id="7-运行"><a href="#7-运行" class="headerlink" title="7.运行"></a>7.运行</h3><p>最后，在博客文件夹上，运行Git Bash 客户端，依次输入以下命令：</p>
<pre class="line-numbers language-none"><code class="language-none">hexo clean
hexo g
hexo d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>然后查看是否配置成功。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://zhuanlan.zhihu.com/p/348616082">https://zhuanlan.zhihu.com/p/348616082</a></p>
]]></content>
      <categories>
        <category>教程</category>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>blog</tag>
      </tags>
  </entry>
  <entry>
    <title>利用rclone把OneDrive、GoogleDrive等网盘挂载到window本地</title>
    <url>/2022/09/27/%E5%88%A9%E7%94%A8rclone%E6%8A%8AOneDrive%E3%80%81GoogleDrive%E7%AD%89%E7%BD%91%E7%9B%98%E6%8C%82%E8%BD%BD%E5%88%B0window%E6%9C%AC%E5%9C%B0/</url>
    <content><![CDATA[<h1 id="利用rclone把OneDrive、GoogleDrive等网盘挂载到window本地"><a href="#利用rclone把OneDrive、GoogleDrive等网盘挂载到window本地" class="headerlink" title="利用rclone把OneDrive、GoogleDrive等网盘挂载到window本地"></a>利用rclone把OneDrive、GoogleDrive等网盘挂载到window本地</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>大学4年，都最后一年才发现学校的邮箱可以白嫖1T的Onedrive网盘。而且毕业了说不定还能继续白嫖。但是每次打开网盘都需要在网页上操作，下载软件很麻烦不说，而且还可能乱备份文件，找了一些教程，可以把我们的Onedrive直接挂载到本地磁盘。</p>
<p>成功后你就可以看到下图。</p>
<p><img src="https://tutujanjan.com/wp-content/uploads/2022/09/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE-2022-09-27-034444.png" alt="img"></p>
<p>直接免费增加1T 不多说，既然可以白嫖，不仅要白嫖到还要白嫖到爽才行。</p>
<p>介绍一下怎么挂载吧。</p>
<h2 id="一、环境安装"><a href="#一、环境安装" class="headerlink" title="一、环境安装"></a>一、环境安装</h2><h2 id="1、rclone下载"><a href="#1、rclone下载" class="headerlink" title="1、rclone下载"></a>1、rclone下载</h2><p><a href="https://rclone.org/downloads/">官网下载：https://rclone.org/downloads/</a></p>
<p><img src="https://tutujanjan.com/wp-content/uploads/2022/09/01-1024x309.png" alt="img"></p>
<p>或者你可以在GitHub下载</p>
<p><a href="https://github.com/rclone/rclone/releases">Github下载：https://github.com/rclone/rclone/releases</a></p>
<p><strong>下载后解压</strong></p>
<p>我这里直接解压到我的桌面</p>
<p><img src="https://tutujanjan.com/wp-content/uploads/2022/09/03.jpg" alt="img"></p>
<h2 id="2、安装winfsp"><a href="#2、安装winfsp" class="headerlink" title="2、安装winfsp"></a>2、安装winfsp</h2><p><a href="http://www.secfs.net/winfsp/rel/">官网下载：http://www.secfs.net/winfsp/rel/</a></p>
<p><img src="https://tutujanjan.com/wp-content/uploads/2022/09/04-1024x426.png" alt="img"></p>
<p>或者</p>
<p><a href="https://github.com/billziss-gh/winfsp/releases">Github下载：https://github.com/billziss-gh/winfsp/releases</a></p>
<p><strong>下载完成后安装</strong></p>
<p><img src="https://tutujanjan.com/wp-content/uploads/2022/09/1623763563848.png" alt="img"></p>
<p><img src="https://tutujanjan.com/wp-content/uploads/2022/09/02.png" alt="img"></p>
<p><img src="https://tutujanjan.com/wp-content/uploads/2022/09/03.png" alt="img"></p>
<h2 id="3、安装Git"><a href="#3、安装Git" class="headerlink" title="3、安装Git"></a>3、安装Git</h2><p>官网地址：<a href="https://git-scm.com/downloads">https://git-scm.com/downloads</a></p>
<p>下载后安装</p>
<p>一直下一步就行。</p>
<h2 id="4、为rclone配置环境变量"><a href="#4、为rclone配置环境变量" class="headerlink" title="4、为rclone配置环境变量"></a>4、为rclone配置环境变量</h2><ol>
<li>点开电脑的查找输入查看高级系统设置</li>
<li>选择环境变量</li>
<li>找到刚刚解压的Rclone的路径添加进Path变量</li>
<li>检查rclone是否配置成功，然后按打开，当然也可以打开，输入，如果出现下面的输出则安装成功，否则检查整个步骤的环境是否配置正确。<code>rclone --version</code></li>
</ol>
<p><img src="https://tutujanjan.com/wp-content/uploads/2022/09/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE-2022-09-27-224342-1.jpg" alt="img"></p>
<p><img src="https://tutujanjan.com/wp-content/uploads/2022/09/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE-2022-09-27-224819.jpg" alt="img"></p>
<p><img src="https://tutujanjan.com/wp-content/uploads/2022/09/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE-2022-09-27-225012.jpg" alt="img"></p>
<p><img src="https://tutujanjan.com/wp-content/uploads/2022/09/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE-2022-09-27-225253.jpg" alt="img"></p>
<h1 id="二、配置挂载"><a href="#二、配置挂载" class="headerlink" title="二、配置挂载"></a>二、配置挂载</h1><h2 id="1、rclone配置"><a href="#1、rclone配置" class="headerlink" title="1、rclone配置"></a>1、rclone配置</h2><pre class="line-numbers language-none"><code class="language-none">C:\Users\Administrator&gt;rclone config
No remotes found - make a new one
n) New remote
s) Set configuration password
q) Quit config
n/s/q&gt; n *//第一步：新建配置*
name&gt; tutu
Type of storage to configure.
Enter a string value. Press Enter for the default ("").
Choose a number from below, or type in your own value
 1 / 1Fichier
   \ "fichier"
 2 / Alias for an existing remote
   \ "alias"
 3 / Amazon Drive
   \ "amazon cloud drive"
 4 / Amazon S3 Compliant Storage Providers including AWS, Alibaba, Ceph, Digital Ocean, Dreamhost, IBM COS, Minio, and Tencent COS
   \ "s3"
 5 / Backblaze B2
   \ "b2"
 6 / Box
   \ "box"
 7 / Cache a remote
   \ "cache"
 8 / Citrix Sharefile
   \ "sharefile"
 9 / Compress a remote
   \ "compress"
10 / Dropbox
   \ "dropbox"
11 / Encrypt/Decrypt a remote
   \ "crypt"
12 / Enterprise File Fabric
   \ "filefabric"
13 / FTP Connection
   \ "ftp"
14 / Google Cloud Storage (this is not Google Drive)
   \ "google cloud storage"
15 / Google Drive
   \ "drive"
16 / Google Photos
   \ "google photos"
17 / Hadoop distributed file system
   \ "hdfs"
18 / Hubic
   \ "hubic"
19 / In memory object storage system.
   \ "memory"
20 / Jottacloud
   \ "jottacloud"
21 / Koofr
   \ "koofr"
22 / Local Disk
   \ "local"
23 / Mail.ru Cloud
   \ "mailru"
24 / Mega
   \ "mega"
25 / Microsoft Azure Blob Storage
   \ "azureblob"
26 / Microsoft OneDrive
   \ "onedrive"
27 / OpenDrive
   \ "opendrive"
28 / OpenStack Swift (Rackspace Cloud Files, Memset Memstore, OVH)
   \ "swift"
29 / Pcloud
   \ "pcloud"
30 / Put.io
   \ "putio"
31 / QingCloud Object Storage
   \ "qingstor"
32 / SSH/SFTP Connection
   \ "sftp"
33 / Sugarsync
   \ "sugarsync"
34 / Tardigrade Decentralized Cloud Storage
   \ "tardigrade"
35 / Transparently chunk/split large files
   \ "chunker"
36 / Union merges the contents of several upstream fs
   \ "union"
37 / Webdav
   \ "webdav"
38 / Yandex Disk
   \ "yandex"
39 / Zoho
   \ "zoho"
40 / http Connection
   \ "http"
41 / premiumize.me
   \ "premiumizeme"
42 / seafile
   \ "seafile"
Storage&gt; 26 *//第二步：选择26 Microsoft OneDrive*
** See help for onedrive backend at: https://rclone.org/onedrive/ **

OAuth Client Id
Leave blank normally.
Enter a string value. Press Enter for the default ("").
client_id&gt;
OAuth Client Secret
Leave blank normally.
Enter a string value. Press Enter for the default ("").
client_secret&gt;
Choose national cloud region for OneDrive.
Enter a string value. Press Enter for the default ("global").
Choose a number from below, or type in your own value
 1 / Microsoft Cloud Global
   \ "global"
 2 / Microsoft Cloud for US Government
   \ "us"
 3 / Microsoft Cloud Germany
   \ "de"
 4 / Azure and Office 365 operated by 21Vianet in China
   \ "cn"
region&gt; 1 *//第三步：选择1 国际版*
Edit advanced config? (y/n)
y) Yes
n) No (default)
y/n&gt; n *//第四步：选择n 不进行高级设置*
Remote config
Use auto config?
 * Say Y if not sure
 * Say N if you are working on a remote or headless machine
y) Yes (default)
n) No
y/n&gt; y *//第五步：输入y 使用自动配置授权*

*//输入y后会打开默认浏览器 登录Microsoft账号后 选择 是 即可*

If your browser doesn't open automatically go to the following link: http://127.0.0.1:53682/auth?state=bWBcEsbfRHRZIgcZY7Fg_w
Log in and authorize rclone for access
Waiting for code...
Got code
Choose a number from below, or type in an existing value
 1 / OneDrive Personal or Business
   \ "onedrive"
 2 / Root Sharepoint site
   \ "sharepoint"
 3 / Sharepoint site name or URL (e.g. mysite or https://contoso.sharepoint.com/sites/mysite)
   \ "url"
 4 / Search for a Sharepoint site
   \ "search"
 5 / Type in driveID (advanced)
   \ "driveid"
 6 / Type in SiteID (advanced)
   \ "siteid"
 7 / Sharepoint server-relative path (advanced, e.g. /teams/hr)
   \ "path"
Your choice&gt; 1 *//第六步：选择1 onedrive*
Found 1 drives, please select the one you want to use:
0: OneDrive (business) id=******************
Chose drive to use:&gt; *0 //第七步：选择0: 账号ID*
Found drive 'root' of type 'business', URL: *******************
Is that okay?
y) Yes (default)
n) No
y/n&gt; y *//第八步：选择y 获取账号root权限*
--------------------
[tutu]
type = onedrive
region = global
token = *******
drive_id = *********
drive_type = business
--------------------
y) Yes this is OK (default)
e) Edit this remote
d) Delete this remote
y/e/d&gt; y *//第九步：选择y 确认配置*
Current remotes:

Name                 Type
====                 ====
tutu                   onedrive

e) Edit existing remote
n) New remote
d) Delete remote
r) Rename remote
c) Copy remote
s) Set configuration password
q) Quit config
e/n/d/r/c/s/q&gt; q *//第十步：选择q 退出*

C:\Users\Administrator&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="2、挂载OneDrive为本地硬盘"><a href="#2、挂载OneDrive为本地硬盘" class="headerlink" title="2、挂载OneDrive为本地硬盘"></a>2、挂载OneDrive为本地硬盘</h2><p>这里请使用<code>git bash</code>终端执行以下命令，因为我使用cmd和powershell都关闭终端后挂载程序退出、本地挂载的OneDrive的现象。如果你的windows没有安装git，请自行安装。 cmd的话，cmd是不能退出的，要保持cmd不退出本地硬盘才一直挂载着。</p>
<p>在 git bash 中输入以下挂载命令：</p>
<pre class="line-numbers language-none"><code class="language-none">rclone mount tutu:/  Q: --cache-dir C:\onedrivecache --vfs-cache-mode writes &amp;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>其中：</p>
<ul>
<li><code>tutu</code>替换为你自己前面设置的名称。</li>
<li><code>Q</code>: 替换为你想要挂载的硬盘后的盘符名称，不要记住和本地的C、D盘等重复。</li>
<li>C:\onedrivecache为本地缓存目录，可自行设置。</li>
</ul>
<p>出现：<code>The service rclone has been started</code>则说明挂载成功。</p>
<p>然后输入<code>exit</code>退出即可。</p>
<p>然后就可以看到本地一个盘，往里面复制文件就是上传，从里面复制文件到其他盘就是下载。</p>
<h2 id="3、设置自启动挂载"><a href="#3、设置自启动挂载" class="headerlink" title="3、设置自启动挂载"></a>3、设置自启动挂载</h2><p>创建一个名称为<code>startup_rclone.bat</code>的文件，里面的挂载命令：</p>
<pre class="line-numbers language-none"><code class="language-none">rclone mount tutu:/  Q: --cache-dir C:\onedrivecache --vfs-cache-mode writes &amp;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>将这个文件搜索<code>C:\Users\用户名\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Startup</code>中</p>
<p>计算机重启后要自动挂置的云盘了，当然是因为调用是cmd所以还是不能关闭运行的cmd。下面介绍一种利用Rclone GUI进行管理的使用方法。</p>
]]></content>
      <categories>
        <category>教程</category>
        <category>好用的软件</category>
      </categories>
      <tags>
        <tag>Windows</tag>
        <tag>OneDrive</tag>
        <tag>网盘</tag>
      </tags>
  </entry>
</search>
